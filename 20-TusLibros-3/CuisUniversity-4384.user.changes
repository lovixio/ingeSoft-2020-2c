

----QUIT----(2 October 2020 16:13:01) CuisUniversity-4384.image priorSource: 12433414!

----STARTUP---- (2 October 2020 16:13:02) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4384.image!


!testRun: #ArithmeticObjectIntervalStrategyTest #testSingleton stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testAccessing stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testAdd stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testAddToCollection stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testAt stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testComparing stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testCopyAndGrowBy stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testDeepCopy stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testDo stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testFirst stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testHash stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testIncludes stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testInvalidAt stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testInvalidCreation stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testLast stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testReject stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testRemoveIfAbsent stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testReverse stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testReverseDo stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testSelect stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testShallowCopy stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testSize stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testStoreOn stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testBetweenAndNotInclusive stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testHash stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testMax stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testMin stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testNotInclusiveBetweenAnd stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testNotInclusiveBetweenAndNotInclusive stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testTo stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testToBy stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testToByDo stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testToNegativeBy stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testToReverse stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testToYourself stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #NumberToArithmeticObjectAdapterTest #testPrintString stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #UndefinedArithmeticObjectValueExceptionTest #testSignal stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testAccessing stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testConverging stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testEqual stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testGoing stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testHash stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testIsIncidentTo stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testPrintString stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testStarting stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphPathFinderTest #testGraphPathNotFoundException stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphPathFinderTest #testInvalidPath stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphPathFinderTest #testPathToFarAwayPlaces stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphPathFinderTest #testPathToNeighborPlace stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphPathFinderTest #testSamePlace stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphPathFinderTest #testWithLoops stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphTest #testAccessImmutability stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphTest #testApplyUsingDepthFistSearch stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphTest #testConvergingEdges stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphTest #testCreateGraphWithInvalidEdge stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphTest #testCreateGraphWithUnconnectedNodes stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphTest #testCreateGraphWithoutEdges stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testCreationImmutability stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testEdgesConvergingToSelf stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testEqual stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testEqualsDifferentGraphs stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testGraphCreation stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testHash stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testIncludesNode stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testIsAcyclicWhenGraphIsAcyclic stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testIsAcyclicWhenGraphIsCyclic stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testIsEmpty stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testNodesAdjacentTo stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testNodesWithoutEdges stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testNotEmpty stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testRemoveNode stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testRemoveNodeWithInvalidNode stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testRemoveNodes stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testSameNodesAs stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testStartingEdges stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #TopologicalSortTest #testCreateWithCyclicGraph stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #TopologicalSortTest #testValue stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #TopologicalSortTest #testValueWithAnotherGraph stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #TopologicalSortTest #testWithGraphWithoutEdges stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDenominator stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByDifferentBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByDifferentDomainDerivedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByDivideUnitSameBaseUnitNumerator stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByDivideUnitSameDomainDerivedUnitNumerator stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByInfinity stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByMinusInfinity stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByNullUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByNumber stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideBySameBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideBySameDomainDerivedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testEqualDerivedSameBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testEqualDifferentBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testEqualDividedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testEqualMultipliedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testEqualNullUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testEqualSameBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testFloatDividedByUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testFloatDividedByUnitTwice stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testFloatMultipliedByUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testFloatMultipliedByUnitTwice stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testIntegerDividedByUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testIntegerDividedByUnitTwice stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testIntegerMultipliedByUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testIntegerMultipliedByUnitTwice stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMeasureCreation stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByDividedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByInfinity stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByMinusInfinity stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByNullUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByNumber stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyBySimpleUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testName stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testNameFor stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testNameForMany stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testNameForOne stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testNameForUndefinedAmount stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testNothingAmount stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testNullMeasure stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testNumerator stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testReciprocal stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsDerivedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsDerivedUnitOfOtherDomain stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsDifferentBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsDividedUnit stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsMultipliedUnit stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsNullUnit stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsSameBaseUnit stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #BaseUnitTest #testSign stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testAtBegin stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testAtEnd stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testCurrent stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testDistanceFrom stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testDistanceFromTo stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testDistanceTo stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testDistanceToFrom stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testNext stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testNextANumberOfSomething stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testPrevious stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testPreviousANumberOfSomething stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testRelativeDistanceFromTo stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAdd stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddAssociativity stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddBags stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddCommutativity stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddEquality stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddExistingUnit stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddFloatWithMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddFractionWithMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddImmutability stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddIntegerWithMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddNothing stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAtSameBaseUnitAsWithBaseUnits stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAtSameBaseUnitAsWithDerivedUnits stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testCompoundMeasureImmutability stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testCreationWithMeasures stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testCreationWithMeasuresCopiesCollection stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testDivideByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testDivision stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testDivisionDistributivity stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testDivisionFloatByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testDivisionFractionByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testDivisionIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testDivisionMeasureByCompoundMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testEqual stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testEqualAllNothing stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testEqualNumber stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testEqualOneNothing stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testEqualWithDifferentBagSizeButRepresentSameEntity stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testEqualWithDifferentBagSizeIsNothing stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testHash stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testHashAllNothing stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testHashOneNothing stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testInvalidTruncated stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testIsCompoundMeasurement stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testIsFraction stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testIsNothing stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testLessThan stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testMeasures stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testModulo stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testModuloCompoundMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testModuloFloatByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testModuloFractionByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testModuloIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testModuloMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplication stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplicationByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplicationByZero stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplicationCommutativity stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplicationDistributivity stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplyFloatByMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplyFractionByMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplyIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplyMeasureByCompoundMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testNegated stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testNegatedDistribution stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testNegatedZeroBag stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testNotEqual stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testNumberOfMeasures stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testPrintingForMany stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testPrintingForOne stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testRemFrom stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testRemainder stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testRemainderCompoundMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testRemainderFloatByMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testRemainderIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testRemainderMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testRoundTo stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtract stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractBags stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractEquality stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractExistingUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractFloatWithMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractFractionWithMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractIntegerWithMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractMeasureByCompoundMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractNothing stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testTheZeroOfTheDomainIsEqualToZero stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testTruncated stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testUnitNameOf stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testWithWithBaseUnits stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testWithWithDerivedUnits stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testZeroDivision stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testZeroEqualsTheZeroOfTheDomain stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testAccessing stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testAccessingImmutability stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testAddUnitConversionRule stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testBreakEquivalence stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testConvertsTo stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testDerivedUnitIsEquivalentTo stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testFromToUse stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testGraph stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testGraphChange stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testIsEquivalentTo stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testNoUnitConversionRule stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testRemove stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testUnitConversionRuleUniqueness stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDenominator stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDivideByDividedUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDivideByFloat stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDivideByInfinity stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDivideByInteger stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDivideByMinusInfinity stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDivideBySimpleUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDividedByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDividedByNullUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testEqualDividedUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testEqualMultipliedUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testEqualNullUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testEqualSimpleUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testFloatDividedByUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testFloatDividedByUnitTwice stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testFloatMultipliedByUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testFloatMultipliedByUnitTwice stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testIntegerDividedByUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testIntegerDividedByUnitTwice stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testIntegerMultipliedByUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testIntegerMultipliedByUnitTwice stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMeasureCreation stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByDividedUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByFloat stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByInfinity stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByInteger stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByMinusInfinity stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByNullUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyBySimpleUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testName stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testNameForMany stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testNameForOne stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testNothingAmount stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testNullMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testNumerator stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testReciprocal stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testSameDomainAsDividedUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testSameDomainAsMultipliedUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testSameDomainAsNullUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testSameDomainAsSameSimpleUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testSign stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testAdd stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testDivide stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testIsCompoundMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testModulo stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testMultiply stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testNegated stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testRemainder stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testSubtract stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testTruncated stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testCanConvertTo stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testCompoundMeasureConversion stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testConvertToUsing stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testDefaultGraphPathFinder stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testDirectSearching stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testIndirectSearching stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testInvalidConversion stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testSameDomainConversion stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testAdd stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testAmount stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testBagCreationWithNumber stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testBetweenAnd stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testCompoundMeasureCreationWithMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testConvertTo stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testDenominator stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testDivide stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testDivideByUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testDivideMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testEqualsCompoundMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testEqualsMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testIsCompoundMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testIsNothing stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testMax stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testMin stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testModulo stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testModuloMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testMultiplication stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testMultiplyByUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testMultiplyMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testNegated stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testNegative stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testNumerator stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testPositive stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testRemainder stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testRemainderMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testRoundTo stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testSameDomainAs stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testSameUnitAs stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testSubtract stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testToBy stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testToFromFixed stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testToInfinity stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testToToFixed stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MinusInfinityTest #testTruncated stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MinusInfinityTest #testUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MinusInfinityTest #testUnitNameOf stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDenominator stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideByDividedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideByFloat stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideByInfinity stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideByInteger stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideByMinusInfinity stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideBySimpleUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDividedByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDividedByNullUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testEqualDividedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testEqualMultipliedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testEqualNullUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testEqualSimpleUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testFloatDividedByUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testFloatDividedByUnitTwice stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testFloatMultipliedByUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testFloatMultipliedByUnitTwice stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testIntegerDividedByUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testIntegerDividedByUnitTwice stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testIntegerMultipliedByUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testIntegerMultipliedByUnitTwice stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMeasureCreation stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByDividedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByFloat stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByInfinity stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByInteger stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByMinusInfinity stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByNullUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyBySimpleUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testName stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testNameForMany stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testNameForOne stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testNothingAmount stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testNullMeasure stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testNumerator stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testReciprocal stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testSameDomainAsDividedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testSameDomainAsMultipliedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testSameDomainAsNullUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testSameDomainAsSameSimpleUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testSign stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testDenominator stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testName stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testNameForMany stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testNameForOne stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testNothingAmount stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testNullMeasure stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testNumerator stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testReciprocal stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testSameDomainAs stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testSign stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testDenominator stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testDivideByDividedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testDivideByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testDivideByNullUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testDivideBySimpleUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testEqualBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testEqualDerivedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testEqualDividedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testEqualMultipliedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testEqualNullUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testMeasureCreation stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testMultiplyByDividedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testMultiplyByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testMultiplyByNullUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testMultiplyBySimpleUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testName stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testNameForMany stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testNameForOne stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testNumerator stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testReciprocal stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testSameDomainAsBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testSameDomainAsDerivedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testSameDomainAsDividedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testSameDomainAsMultipliedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testSameDomainAsNullUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testSign stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testAmount stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testConvertTo stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testConvertToIfSuccessfullDoIfFails stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testIsNothing stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testAdd stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testAmount stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testBagCreationWithNumber stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testBetweenAnd stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testCompoundMeasureCreationWithMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testConvertTo stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testDenominator stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testDivide stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testDivideByUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testDivideMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testEqualsCompoundMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testEqualsMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testIsCompoundMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testIsNothing stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testMax stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testMin stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testModulo stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testModuloMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testMultiplication stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testMultiplyByUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testMultiplyMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testNegated stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testNegative stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testNumerator stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testPositive stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testRemainder stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testRemainderMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testRoundTo stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testSameDomainAs stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testSameUnitAs stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testSubtract stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testToBy stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testToFromFixed stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testToInfinity stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testToToFixed stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testTruncated stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testUnitNameOf stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testConversionFactor stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDenominator stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByDifferentBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByDifferentDomainDerivedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByDivideUnitSameDerivedUnitNumerator stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByDividedUnitSameBaseUnitNumerator stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByNullUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideBySameBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideBySameDomainDerivedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualDerivedSameBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualDifferentBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualDividedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualMultipliedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualNullUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualSameBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualSameDerivedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testMeasureCreation stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testMultiplyByDividedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testMultiplyByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testMultiplyByNullUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testMultiplyBySimpleUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testName stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testNameForMany stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testNameForOne stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testNothingAmount stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testNullMeasure stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testNumerator stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testReciprocal stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsDerivedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsDerivedUnitOfOtherDomain stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsDifferentBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsDividedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsMultipliedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsNullUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsSameBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSign stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalUnitConversionFunctionTest #testAccessing stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalUnitConversionFunctionTest #testEqual stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalUnitConversionFunctionTest #testHash stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalUnitConversionFunctionTest #testInvalidValues stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalUnitConversionFunctionTest #testValidValues stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAbs stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddAssociativity stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddBaseUnitAndDerivedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddCommutativity stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddDerivedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddDifferentBaseUnits stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddDifferentUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddDividedMeasure stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddFloatWithMeasure stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddFractionWithMeasure stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddInfinity stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddIntegerWithMeasure stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddMinusInfinity stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddMultipliedMeasure stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddNumber stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAmount stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAmountCanBeConvertedToFloat stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAmountCanBeConvertedToFraction stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAmountCanBeConvertedToInteger stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAtBaseUnitIfNone stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testBetweenAnd stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testBetweenAndNotInclusive stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testCompareGreaterThan stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testConvertNothing stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testConvertTo stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testDenominator stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testDivideInfinity stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testDivideMinusInfinity stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByDividedMeasure stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByMeasureBaseUnitOverBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByMeasureBaseUnitOverDerivedUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByMeasureDerivedUnitOverBaseUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByNumber stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByZero stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionFloatByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionFractionByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionOfBaseUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionOfDerivedUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testEqual stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testEqualDifferentBaseUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testEqualNothingWhenRepresentSameEntity stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testEqualNumber stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testGreaterThanEquals stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testHash stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testIntegerDivideCompoundMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidBetweenAnd stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidBetweenAndNotInclusive stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidConvertTo stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidGreaterThan stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidGreaterThanAgainstScalar stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidGreaterThanEquals stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidLessThan stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidLessThanEquals stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidMax stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidMin stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidNotInclusiveBetweenAnd stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidNotInclusiveBetweenAndNotInclusive stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testIsFraction stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testIsNothing stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testLessThan stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testLessThanEquals stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMax stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMeasures stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMin stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloByZero stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloFloatByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloFractionByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloInfinity stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloMinusInfinity stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloOfBaseUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloOfDerivedUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplicationOfBaseUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplicationOfDerivedUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyByDividedMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyByMeasureAssociativity stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyByMultipliedMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyByNumber stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyFloatByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyFractionByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyInfinity stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyMinusInfinity stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testNegated stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testNegative stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testNotEqual stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testNotInclusiveBetweenAnd stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testNotInclusiveBetweenAndNotInclusive stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testNumerator stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testPositive stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testPrintingForMany stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testPrintingForOne stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemFrom stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderByZero stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderCompoundMeasureByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderFloatByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderInfinity stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderMinusInfinity stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderOfBaseUnit stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderOfDerivedUnit stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testRoundTo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSameDomainAs stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSimplificationsAddingWithZero stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSimplificationsDividingFromZero stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractAssociativity stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractBaseUnit stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractDerivedUnit stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractDividedMeasure stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractFloatWithMeasure stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractFractionWithMeasure stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractInfinity stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractIntegerWithMeasure stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractMinusInfinity stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractMultipliedMeasure stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testTheZeroOfTheDomainIsEqualToZero stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testTo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToAt stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToAtByNegative stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToBy stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToByDo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToCollect stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToFirst stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToLast stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToSize stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testTruncated stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testUnit stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testUnitNameOf stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testZeroIsEqualToTheZeroOfTheDomain stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleTest #testAccessing stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleTest #testConvert stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleTest #testEqual stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleTest #testHash stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleToEdgeAdapterTest #testAccessing stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleToEdgeAdapterTest #testEdgeProtocol stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleToEdgeAdapterTest #testEdgeProtocolBehavior stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleToEdgeAdapterTest #testEqual stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleToEdgeAdapterTest #testHash stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #AllDatesUniverseTest #testDo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #AllDatesUniverseTest #testFrom stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #AllDatesUniverseTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #AllDatesUniverseTest #testTo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testCreation stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testIncludesDayMovesToTheNextMonday stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testIncludesDayMovesToThePreviousMonday stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testIncludesDayWhenDayIsMonday stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testIncludesDayWhenDayIsSaturday stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #CardinalDayMonthRuleTest #testDifferentMonth stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #CardinalDayMonthRuleTest #testIncludesDayMovesToTheThirdMonday stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #CardinalDayMonthRuleTest #testIncludesDayWhenDayIsSaturday stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #CardinalDayMonthRuleTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DayOfMonthRuleTest #testAccessing stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DayOfMonthRuleTest #testIncludes stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testAdd stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testAddRules stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testAlwaysFulfills stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testAsOrderedCollection stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testAsSortedCollection stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testComposite stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testCreation stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testDo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testExcludedFromTo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testExcludedIn stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testExcludes stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testExcludesAll stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testIncludedFromTo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testIncludedIn stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testIncludes stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testIncludesAll stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testInvalidDo stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testIsEmpty stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testRemoveAllRules stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testRemoveIfAbsent stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testRemoveRule stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testRulesCopy stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testRulesThatInclude stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testSize stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testSpecies stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testAccessing stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testEquals stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testImmutableValue stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testMonday stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testMonth stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testNext stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testNextFiltered stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testPreviousFiltered stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testSaturday stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testSunday stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testToday stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #IntervalConstrainedInclusionRuleTest #testFrom stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #IntervalConstrainedInclusionRuleTest #testIncludes stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #IntervalConstrainedInclusionRuleTest #testInstanceCreating stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #IntervalConstrainedInclusionRuleTest #testPrintString stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #IntervalConstrainedInclusionRuleTest #testTo stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testDaysBetween stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testExcludedFromTo stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testExcludedIn stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testExcludes stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testExcludesAll stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testIncludedFromTo stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testIncludedIn stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testIncludes stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testIncludesAll stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testName stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testNegated stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testNextNegativeDuration stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testNextPositiveDuration stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testStream stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAbsoluteDate stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAcceptAVisitor stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAsSmalltalkDate stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAt stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAtMidnight stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAtNoon stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAtTimeOfDay stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDay stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDayNumber stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDayOfMonth stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDaysFrom stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDaysTo stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDefaultIntervalIncrement stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testEqual stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testHash stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testIntervalStrategy stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testIsFirstDayOfMonth stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testIsFirstDayOfYear stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testIsLastDayOfMonth stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testIsLastDayOfYear stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testLessThan stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testMonth stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testMonthOfYear stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNext stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNextDay stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNumberOfDaysFromBaseDate stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNumberOfDaysFromBeginningOfMonth stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNumberOfDaysFromJanuaryFirst stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNumberOfDaysToEndOfMonth stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNumberOfDaysToEndOfYear stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testPrevious stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testPreviousDay stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #RelativeGregorianDateTest #testToEvery stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #RelativeGregorianDateTest #testToEveryDay stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #RelativeGregorianDateTest #testToEveryDayNumber stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #RelativeGregorianDateTest #testToEveryDayNumbers stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #RelativeGregorianDateTest #testYear stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #SpecificDayRuleTest #testAccessing stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #SpecificDayRuleTest #testIncludes stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #SpecificObjectInclusionRuleTest #testAccessing stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #SpecificObjectInclusionRuleTest #testIncludes stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #SpecificObjectInclusionRuleTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterStreamTest #testAtEnd stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterStreamTest #testCurrent stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterStreamTest #testDo stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterStreamTest #testReset stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddArgentineLaw23555Rule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddCardinalDayMonthRuleRule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddDateRule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddDayOfMonthRule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddDayRule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddRuleFrom stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddRuleFromTo stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddRules stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddRulesFrom stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddRulesFromTo stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testDateRule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testDayOfMonthRule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testDayRule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testDaysBetween stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testExcludedFromTo stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testExcludedIn stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testExcludes stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testExcludesAll stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testFromString stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testHash stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testIncludedFromTo stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testIncludedIn stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testIncludes stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testIncludesAll stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testNegatedIncludes stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testNegatedNext stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testNextNegativeDuration stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testNextPositiveDuration stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testNumberOfDaysBetweenTwoDates stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testRemoveAllRules stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testRuleFromTo stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testRules stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testRulesThatIncludeADate stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testStream stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #UniverseTest #testDo stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testEqual stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testHash stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testLastDayNumber stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testLessThan stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testName stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNext stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNumber stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNumberOfDaysFromBeginningOfYear stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNumberOfDaysIn stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testPrevious stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testPrintString stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FixedGregorianDateTest #test29OfFebruaryToEveryDayOfMonth stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FixedGregorianDateTest #testAsSmalltalkDate stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FixedGregorianDateTest #testAt stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FixedGregorianDateTest #testAtMidnight stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FixedGregorianDateTest #testAtNoon stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testAtTimeOfDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testCreation stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testDayNumber stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testDayOfMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testDaysFrom stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testDaysTo stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testEqual stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testHash stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testImmutableValue stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesDate stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesDateTime stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesMonthOfYear stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesYear stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testInvalidCreation stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsApril stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsAugust stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsDecember stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFebruary stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFirstDayOfMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFirstDayOfYear stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFriday stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsJanuary stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsJuly stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsJune stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsLastDayOfMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsLastDayOfYear stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsMarch stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsMay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsMonday stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsNovember stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsOctober stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsSaturday stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsSeptember stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsSunday stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsThursday stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsTuesday stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsWednesday stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testLessThan stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testMonthOfYear stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNext stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextDayOfMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextInNumberOfDays stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextInWeeks stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysFromBaseDate stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysFromBeginningOfMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysFromJanuaryFirst stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysToEndOfMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysToEndOfYear stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testPrevious stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousDayOfMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousInNumberOfDays stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousInWeeks stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testPrintString stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testTheBeginningAndTheEndOfTime stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testTo stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToBy stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToByDo stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToByReverse stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryBeginningDifferentDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryBeginningSameDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayBeginningDifferentDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayBeginningSameDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayNumber stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayNumbers stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayOfMonth stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testToNegativeBy stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testTomorrow stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testVisitorAccessing stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testYear stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testYesterday stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testAccessing stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testAdd stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testComparing stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testFirstTimeOfDay stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testHash stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testLastTimeOfDay stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testLessThan stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testNow stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testPrintString stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testReverse stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testSameDateAs stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testSameTimeOfDayAs stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testSpecialDateTimes stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testSubtract stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeFrom stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeFromMidnight stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeTo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeToEndOfDay stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testTo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testToBy stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testToByDo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testToByMinutesDo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testToNegativeByDo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testWithDay stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testWithDayOfMonth stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testComma stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testComparing stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testCreation stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDateOfYear stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDaysFrom stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDaysTo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDivisionSymbolCanBeUseToCreateADate stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testEqual stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testHash stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testInvalidCreation stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsFirstDayOfMonth stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsFirstDayOfYear stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsLastDayOfMonth stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsLastDayOfYear stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNext stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNextANumberOfDays stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysFromBeginningOfMonth stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysToEndOfMonth stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysToEndOfYear stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testPrevious stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testPreviousANumberOfDays stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testPrintString stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testTo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToBy stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToByDo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToEveryDayNumber stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToEveryDayNumbers stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToNegativeBy stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToReverse stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testCommonDaysMeasure stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testDayCreation stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testDayPositionedInWeek stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testDays stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testDaysFrom stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testDaysTo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testEqual stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testGlobalVariables stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testInvalidNameCreation stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testIsFriday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testIsMonday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testIsSaturday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testIsSunday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testIsThursday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testIsTuesday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testIsWednesday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testName stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testNext stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testNextInANumberOfDays stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testNumberOfDaysSinceSunday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testPrevious stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testPreviousInANumberOfDays stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testPrintString stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testSinceSunday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testTo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testToBy stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testToDo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testToNegativeBy stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testToNegativeByDo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testToday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testCardinalDay stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testCreation stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testCurrent stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testDates stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testEqual stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testFirstDate stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testFirstDay stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testHash stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesDate stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesDateTime stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesMonthOfYear stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesYear stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testInvalidCreation stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLastDate stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLastDay stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLastDayNumber stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLessThan stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testMonthsFrom stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testMonthsTo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testName stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNext stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNextANumberOfMonths stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNextMonthDefinedAs stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNumberOfDays stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPrevious stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPreviousANumberOfMonths stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPreviousMonthDefinedAs stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPrintString stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testTo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToBy stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToByDo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToByYearsDo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToNegativeBy stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToReverse stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testApril stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testAugust stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testComma stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testCommonMonthsMeasure stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testCurrent stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testDayOfMonthCreation stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testDecember stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testDivisionSymbolCanBeUseToCreateADayOfMonth stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testFebruary stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testFirstDayOfMonth stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testGlobalVariables stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIdentity stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsApril stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsAugust stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsDecember stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsFebruary stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsJanuary stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsJuly stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsJune stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsMarch stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsMay stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsNovember stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsOctober stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsSeptember stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testJanuary stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testJuly stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testJune stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testLastDayOfMonth stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testLessThan stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testMarch stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testMay stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testMonthCreation stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testMonthsFrom stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testMonthsTo stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testNamed stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testNext stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testNextInANumberOfMonths stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testNovember stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testNumberOfMonthsPerYear stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testOctober stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testOf stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testOfYear stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testPrevious stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testPreviousInANumberOfMonths stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testSeptember stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testTo stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testToBy stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testToByDo stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testToNegativeByDo stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testToReverse stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testAccessing stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testAsInterval stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testCanCreateATimespanAfterATimeMeasure stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testCanCreateATimespanBeforeATimeMeasure stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testEqual stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testFromInterval stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testHash stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testPrintString stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testTo stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testCurrent stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testDates stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testDaysInFebruary stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testDistanceTo stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testEqual stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testFirstDate stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testFirstDay stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testFirstMonth stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testHash stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testIncludesDate stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testIncludesDateTime stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testIncludesMonthOfYear stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testIncludesYear stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testInvalidNextANumberOfYears stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testInvalidPreviousANumberOfYears stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testInvalidYear stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testIsLeap stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testLastDate stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testLastDay stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testLastMonth stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testLessThan stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testMonths stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testMonthsOfYearsAccessing stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testNext stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testNextANumberOfYears stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testNextLeapYear stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testNumber stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testNumberOfDays stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testNumberOfDaysFromBaseDate stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testPrevious stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testPreviousANumberOfYears stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testPreviousLeapYear stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testPrintString stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testTo stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testToBy stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testToByDo stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testToByReverse stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testToNegativeBy stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testYearsFrom stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testYearsTo stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testZeroYears stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testEqual stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testHash stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testLastDayNumber stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testLessThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testName stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNext stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNumber stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNumberOfDaysFromBeginningOfYear stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNumberOfDaysIn stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testPrevious stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testPrintString stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #MoreThanOnePointInTimeIntervalStrategyTest #testIsValidIntervalFromToBy stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testEqual stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testGreaterThanFebruary stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testHash stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLastDayNumber stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThanFebruary stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testName stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumber stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumberOfDaysIn stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testPrintString stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testDayOfMonthCreation stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testEqual stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testGreaterThanFebruary stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testHash stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testLastDayNumber stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testLessThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testLessThanFebruary stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testName stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testNumber stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testNumberOfDaysIn stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testPrintString stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyOneDaysGregorianMonthTest #testThirtieth stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyOneDaysGregorianMonthTest #testThirtyfirst stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testAdd stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testCanCreateAsWrittenInEnglish stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testCanNotCreateTimeOfDayWithSemiColonWhenReceiverHasSeconds stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testComparing stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testCreation stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testCreationHour stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testCreationMilliseconds stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testCreationMinute stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testCreationSecond stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testFirstTimeOfDay stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testHash stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testInvalidCreation stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testLastTimeOfDay stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testLessThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testNow stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testOneMillisecond stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testOneSecond stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testPrintString stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testReverse stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testSubtract stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testTimeFrom stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testTimeFromMidnight stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testTimeTo stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testTimeToEndOfDay stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testTo stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testToBy stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testToByDo stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testToNegativeByDo stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testTwentyFourHours stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testZeroHours stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testAllUnits stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testDay stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testHour stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testMillisecond stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testMinute stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testMonth stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testSecond stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testWeek stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testYear stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #BinarySearchTest #testquickFindFirst stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #BinarySearchTest #testquickFindLast stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #BinarySearchTest #testquickIndexOf stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #BinarySearchTest #testquickIndexOfWithSemistableOrder stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectTest #testIdentitySet stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectTest #testOrderedCollection stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectTest #testSet stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectTest #testSortedCollection stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAsCommaSeparatedOnWorksAsCommaStringAnd stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAsCommaStringAndDoesNotAddAnythingWhenEmpty stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAsCommaStringAndDoesNotAddAnythingWhenHasOneElement stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAsCommaStringAndSeparatesWithAndWhenTwoOneElements stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAsCommaStringAndSeparatesWithCommaButLastOneWithAndWhenMoreThanTwoElements stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAverageFailsWhenTheCollectionIsEmpty stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAverageIfEmptyCalculatesItAsUsualWhenTheCollectionIsNotEmpty stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAverageIfEmptyEvaluatesEmptyBlockWhenTheCollectionIsEmpty stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testGroupByHavingSelectsTheResultOfGroupBy stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testGroupByReturnsADictionaryThatGroupsACollectionByThePluggableKey stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testIsCollection stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testItMaintainsTheSameCollectionSpecies stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testSetEquality stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionContainsASingleLevelOfElementsItReturnsTheSameCollection stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionContainsMoreThanTwoLevelsltReturnsTheElementsOfAllNestedCollections stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionContainsStringCollectionsItDoesNotFlattenTheStrings stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionContainsStringsItReturnsTheSameCollection stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionContainsTwoLevelsOfElementsItReturnsTheElementsOfAllNestedCollections stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionIsEmptyItReturnsTheSameCollection stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testsAverageWorksWithABlock stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #DictionaryTest #testIsCollection stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #DictionaryTest #testKeyNotFoundSignalTheRightMessage stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testAt stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludeNumbersOutsideTheInInterval stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludeObjectsThatAreNotNumbers stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludedNumbersThatAreInRangeButNotReachedByTheStep stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludedNumbersThatAreInRangeButNotReachedByTheStepWithReversedIntervals stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testFloatInterval stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testFloatToByDo stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIncludedNumbersRespectAStepDifferentToOne stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIncludedNumbersRespectNegativeSteps stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIncludesNumbersInsideTheInterval stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIncludesNumbersInsideTheIntervalEvenForReversedIntervals stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIntegerInterval stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIntegerToByDo stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberAndNegativeStepBiggerThanOneIncludeOnlyThatNumber stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberAndNegativeStepIncludeOnlyThatNumber stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberAndStepBiggerThanOneIncludesOnlyTheNumber stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberIncludesOnlyTheNumber stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #OrderedCollectionTest #testIsCollection stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #OrderedCollectionTest #testStreamContentsWorksAsExpected stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #OrderedCollectionTest #testWriteStreamOnOrderedCollectionGrowsAsExpected stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #OrderedDictionaryTest #testOrder stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #OrderedDictionaryTest #testRemove stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testCombinationsAtATimeDoShouldEvaluateBlockWithEmptyCollection stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testCombinationsAtATimeDoWorksAsExpected stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testDoSeparatedByDoesNotValueSeparatedBlockForCollectionsOfOneElement stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testDoSeparatedByDoesNotValueSeparatedBlockOnLastElement stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testDoSeparatedByDoesNothingForEmptyCollection stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testFirstAvailableReturnsAllObjectsWhenRequestedMoreThanTheSize stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testFirstAvailableReturnsAllObjectsWhenRequestedTheReceiversSize stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testFirstAvailableReturnsTheFirstRequestedObjectsWhenTheyAreAvailable stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testLastAvailableReturnsAllObjectsWhenRequestedMoreThanTheSize stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testLastAvailableReturnsAllObjectsWhenRequestedTheReceiversSize stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testLastAvailableReturnsTheLastRequestedObjectsWhenTheyAreAvailable stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testWithIndexDoSeparatedByDoesNotValueSeparatedBlockForCollectionsOfOneElement stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testWithIndexDoSeparatedByDoesNotValueSeparatedBlockOnLastElement stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testWithIndexDoSeparatedByDoesNothingForEmptyCollection stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #TextTest #testIsText stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #WeakIdentitySetTest #test stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testAllAccessToInstVarReturnsAccessReceiversBranch stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testAllAccessToIsEmptyForVariableNotDefinedInClass stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testAllBroadAccessToReturnsAccessInAllHierarchy stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testAllSuperclassesUpToFailsWhenWantsToStopOnInvalidSuperclass stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testAllSuperclassesUpToPutsFirstSuperclassesFirst stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testAllSuperclassesUpToStopsOnRightClass stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testAllUnreferencedInstanceVariablesReturnsOnlyUnreferencedVariables stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testHasReferencesToInstanceVariableNamedLooksInClassOnly stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testHighestClassImplementingReturnsReceiverWhenNoOtherSuperclassImplementsSelector stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testHighestClassImplementingReturnsTheTopSuperclassImplementingSelector stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testHighestClassImplementingValuesIfNoneBlockWhenSelectorIsNotImplemented stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testIsInstanceVariableNamedReferencedInHierarchyLooksReferencesInHierarchy stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testProtoObjectAllRegularInstVarNamesDoesNotFail stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testUnreferencedInstanceVariablesReturnsOnlyUnreferencedVariables stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testWithAllSuperclassesUpToIncludesReceiverClass stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #CategorizerTest #testClassifiesWithoutLeadingBlanks stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CategorizerTest #testClassifiesWithoutTrailingBlanks stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CategorizerTest #testRemovesLeadingBlanksWhenAddingCategory stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CategorizerTest #testRemovesTrailingBlanksWhenAddingCategory stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CategorizerTest #testRenamesWithoutLeadingBlanks stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CategorizerTest #testRenamesWithoutTrailingBlanks stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #ClassTest #testDefinitionReplacingCategoryWithReplacesTheCategoryWithTheGivenOne stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #ClassTest #testDefinitionReplacingCategoryWithWorksWhenCategoryIsNil stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateAndTimeTest #testCreation stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateAndTimeTest #testDayOfWeek stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateAndTimeTest #testInvalidOperations stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateAndTimeTest #testIsDateAndTime stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateAndTimeTest #testLessDateAndTime stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateAndTimeTest #testOperations stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateAndTimeTest #testToByDo stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateTest #testCreation stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateTest #testInvalidOperations stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateTest #testLessDate stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateTest #testLessDuration stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DurationTest #testPrintString stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #MonthTest #testCreation stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #MonthTest #testPrintString stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #TimeTest #testCreation stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #TimeTest #testEqual stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #TimeTest #testSqueakInquiries stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #TimeTest #testTimePartsArePositive stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #TimespanTest #testIsTimespan stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #WeekTest #testCreation stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #WeekTest #testIncluding stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #WeekTest #testInvalidOperations stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #WeekTest #testPrintString stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #WeekTest #testWeekDayNames stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #YearTest #testCreation stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #YearTest #testIncluding stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test01isGetterWhenSameSelectorAsInstanceVariableAndOnlyReturnsThatVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test01withPropertiesDoIfSelectorEvaluatesFirstBlockWhenMethodHasProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test02isNotGetterWhenDifferentSelectorAsInstanceVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test02removePropertiesRestoresPenultimalLiteralToSelector stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test03isNotGetterWhenSameSelectorAsInstanceVariableButDoesOtherThingBesidesReturningVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test03removePropertiesKeepsSelectorIfMethodDoesNotHaveProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test04isSetterWhenSameKeywordSelectorAsInstanceVariableAndOnlySetsTheVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test04withPropertiesDoIfSelectorEvaluatesSecondBlockWhenMethodHasNoProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test05hasLiteralSuchThatTravelsListeralsWhenMethodHasProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test05isNotSetterWhenDifferentKeywordSelectorAsInstanceVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test06hasLiteralSuchThatTravelsListeralsWhenMethodHasNoProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test06isNotSetterWhenSameKeywordSelectorAsInstanceVariableButDoesNotAssignParameter stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test0701withPropertiesDoReturnsNilIfMethodHasNoProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test07AccessorDescriptionIsGetterForAGetter stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test07withPropertiesDoEvaluatesBlockOnlyWhenMethodHasProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test08AccessorDescriptionIsSetterForASetter stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test08hasLiteralThoroughReturnTrueWhenMethodHasPropertiesAndHasLiteral stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test09AccessorDescriptionIsReadForMethodThatReadsInstanceVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test09hasLiteralThoroughReturnFalseWhenMethodHasPropertiesAndHasNoLiteral stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test10AccessorDescriptionIsWriteForMethodThatWritesInstanceVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test10hasLiteralThoroughReturnTrueWhenMethodHasNoPropertiesAndHasLiteral stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test11AccessorDescriptionIsWriteReadForMethodThatWritesAndReadInstanceVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test11hasLiteralThoroughReturnFalseWhenMethodHasNoPropertiesAndHasNoLiteral stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test12pragmaAtReturnsPragmaIfExist stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test13pragmaAtReturnsNilIfPragmaDoesNotExist stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test14pragmasReturnsCollectionOfMethodPragmas stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test15pragmasReturnsEmptyCollectionWhenMethodHasNoProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test16propertiesReturnsAnNewAdditionalMethodStateWhenNoPropertiesHasBeenSet stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test17propertiesReturnsTheAlreadySetAdditionalMethodStateWhenHasProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test18propertyKeysAndValuesDoIteratesOverProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test19propertyKeysAndValuesDoDoesNotEvaluateBlockWhenMethodHasNoProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test20propertyValueAtReturnsPropertyValueWhenSetted stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test21propertyValueAtReturnsNilWhenPropertyIsNotFound stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test22propertyValueAtReturnsNilWhenMethodHasNoProperties stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test23propertyValueAtIfAbsetReturnsPropertyValueWhenFound stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test24propertyValueAtIfAbsetEvaluatesIfAbsentBlockWhenNotFound stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test25propertyValueAtIfAbsetEvaluatesIfAbsentBlockWhenMethodHasNoProperties stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test26propertyValueAtPutCreatesPropertiesWithNewOne stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test27propertyValueAtPutReplacesPropertyIfAlreadyExisted stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test28propertyValueAtPutAddsNewPropertyIfPropertiesExisted stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test29selectorReturnsMethodSelectorWhenNoProperties stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test30selectorReturnsMethodSelectorWhenHasProperties stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test31SettingSelectorWhenHasNoProperties stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test32SettingSelectorWhenHasProperties stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #DelayTest #testBounds stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #DelayTest #testMultiProcessWaitOnSameDelay stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #DelayTest #testMultiSchedule stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #MonitorTest #testExample1 stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #MonitorTest #testExample2 stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #MonitorTest #testMonitorNotGainingUnwantedSignalsDuringUnwinding stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #ProcessTest #testAtomicSuspend stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #SemaphoreTest #testCritical stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #SemaphoreTest #testCriticalIfError stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #SemaphoreTest #testSemaAfterCriticalWait stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #SemaphoreTest #testSemaInCriticalWait stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #SemaphoreTest #testWaitAndWaitTimeoutTogether stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #SemaphoreTest #testWaitTimeoutMSecs stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!classDefinition: #BecomeTestExperiment category: 'BaseImageTests-Kernel' stamp: 'HAW 10/2/2020 16:13:29'!
Object subclass: #BecomeTestExperiment
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'BaseImageTests-Kernel'!

!testRun: #BecomeTest #testBecome stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!classDefinition: #BecomeTestExperiment category: 'BaseImageTests-Kernel' stamp: 'HAW 10/2/2020 16:13:29'!
Object subclass: #BecomeTestExperiment
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'BaseImageTests-Kernel'!

!testRun: #BecomeTest #testShapeMutation stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #BooleanTest #testAndAndAndAndTrueTable stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #BooleanTest #testAndAndAndTrueTable stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #BooleanTest #testAndAndTrueTable stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #BooleanTest #testIsBoolean stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #BooleanTest #testOrOrOrOrTrueTable stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #BooleanTest #testOrOrOrTrueTable stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #BooleanTest #testOrOrTrueTable stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterSetTest #testIncludesReturnsFalseForCharacterNotIncluded stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterSetTest #testIncludesReturnsFalseForObjectsThatAreNotCharacters stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterSetTest #testIncludesReturnsTrueForCharacterIncluded stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterTest #testCaseConversion stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterTest #testFromUtf8 stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterTest #testIsCharacter stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsFromUtf8 stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsToUtf8 stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterTest #testSorting stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #CharacterTest #testTestingMethods stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #CharacterTest #testToUtf8 stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNilIfNotNil0Arg stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNilIfNotNil0ArgAsVar stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNilIfNotNil1Arg stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNilIfNotNil1ArgAsVar stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNil0Arg stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNil0ArgAsVar stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNil1Arg stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNil1ArgAsVar stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNilIfNil0Arg stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNilIfNil0ArgAsVar stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNilIfNil1Arg stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNilIfNil1ArgAsVar stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #ProcessorTest #testGrabProcessor stamp: 'HAW 10/2/2020 16:13:31'!
PASSED!

!testRun: #ProcessorTest #testGrabProcessorOnlyForNoTimeout stamp: 'HAW 10/2/2020 16:13:33'!
PASSED!

!testRun: #ProcessorTest #testGrabProcessorOnlyForTimeout stamp: 'HAW 10/2/2020 16:13:34'!
PASSED!

!testRun: #ProcessorTest #testValueUnpreemptively stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #SpecialSelectorsTest #testCollectionAtSymbol stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #SpecialSelectorsTest #testNumberAtSymbol stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StrikeFontTest #testBaseAndDerivedFont stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StrikeFontTest #testBaseAndDerivedFontSanity stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testAntepenultimateIfAbsentReturnsAntepenultimateIfExists stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testAntepenultimateIfAbsentValuesIfAbsentBlockWhenNoAntepenultimate stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testAntepenultimateReturnsAntepenultimateIfExists stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testAntepenultimateSignalsErrorWhenCollectionIsNotBigEnough stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testCanNotInsertShiftingRightWhenInsertionPointIsBiggerThanSize stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testCanNotInsertShiftingRightWhenInsertionPointIsLessThanOne stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testInsertShiftingRightLoosesLastElementAndKeepsPreviousOnes stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testInsertShiftingRightReplacesElementWhenSizeIsOne stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testInsertShiftingRightReplacesLastElementWhenInsertingAtLastIndex stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testIsArray stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testIsCollection stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testLastIfEmptyReturnsLastWhenExist stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testLastIfEmptyValuesEmptyBlockWhenEmpty stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testLastSignalsErrorWhenEmpty stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testPenultimateIfAbsentReturnsPenultimateIfExists stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testPenultimateIfAbsentValuesIfAbsentBlockWhenNoPenultimate stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testPenultimateReturnsPenultimateIfExists stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testPenultimateSignalsErrorWhenCollectionIsNotBigEnough stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #Float32ArrayTest #testIsType stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #Float32ArrayTest #testZeroArrayDividend stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #Float32ArrayTest #testZeroArrayDivisor stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float32ArrayTest #testZeroDividend stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float32ArrayTest #testZeroDivisor stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float64ArrayTest #testIsCollection stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float64ArrayTest #testSum stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float64ArrayTest #testZeroArrayDividend stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float64ArrayTest #testZeroArrayDivisor stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float64ArrayTest #testZeroDividend stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float64ArrayTest #testZeroDivisor stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testBlockClosuresCanBeUsedAsHandlingCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithExceptionTypeAndExceptionType stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithExceptionTypeAndFilterCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithExceptionTypeAndOrCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithFilterConditionAndExceptionType stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithFilterConditionAndFilterCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithFilterConditionAndOrCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithOrConditionAndExceptionType stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithOrConditionAndFilterCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithOrConditionAndOrCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithExceptionTypeAndExceptionType stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithExceptionTypeAndFilterCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithExceptionTypeAndOrCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithFilterConditionAndExceptionType stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithFilterConditionAndFilterCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithFilterConditionAndOrCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithOrConditionAndExceptionType stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithOrConditionAndFilterCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithOrConditionAndOrCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testExceptionsFollowTheExpectedHierarchy stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testFilterConditionWorksAsExcpetedWhenHandlingException stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testOrConditionWorksAsExcpetedWhenHandlingException stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testDoubleOuterPass stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testDoublePassOuter stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testDoubleResume stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testHandlerFromAction stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testNoTimeout stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testNonResumableFallOffTheEndHandler stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testNonResumableOuter stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testNonResumablePass stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testResignalAs stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testResignalAsUnwinds stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testResumableFallOffTheEndHandler stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testResumableOuter stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testResumablePass stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSignalFromHandlerActionTest stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleEnsure stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleEnsureTestWithError stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleEnsureTestWithNotification stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleEnsureTestWithUparrow stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleIsNested stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleOuter stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimplePass stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleResignalAs stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleResume stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleRetry stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleRetryUsing stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleReturn stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testTimeoutWithZeroDuration stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ProcessTerminateBug #testSchedulerTermination stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ProcessTerminateBug #testTerminationDuringUnwind stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ProcessTerminateBug #testUnwindFromActiveProcess stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ProcessTerminateBug #testUnwindFromForeignProcess stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ArrayLiteralTest #testIsArray stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ArrayLiteralTest #testReservedIdentifiers stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ArrayLiteralTest #testSymbols stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test01isAtSuperclassWhenIndexIsInSuperclass stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test02isNotAtSuperclassWhenIndexIsOutsideSuperclass stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test03isAtClassNameWhenIndexIsInClassName stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test04isNotAtClassNameWhenIndexIsOutsideClassName stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test05isAtInstanceVariablesWhenIndexIsInInstanceVariablesString stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test06isNotAtInstanceVariablesWhenIndexIsOutsideInstanceVariablesString stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test07CanAccessSuperclass stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test08isAtCategoryWhenIndexIsInCategoryString stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test09isNotAtCategoryWhenIndexIsOutsideCategoryString stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test10InstanceVariablesIsTheSecondParameter stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test11CategoryIsTheFifthParameter stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testBlockDoitDecompilation stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testBlockNumbering stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testBlockNumberingForInjectInto stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testDebuggerTempAccess stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testInjectIntoDecompilationsEncoderForV3PlusClosures stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testInjectIntoDecompiledDebugs stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testInlineBlockCollectionEM1 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testInlineBlockCollectionLR1 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testInlineBlockCollectionLR2 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testInlineBlockCollectionLR3 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testInlineBlockCollectionSD1 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testSourceRangeAccessForClosureBytecodeInjectInto stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testSourceRangeAccessForInjectInto stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testTempNameAccessForInjectInto stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample01 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample02 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample03 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample04 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample05 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample06 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample07 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample08 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample09 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample10 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample11 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testBlockArgument stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testBlockTemp stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testCopyNonLocalReturn stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testIsTrivialClosure stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testMethodArgument stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testMethodTemp stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testToDoArgument stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testToDoArgumentNotInlined stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testToDoInsideTemp stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testToDoInsideTempNotInlined stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testToDoOutsideTemp stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testToDoOutsideTempNotInlined stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testWhileModificationAfter stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testWhileModificationAfterNotInlined stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ClosureTests #testWhileModificationBefore stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ClosureTests #testWhileModificationBeforeNotInlined stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ClosureTests #testWhileWithTemp stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ClosureTests #testWhileWithTempNotInlined stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ContextCompilationTest #testVariablesAndOffsetsDo stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorAt stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorClass stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorEqEq stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorInstVarAt stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorPerform stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorSize stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ParseNodeEnumeratorTest #testItEnumeratesAllTheParseNodesPresentInAMethodNode stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ParserTest #testItGeneratesATempDeclarationNodeForEachTempInABlock stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ParserTest #testItGeneratesATempDeclarationNodeForEachTempInAMethod stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ParserTest #testItGeneratesAnEmptyTempsDeclarationNodeForAMethodWithoutTemps stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ParserTest #testRangesAreOkWhenReturningAVariableWithoutSpaceAfterThat stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #PrettyPrintingTest #test1 stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #PrettyPrintingTest #test2 stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #PrettyPrintingTest #test3 stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #PrettyPrintingTest #test4 stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #PrettyPrintingTest #test5 stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #PrettyPrintingTest #test6 stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ScannerTest #testLiteralSymbols stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test01TryingToTrimAnAlreadyTrimmedIntervalThatRepresentsASmalltalkExpressionDoesNotChangeTheOriginalInterval stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test02StartingAndEndingSeparatorsAreTrimmed stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test03StartingAndEndingDotsAreTrimmed stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test04GroupsOfParenthesesAreTrimmed stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test05GroupsOfParenthesesIncludingSeparatorsAreTrimmed stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test06AnIntervalThatDoesNotHaveCharactersToExpandRemainsTheSame stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test07AnIntervalEnclosedByParenthesesCanBeExpanded stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test08AnIntervalWithParenthesesOnJustOneSideCannotBeExpanded stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test09AnIntervalEnclosedByBackticksCanBeExpanded stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test10AnIntervalEnclosedMultipleBackticksAndParenthesesCanBeExpanded stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test11AsSourceCodeIntervalMessageDoesNotCreateANewSourceCodeIntervalInstance stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileIOAccessorTest #testDirectoryExists stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testAbsolutePath stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testAtPut stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testConcatenation stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testCopy stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testDefaultDirectory stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testFileContents stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testIsAbsolutePathName stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testIsRelativePathName stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testPathComponents stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testPipe stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testRecursiveDelete stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testRefresh stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testRename stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testRoot stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testStream stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testAddressRange stamp: 'HAW 10/2/2020 16:13:40'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testChangesFileAddressRange stamp: 'HAW 10/2/2020 16:13:40'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testFileIndexFromSourcePointer stamp: 'HAW 10/2/2020 16:13:40'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testFilePositionFromSourcePointer stamp: 'HAW 10/2/2020 16:13:40'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testSourcePointerFromFileIndexAndPosition stamp: 'HAW 10/2/2020 16:13:40'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testSourcesFileAddressRange stamp: 'HAW 10/2/2020 16:13:40'!
PASSED!

!testRun: #SystemConsistencyTest #testMethodsWithUnboundGlobals stamp: 'HAW 10/2/2020 16:13:40'!
PASSED!

!testRun: #TrieTest #testAllMesssagesLikeDicionary stamp: 'HAW 10/2/2020 16:13:45'!
PASSED!

!testRun: #TrieTest #testAllMesssagesLikeSet stamp: 'HAW 10/2/2020 16:13:48'!
PASSED!

!testRun: #TrieTest #testIncludesReturnsFalseForObjectsThatAreNotString stamp: 'HAW 10/2/2020 16:13:48'!
PASSED!

!testRun: #TrieTest #testIncludesReturnsFalseForStringsNotIncluded stamp: 'HAW 10/2/2020 16:13:48'!
PASSED!

!testRun: #TrieTest #testIncludesReturnsTrueForIncludedStrings stamp: 'HAW 10/2/2020 16:13:48'!
PASSED!

!testRun: #TrieTest #testKeyNotFoundSignalTheRightMessage stamp: 'HAW 10/2/2020 16:13:48'!
PASSED!

!testRun: #TrieTest #testPrefixIteration stamp: 'HAW 10/2/2020 16:13:48'!
PASSED!

!testRun: #TrieTest #testPrefixIteration2 stamp: 'HAW 10/2/2020 16:13:49'!
PASSED!

!testRun: #TrieTest #testRemoveLikeDicionary stamp: 'HAW 10/2/2020 16:13:53'!
PASSED!

!testRun: #TrieTest #testRemoveLikeSet stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #TrieTest #testSetProtocol stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #ReferenceStreamTest #testDiskProxy stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #ReferenceStreamTest #testSortedCollection stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #ReferenceStreamTest #testWeakDumps stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #SmartRefStreamTest #testDiskProxy stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #SmartRefStreamTest #testSortedCollection stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #SmartRefStreamTest #testWeakDumps stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbAdd stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbMax stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbMin stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbMinInvert stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbMul stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbSub stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #BitBltTest #testAlphaCompositing stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #BitBltTest #testAlphaCompositing2 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bpp stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bpp61 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bpp62 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bpp63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bppLE stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bppLE61 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bppLE62 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bppLE63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test32bpp stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test32bpp63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test32bppLE63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bpp stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bpp61 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bpp62 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bpp63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bppLE stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bppLE61 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bppLE62 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bppLE63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA32bpp stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA32bpp63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testGray stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testGray61 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testGray62 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testGray63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testGrayBA stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testGrayBA61 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testGrayBA62 stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #JpegTest #testGrayBA63 stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #AffineTransformationTest #testComposition stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #AffineTransformationTest #testDisplayBounds stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #AffineTransformationTest #testFloatInverseTransform stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #AffineTransformationTest #testFloatTransform stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #AffineTransformationTest #testInverseTransformation stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #LayoutMorphTest #testLayout1 stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #LayoutMorphTest #testLayout2 stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #LayoutMorphTest #testLayout3 stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #MorphicLocationTest #testComposition stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #MorphicTranslationTest #testComposition stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #MorphicTranslationTest #testDisplayBounds stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #MorphicTranslationTest #testInverseTransform stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #MorphicTranslationTest #testInverseTransformation stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #MorphicTranslationTest #testTransform stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #WorldTest #testDoOneCycleWorksWithDeferredQueue stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TaskbarTest #testClassSingleton stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TaskbarTest #testHorizontalAlignment stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TaskbarTest #testWidth stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertChangesByPassesWhenActionChangesConditionByTheSpecifiedAmount stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertChangesFromToPassesWhenActionChangesConditionFromAndToTheSpecifiedValues stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertChangesPassesWhenConditionIsAlteredByAction stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertDoeNotChangePassesWhenConditionIsNotAlteredByAction stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIncludesFailsWhenElementIsNotIncludedInCollection stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIncludesShouldNotFailWhenElementIsInCollection stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIsCloseToPassesForSameNumberDifferentToZero stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIsCloseToPassesWhenBothAreZero stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIsCloseToPassesWithSameCalculatedNumber stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIsCloseToWithPrecisionPassesWhenDifferenceIsNegativeAndLessThanPrecision stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIsCloseToWithPrecisionPassesWhenDifferenceIsPositiveAndLessThanPrecision stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIsNotCloseWithPrecisionPassesWhenDifferenceIsBiggerThanPrecision stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testIsTestCase stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldFailErrorsWhenNoErrorIsSignaled stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldFailPassesWhenAnErrorIsSignaled stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldNotTakeMoreThanFailsWhenClosureTakesMoreThanTheLimit stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldNotTakeMoreThanPassesWhenClosureTakesLessThanTheLimit stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithExceptionDoCanExpectException stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithExceptionDoFailsWhenNoExceptionIsSignaled stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithExceptionDoFailsWhenOtherExceptionTypeIsSignaled stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithExceptionDoPassSignaledExceptionToAssertionsBlock stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithExceptionDoValuesAssertionsBlockWhenExceptionIsRaised stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithMessageTextDoesNotFailWithRightMessageText stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithMessageTextFailsWithDifferentMessageText stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestCaseTest #testShoulndFailErrorsWhenAnErrorIsSignaled stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestCaseTest #testShoulndFailPassesWhenNoErrorIsSignaled stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestSuiteTest #test01SuiteForTestCaseClassHasTheSameTestAsCreatingTheSuiteFromTheTestCaseClass stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestSuiteTest #test02SuiteForNoTestCaseClassUsesTestClassWithSameNameEndingWithTest stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestSuiteTest #test03SuiteForNoTestCaseClassAndNoTestClassLooksForReferencesInTests stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestSuiteTest #test04SuiteForTestMethodIncludesOnlyTheMethod stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestSuiteTest #test05SuiteForNoTestMethodIncludesTestCaseSendingTheCompiledMethodSelector stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestSuiteTest #test06ForSystemCategoryWithTestCasesIncludesOnlyTestCasesClasses stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestSuiteTest #test07ForSystemCategoryWithNoTestCasesIncludesTestClassesTests stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestSuiteTest #test08ForMessageCategoryContainingTestCasesIncludesThoseTestCases stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestSuiteTest #test09ForMessageCategoryWihoutTestIsEmpty stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestSuiteTest #test10CanNotDebugAsFailureQuickMethods stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #DifferenceFinderTest #testCharacters stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #DifferenceFinderTest #testCharacters2 stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #DifferenceFinderTest #testCode stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #DifferenceFinderTest #testLines stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #DifferenceFinderTest #testWords stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #UnicodeTest #test1ReadBinary stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #UnicodeTest #test2ReadWithOutBinary stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #UnicodeTest #test3ReadUtf8 stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #UnicodeTest #test4BackConversion stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #UnicodeTest #test5ReadWriteUtf8 stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinNonLocalReturnFixReal stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinNonLocalReturnFixSimply stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinTimingBasic stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinTimingNestedInner stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinTimingNestedOuter stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinTimingRepeat stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testIsStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNewLineTabWhenConditionIsFalseDoesNotPutANewLineTabInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNewLineTabWhenConditionIsTruePutsANewLineTabInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNewLineWhenConditionIsFalseDoesNotPutANewLineInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNewLineWhenConditionIsTruePutsANewLineInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNextPutAllWhenConditionIsFalseDoesNotPutCollectionInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNextPutAllWhenConditionIsTruePutsCollectionInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNextPutWhenConditionIsFalseDoesNotPutObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNextPutWhenConditionIsTruePutsObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testPrintWhenConditionIsFalseDoesNotPrintObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testPrintWhenConditionIsTruePrintsObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testSpaceManyTimesWhenConditionIsFalseDoesNotPutASpaceInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testSpaceManyTimesWhenConditionIsTruePutSpacesInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testSpaceWhenConditionIsFalseDoesNotPutASpaceInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testSpaceWhenConditionIsTruePutsASpaceInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testTabManyTimesWhenConditionIsFalseDoesNotPutATabInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testTabManyTimesWhenConditionIsTruePutsTabsInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testTabWhenConditionIsFalseDoesNotPutATabInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testTabWhenConditionIsTruePutsATabInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testNewLineWhenConditionIsFalseDoesNotPutANewLineInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testNewLineWhenConditionIsTruePutsANewLineInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testNextPutAllWhenConditionIsFalseDoesNotPutCollectionInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testNextPutAllWhenConditionIsTruePutsCollectionInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testNextPutWhenConditionIsFalseDoesNotPutObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testNextPutWhenConditionIsTruePutsObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testPrintWhenConditionIsFalseDoesNotPrintObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testPrintWhenConditionIsTruePrintsObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testSpaceWhenConditionIsFalseDoesNotPutASpaceInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testSpaceWhenConditionIsTruePutsASpaceInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testTabWhenConditionIsFalseDoesNotPutATabInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testTabWhenConditionIsTruePutsATabInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #ColorTest #testIsColor stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #RectangleTest #testIsRectangle stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #ColorFormTest #testIsColorForm stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #GrayFormTest #testIsGrayForm stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #ObjectTest #testErrorSignalsTheRightException stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #ObjectTest #testShouldNotHappenBecauseSignalsTheRightError stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #ObjectTest #testShouldNotHappenSignalsTheRightError stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WeakMessageSendTest #testIsMessageSend stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #test01DefaultStringVersionIsClassAndSelector stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #test02CanPrefixStringVersion stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #testActualClassIfAbsentEvaluatesBlockIfClassDoesNotExist stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #testActualClassIfAbsentReturnsClassIfClassExists stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #testActualClassReturnNilWhenClassDoesNotExist stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #testActualClassReturnsClassIfExists stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #testCompiledMethodIfAbsentEvaluatesAbsentBlockWhenActualClassIsNil stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #testCompiledMethodIfAbsentEvaluatesAbsentBlockWhenSelectorIsNotImplemented stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #testCompiledMethodIfAbsentReturnsImplementedMethodWhenItExists stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testReferencesParameterAtReturnsFalseWhenInvalid stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testReferencesParameterAtReturnsTrueWhenTheParameterIsReferenced stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeIfAbsentEvaluatesBlockIfClassDoesNotExist stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeIfAbsentEvaluatesBlockIfMethodDoesNotExist stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeIfAbsentReturnsSourceCodeIfExists stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeReturnsSourceCodeIfMethodExist stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeSignalExceptionIfClassDoesNotExist stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeSignalExceptionIfMethodDoesNotExist stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #SymbolTest #testIsNotValidBinarySelectorIfItContainsACharacterNotAllowed stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #SymbolTest #testIsNotValidKeywordSelectorIfItContainsSeparators stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #SymbolTest #testIsNotValidUnarySelectorIfItContainsCharactersUsedInBinarySelectors stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #SymbolTest #testIsNotValidUnarySelectorIfItStartsWithALetterAndContainsSeparators stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #SymbolTest #testIsValidBinarySelectorIfItContainsAnAllowedCharacterOrSequenceOfCharacters stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #SymbolTest #testIsValidKeywordSelectorIfItContainsKeywordsWithColons stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #SymbolTest #testIsValidUnarySelectorIfItStartsWithALetterAndDoesNotContainSeparators stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test01WhenIsImplementedOnlyInRootReturnsThatImplementorOnly stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test02ReturnsImplementorsOfSuperclasses stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test03IfNotImplementedInRootOrSuperclassesDoesNotIncludeSubclassesImplementations stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test04IncludesSubclassesImplementations stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test05DoesNotIncludeImplementorsOfSubclassesNotDefinedInSuperclass stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test06DoesNotIncludeImplementorsOfSiblingsWhenNotDefinedInSuperclass stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test07ReturnsAllSubclassesImplementorsOfTheHighestImplementorClass stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test08highestClassImplementingSelectorReturnsHighgestClass stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test09WhenNoHighestClassImplementingSelectorIfNoneBlockIsEvaluated stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test01SurelyRecognizeTypeSenderWhenSentToInstanceVariable stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test02SurelyRecognizeTypeSenderWhenSentToTemporaryVariable stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test03SurelyRecognizeTypeSenderInACollaboration stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test04RecognizeTypeSendersToInstancesOfSubClasses stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test05RecognizeTypeSendersToLiteralTrue stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test06RecognizeTypeSendersToLiteralFalse stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test07RecognizeTypeSendersToThisContext stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test08RecognizeTypeSendersToSelf stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test09RecognizeTypeSendersToSuper stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test09_01 stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test10RecognizeTypeSendersToSelfOfMessageImplementedInSuperclass stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test11RecognizeTypeSendersToReturnsOfMessageSend stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test12RecognizeTypeSendersOfChainedMessageSends stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test13RecognizeTypeSendersToReturnOfMessageSendNoMatterThePrecedence stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test14RecognizeTypeSendersToClasses stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test15RecognizeTypeSendersToVariablesReferencingClasses stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test16RecognizeTypeSendersToAnyLiteral stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test17CanRecognizePossibleTypeSenders stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test18RecognizeTypeSendersWhenReturnTypeIsSelfType stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test19RecognizeTypeSendersWhenReturnTypeIsClassType stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test20SurelySendWhenReceiverTypeIsSuperclassOfImplementorType stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test21ActualSendersWorksWithCascadeMessageSends stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test22ActualSendersDoesNotHangWhenReceiverIsTempVarInMethodWithoutTypes stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test01topBlockTempsMapReturnsTheTempsMapOfTheMethod stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test02MethodWithNoParametersNoTemporariesAreInitializedCorrectly stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test03MethodWithOnlyOneArgumentAreInitializedCorrectly stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test04rawTypesOfInvalidVariableNameEvaluatesIfAbsentBlock stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test05MethodWithOnlyOneTempTwoArgumentsAreInitializedCorrectly stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test06MethodWithRemoveVectorVariablesAreInitializedCorrectly stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test07RemoteVectorRawTypesIsNilWhenMethodHasNoVariableInRemoteVector stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test08VariableRawTypesIsNilWhenMethodHasNoVariableButHasInRemoteVector stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test09CanGetRawTypesWhenMethodHasNoVariableButHasInRemoteVector stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #ClosureVariablesTest #testOneArrayForTypesIsCreatedWhenAMethodHasNoClosures stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test01TypeConvertionForAClassReturnsSameClass stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test02TypeConvertionForSelfTypeReturnsReceiversType stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test03TypeConvertionForClassTypeReturnsReceiversTypeClass stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test04ClassMessageSendChainsClassType stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test05TypeConvertionForInstanceTypeReturnsMetaclassSoleInstance stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test06newTypeIsMetaclassSoleInstance stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test07InstanceTypeReturnsClassWhenIsKindOfOfBehaviorButNotMeta stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test08InstanceTypeErrorsWhenUsedWithNoBehavior stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test09ClassTypeForMetamodelIsMetaclass stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test01TypeCollectionOfInstanceVariableDefinedInLeafClassDoesNotTraverseHierarchy stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test02TypeCollectionIncludesSubclasses stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test03TypeCollectionDoesNotIncludeSuperclassesAndSiblings stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test05TypeCollectionIncludesAllSubclasses stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test06IsNotMegamorphicIfTypesSizeIsLessToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test07IsMegamorphicIfTypesSizeIsEqualToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test08IsNotMegamorphicIfDoesNotFillRawTypesForLocalTypeInfo stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test09IsMegamorphicIfFillsRawTypesOfDefiningClassForLocalTypeInfo stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test10IsMegamorphicIfFillsRawTypesOfNotDefiningClassForLocalTypeInfo stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test11IsTypesEmptyOfNonLocalTypeInfoTakesCareOfHierarchy stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test12IsTypesEmptyForLocalTypeInfoOnlyCheckOnLocalRawTypes stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 10/2/2020 16:14:04'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 10/2/2020 16:14:04'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #InstanceVariableTypeInfoTest #test13RemovingAClassRemovesItAndItsClassFromInstanceVariableRawTypes stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test14InstVarAtPutKeepTypeInfo stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test01InstanceVariablesTypesIsInitializedWithAnArrayOfClassInstSize stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test02InitializeInstanceVariablesTypesWithAllInstancesStoreCurrentClassInstancesTypes stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test03TypesOfDifferentInstVarsAreStoredCorrectly stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test04MoreThanOneTypeAreStoredCorrectlyInDifferentInstVars stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test05TypesAreStoredUpToInstVarTypesSize stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test06NoTypesAreStoredWhenInstVarTypesIsNil stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test07CommonSupertypeOfReturnsSupertypeOfStoredTypes stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test08CommonSupertypeIfNoTypesEvaluatesAlternativeBlockWhenNoTypeHasBeenStore stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test09EvaluatesIfAbsentBlockWhenAskTypeInfoForNonExistingInstVar stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test01KeepTypesOfLocalTemporariesI stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test02KeepTypesOfRemoteTemporaries stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test03KeepTypesOfParameters stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test04KeepReturnTopTypes stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test05KeepReturnConstantTypes stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test06KeepReturnReceiverTypes stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test07KeepReturnFromClosureTypes stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test08KeepReturnTypeWhenUnwind stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test09BlockReturnDoesNotAffectMethodReturn stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test10KeepTypesOfParametersWhenSendingValueWithArguments stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test11BlockWithParametersDoNotAffectMethodParameters stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test01CanSignalItWithAMethod stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test02IsResumable stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 10/2/2020 16:14:05'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 10/2/2020 16:14:05'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test01RemovingAClassRemovesItFromMethodVariableRawTypesForParameter stamp: 'HAW 10/2/2020 16:14:06'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 10/2/2020 16:14:06'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 10/2/2020 16:14:06'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test02RemovingAClassRemovesItsClassFromMethodVariableRawTypesForParameter stamp: 'HAW 10/2/2020 16:14:06'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 10/2/2020 16:14:06'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 10/2/2020 16:14:07'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test03RemovingAClassRemovesItFromMethodVariablesRawTypes stamp: 'HAW 10/2/2020 16:14:07'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 10/2/2020 16:14:07'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 10/2/2020 16:14:07'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test04RemovingAClassRemovesItFromMethodVariableRemoteVectorRawTypes stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test01ActualSendersIsEmpty stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test02CategoryIsNil stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test03CompiledMethodSignalsError stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test04CompiledMethodIfAbsentEvaluatesIfAbsentBlock stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test05doesOnlySurelySendReturnsFalse stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test06dynamicTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test07IsNotValid stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test08liveTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test09rangesOASentSelectorWhenSendToReceiverTypesIsEmpty stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test10FailsWhenAsItsSourceCode stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test11StringVersionStartsWithNotImplemented stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #PossibleSenderTest #test01StringVersionBeginsWithPossible stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test01QuickReturnSelfMethodsReturnSelfTypeAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test02QuickReturnTrueMethodsReturnTrueReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test03QuickReturnFalseMethodsReturnFalseAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test04QuickReturnNilMethodsReturnUndefinedObjectAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test05QuickReturnMinusOneMethodsReturnSmallIntegerAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test06QuickReturnZeroMethodsReturnSmallIntegerAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test07QuickReturnOneMethodsReturnSmallIntegerAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test08QuickReturnTwoMethodsReturnSmallIntegerAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test09QuickReturnOfFirstInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test10QuickReturnOfSecondInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test11classMethodReturnsClassTypeAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test12newMethodReturnsInstanceTypeAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test13yourselfMethodReturnsSelfTypeAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 10/2/2020 16:14:08'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 10/2/2020 16:14:09'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #ReturnTypeInfoTest #test14RemovingAClassRemovesItAndItsClassFromMethodReturnType stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #ReturnTypeInfoTest #test15ReturnTypesOfAbstractMethodsIncludesSubclassesImplementationsTypes stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #ReturnTypeInfoTest #test16ReturnTypesOfAbstractMethodWorksWhenNotImplementedInAllSubclasses stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test01IsEmptyWhenAllTypesAreNil stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test02StoresAddedTypes stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test03StoresSameTypeOnce stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test04StoresMoreThanOneTypeCorrectly stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test05DoesNotStoreTypesWhenContainerIsNil stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test06CommonSupertypeOfSiblingsClassesReturnsRightSuperclass stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test07CommonSupertypeOnSameHierarchyIsMostTopClass stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test08CommonSupertypeOnSameHierarchyIsNotAffectedByAddingOrder stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test09ObjectIsCommonSupertypeWhenClassesAreNotSiblings stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test10ProtoObjectIsCommonSupertypeWhenThereAreNoTypesStored stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test11ProtoObjectIsCommonSupertypeWhenCointainerIsNil stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test12CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenIsEmpty stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test13CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenContainerIsNil stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test14UndefinedObjectIsNotConsideredWhenLookingForCommonSupertype stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test15StoresTypesIsTrueWhenContainerIsNotNil stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test16StoresTypesIsFalseWhenContainerIsNil stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test17IsMegamorphicWhenContainerIsFull stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test18IsNotMegamorphicWhenContainerIsNotFull stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test19CommonSelectorsPreviousToSameOnlyTypeIsEmpty stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test20CommonSelectorsPreviousToSuperclassOfOnlyAddedTypeAreAddedTypeSelectors stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test21CommonSelectorsPreviousToSuperclassSuperclassOfOnlyAddedTypeAreAddedTypeUpToSuperclassSelectors stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test22CommonSelectorsPreviousToInvalidSuperclassRaisesError stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test23CommonSelectorsPreviousToSuperclassOfSiblingTypesAreSiblingsCommonSelectors stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test24CommonSelectorsPreviousToOnSameHierarchyReturnsCommonSuperclassesSelectors stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test25CommonSelectorsPreviousToAddedSSupertypeOnSameHierarchyIsEmpty stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test26CommonSelectorsPreviousToWhenNotStoringTypesIsEmpty stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test27CommonSelectorsPreviousToIfInvalidSupertypeEvaluatesInvalidBlock stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test28CommonSelectorsPreviousToIfInvalidSupertypeWithManyTypesEvaluatesInvalidBlock stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test29CommonSelectosGoesUpToIncludingProtoObject stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test30CommonSupertypeIfGenericEvaluatesIfGenericBlockForObject stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test31CommonSupertypeIfGenericEvaluatesIfGenericBlockForProtoObject stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test32WithCommonSupertypeDoIfGenericEvaluatesDoBlockWhenNoGenericSupertype stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test33WithCommonSupertypeDoIfGenericEvaluatesGenericBlockWhenGenericSupertype stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test34AddingATypeWhenNoMoreSpaceEvaluatesIsFullBlock stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test35TypeIsNotMoreInTypesWhenRemoved stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test36RemovingTypeWhenTypesIsEmptyEvaluatesIfAbsent stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test37RemovingNotIncludedTypeEvaluatesIfAbsent stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test38RemovingLastAddedTypeWorksAsExpected stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test39RemoveTypeSignalExceptionWhenTypeNotFound stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test40TypesDoEvaluatesBlockOnEachType stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test01ManyMethodsCanBeTypeChecked stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test02ClassesCanBeTypeChecked stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test03MethodsWithoutTypeAnnotationsLogsAProblem stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test04ProblemsDetectIfNone stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test05ProblemsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test06WarningsCollectsAllTypeCheckersWarnings stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test07ErrorsDetectIfNone stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test09ProblemsCollectsTypeCheckersProblems stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test10WarningsDetectIfNone stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test12HasErrorsReturnsTrueIfATypeCheckerHasErrors stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test13HasErrorsReturnsFalseWhenNoErrorFound stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test14ErrorsCollectsAllTypeCheckersErrors stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test15HasErrorsOrWarnings stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test01MethodNotAnnotatingTypesGeneratesWarning stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test02EmptyMethodDoesNotGenerateWarningsOrErrors stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test03MessageSendNotUnderstoodByReceiverGeneratesError stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test04MessageUnderstooodByReceiverDoesNotGenerateErrors stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test05ErrorsWhenNoTypeImplementMessageSent stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test06DifferentErrorsAreReported stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test07ReceiverWithoutTypesGeneratesWarning stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test08GivesAWarningWhenReceiversTypeHasAnError stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test09WhenMethodHasNoReturnTypesAProblemIsAdded stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test10PrimitiveMethodsAreNotTypedChecked stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test11IfNotNilFiltersUndefinedObjectType stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test12IfNotNilDoesNotFiltersUndefinedObjectTypeForNotCheckedObject stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test13ComparingForNilWithIfTrueIfFalse stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test14ComparingForNilWithIfTrueIfFalseWhenNilFiltersOtherTypes stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test15ComparingForNilWithIfTrueIfFalseWhenNilKeepsUndefinedObject stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test16NestedIfNotNilFiltersUndefinedObjectType stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test17NestedIfNotNilDoesNotFilterUndefinedObjectWhenOutsideRightIfNotNil stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test18IfNilAssumesUndefinedObjectAsType stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test19NestedIfNilAssumesUndefinedObjectAsType stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test20NestedIfNilDoesUseUndefinedObjectWhenOutsideRightIfNil stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test21IfNilIfNotNilWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test22IfNotNilIfNilWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test23EqualsNilIfTrueIfFalseWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test24EqualsNilIfTrueWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test25IdenticalToNilIfTrueWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test26EqualsNilIfFalseWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test27IdenticalToNilIfFalseWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test28EqualsToNilIfFalseIfTrueWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test29IdenticalToNilIfFalseIfTrueWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test30nilEqualsToIfTrueIfFalseOrIfFalseIfTrueWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test31nilEqualsToIfTrueOrIfFalseWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test32nilIdenticalToWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test32_01_nilNotIdenticalOrEqualToWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test33NotEqualToNilWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test34NotIdenticalToNilWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test35isNilWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test36notNilWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test37TypeCastWithEqualOrIdenticalToWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test38TypeCastWithNotEqualOrNotIdenticalToWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test39TypeCastToUsingEqualOrIdenticalToWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test40TypeCastToUsingNotEqualOrNotIdenticalToWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test41TypeCastUsingIsKindOfToWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test42TypeCheckMessageWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test43TypeCheckMessageSentToSelfWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test44TypeCheckMessageWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test46TypeCastRejectsCanBeNested stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test47IsKindOfCastingAllowsSubtypes stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test48IfNotNilWithBlockArgumentFiltersUndefinedObject stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test49TypeCastWithBlockInRejectBlockKeepsCastingStrategy stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test50TypeCastWithoutBlockShouldFail stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test51NotNilAndFiltersUndefinedObject stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test52CascasdeMessageSendAreTypeChecked stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test53TypeCastWorksOnCascadeMessageSends stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test54IfNilWithReturnRejectsNilInNextColaborations stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test55TypeCheckMessageWithSubclassesReturningFalse stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test56Float_store_on_hasNoTypeErrors stamp: 'HAW 10/2/2020 16:14:11'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test57TypeCheckMessageWithFalse_True_False_InSubclassesCastCorrectly stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test58TypeCheckMessageWithReturnOnIfTrueRejectsTypeInNextColaborations stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test59TypeCheckMessageWithReturnOnIfFalseRejectsTypeInNextColaborations stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test60TypeCastWithReturnOnIfTrueRejectsTypeInNextColaborations stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test61TypeCastWithReturnOnIfFalseRejectsTypeInNextColaborations stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test62ifNotNilifNotNilWithMoreThanAMessageSendAndNilAsValue stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test63orCheck stamp: 'HAW 10/2/2020 16:14:11'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test64notNilAndIfTrue stamp: 'HAW 10/2/2020 16:14:11'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test65isNilOr stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test66DoesNotFailsWithMessageSendAsConditionOfIfTrueWithCascadeSend stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #MethodTypeCheckerTest #test66orWithoutMessageAsReceiverShouldNotError stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #MethodTypeCheckerTest #test67andWithoutMessageAsReceiverShouldNotError stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #MethodTypeCheckerTest #test68DoesNotFailsWithIfTrueSendInCascadeMode stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #DenotativeObjectRenameMethodApplierTest #test01ScopeOptionsAreTheSame stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #DenotativeObjectTest #test01IsDenotativeObjectNamedReturnsTrueForADenotativeObject stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #DenotativeObjectTest #test02IsDenotativeObjectNamedReturnsFalseForANoDenotativeObject stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ZeroDivideExtentionsTest #testMessageTextWithFraction stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ZeroDivideExtentionsTest #testMessageTextWithNumbers stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #TestChangesTest #testDataClassName stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ClassOrganizerTest #testClassifiesWithoutLeadingBlanks stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ClassOrganizerTest #testClassifiesWithoutTrailingBlanks stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ClassOrganizerTest #testRemovesLeadingBlanksWhenAddingCategory stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ClassOrganizerTest #testRemovesTrailingBlanksWhenAddingCategory stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ClassOrganizerTest #testRenamesWithoutLeadingBlanks stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ClassOrganizerTest #testRenamesWithoutTrailingBlanks stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #test32bitConversion stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #test32bitConversion2 stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #test32bitGradualUnderflow stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #test32bitInfinities stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #test32bitNaN stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #test32bitRoundingMode stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #test32bitZeros stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #testAdd stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #testArCosh stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #testArSinh stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #testArTanh stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #testArcTan stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #testArcTanNonPrimitive stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #testAsTrueFraction stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testCeiling stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testCharacterization stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testComparisonWhenPrimitiveFails stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testComparisonWithFraction stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testCopy stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testCopySign stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testCos stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testCosh stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testDegreeCos stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testDegreeCosForExceptionalValues stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testDegreeSin stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testDegreeSinForExceptionalValues stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'HAW 10/2/2020 16:14:13'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'HAW 10/2/2020 16:14:13'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'HAW 10/2/2020 16:14:13'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'HAW 10/2/2020 16:14:13'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testE stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testEqualityComparison stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testEquals stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testExactAsString stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testExactAsString2 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testExactStoreString stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testExactStoreString2 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testExp stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testExpNonPrimitive stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFloatRounded stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFloatTruncated stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFloatsAwayFrom stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFloatsAwayFromWithPowersOfTwo stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFloor stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFloorLog2 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFractionAsFloat stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFractionAsFloat2 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatRoundsHalfToEven stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatWithUnderflow stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFromStringDoesNotUnderflow stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithBigNegativeSmallInteger stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithBigSmallInteger stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithFraction stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithLargeNegativeInteger stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithLargePositiveInteger stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger2 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger2 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHugeValues stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testInfinity1 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testInfinity2 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testInfinityTruncated stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testIntegerAsFloat stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testIsDenormalized stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testIsZero stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testLiteralEqualityOfNan stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testLiteralEqualityOfZeroAndNegativeZero stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testLn stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testLnForExceptionalValues stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testLnNonPrimitive stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testMaxExactInteger stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testMinimalAsString stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testMixedTypeArithmetic stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testMixedTypeComparison stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testMultiply stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaN1 stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaN2 stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaN3 stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaN4 stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaNCompare stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaNPropagationBinary stamp: 'HAW 10/2/2020 16:14:14'!
FAILURE!

!testRun: #FloatTest #testNaNPropagationUnary stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaNTruncated stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaNisLiteral stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNextAwayFromZero stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNextTowardsZero stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNoIntegerHash stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPartBits stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPi stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPositiveAndNegativeZero stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPredecessorSuccessor stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPredecessorSuccessor2 stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimAdd stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimArcTan stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimDivideBy stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimEqual stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimExpAndLn stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimExponent stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimGreater stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimGreaterEqual stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimLess stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimLessEqual stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimMultiplyBy stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimNotEqual stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimSin stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimSmallIntegerAsFloat stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimSqrt stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimSubtract stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimTimesTwoPower stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimTruncated stamp: 'HAW 10/2/2020 16:14:14'!
FAILURE!

!testRun: #FloatTest #testPrintShowingDecimalPlaces4 stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrintStringStress stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testReadFromManyDigits stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testReciprocal stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testReciprocal stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testRoundHalfToEven stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testRounded stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSetOfFloat stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSignificandAndExponent stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSignificandAsInteger stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSin stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSinNonPrimitive stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSinh stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSomeNines stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSqrt stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSqrtNonPrimitive stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testStoreBase16 stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testStoreOn stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven2 stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testStringAsNumber stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testStringAsNumber2 stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSubtract stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testTanh stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerGradualUnderflow stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerOverflow stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerUnderflow stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testTruncated stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testUlp stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testZeroAbs stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testZeroSign stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testZeroSignificandAsInteger stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testCeiling stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testDegreeCos2 stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testDegreeSin2 stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testExactRaisedTo stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testExactSqrt stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testFloor stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testFloorLog stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testFloorLogExactness stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testFractionPrinting stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testHash stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testInexactRaisedTo stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testInexactSqrt stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testIntegerWholeDivision stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testIntegerWholeMultiplication stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testIsType stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testLog stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testNthRoot stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testReciprocal stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testRoundHalfToEven stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testRounded stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testThatFractionDenominatorIsPositive stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testThatFractionIsReduced stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testTruncated stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testWholeDifference stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testWholeDivision stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testWholeMultiplication stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testWholeSum stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerDigitLogicTest #testAndSingleBitWithMinusOne stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerDigitLogicTest #testLargeShift stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerDigitLogicTest #testMixedSignDigitLogic stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerDigitLogicTest #testNBitAndNNegatedEqualsN stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerDigitLogicTest #testNNegatedEqualsNComplementedPlusOne stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerDigitLogicTest #testShiftMinusOne1LeftThenRight stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerDigitLogicTest #testShiftOneLeftThenRight stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #test01readFromWithEmptyStringRaisesAnError stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #test02readFromWithInvalidStringRaisesAnError stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBenchFib stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactNthRoot stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactSqrt stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBitAt stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBitLogic stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBitReversal stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBitReversalCorrectClass stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testCrossSumBase stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDifferentBases stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLnLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLnLp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLnSn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLnSp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLpLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLpLp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLpSn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLpSp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivSnLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivSnLp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testDivSnSn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testDivSnSp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testDivSpLn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testDivSpLp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testDivSpSn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testDivSpSp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testEven stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testExactRaisedTo stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testExactSqrt stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testFloorLog stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testFloorLogExactness stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testGCDAndLCM stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testGCDExample stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testGCDProperties stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testHighBit stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testHighBitOfMagnitude stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIntegerDivision stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIntegerPadding stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIntegerReadFrom stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIsInteger stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwo stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwoM6873 stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIsPrime stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIsProbablyPrime stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testLCMExample stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testLCMProperties stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testLargePrimesUpTo stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testLn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testLog stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testLowBit stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLnLn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLnLp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLnSn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLnSp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLpLn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLpLp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLpSn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLpSp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSnLn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSnLp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSnSn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSnSp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSpLn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSpLp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSpSn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSpSp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testMontgomeryMultiplication stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNegativeIntegerPrinting stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNew stamp: 'HAW 10/2/2020 16:14:17'!
ERROR!

!testRun: #IntegerTest #testNew stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNthRoot stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNthRootErrorConditions stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNthRootExactness stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNthRootExactnessForHugeValue stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNthRootImmuneToDoubleRounding stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNthRootTruncated stamp: 'HAW 10/2/2020 16:14:18'!
PASSED!

!testRun: #IntegerTest #testNumberOfDigits stamp: 'HAW 10/2/2020 16:14:18'!
PASSED!

!testRun: #IntegerTest #testPositiveIntegerPrinting stamp: 'HAW 10/2/2020 16:14:18'!
PASSED!

!testRun: #IntegerTest #testPrimesUpTo stamp: 'HAW 10/2/2020 16:14:18'!
PASSED!

!testRun: #IntegerTest #testPrintOnBaseShowRadix stamp: 'HAW 10/2/2020 16:14:18'!
PASSED!

!testRun: #IntegerTest #testPrintStringBase stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLnLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLnLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLnSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLnSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLpLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLpLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLpSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLpSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoRem stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSnLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSnLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSnSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSnSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSpLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSpLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSpSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSpSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRaisedToModulo stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRange stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testReadFrom stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLnLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLnLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLnSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLnSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLpLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLpLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLpSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLpSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSnLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSnLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSnSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSnSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSpLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSpLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSpSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSpSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRomanPrinting stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSqrtFloor stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testStringAsNumber stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testTwoComplementBitLogicWithCarry stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testTwoComplementRightShift stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testCompactClassIndex stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDenormalizedPrintString stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAt stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAtPut stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitLength stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testEmptyTemplate stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testMinimumNegativeIntegerArithmetic stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testReplaceFromToWithStartingAt stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testBitShift stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testCompactClassIndex stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDenormalizedPrintString stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAt stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAtPut stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitLength stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testEmptyTemplate stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testLargeSqrtFloor stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testMultDicAddSub stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testNormalize stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testReplaceFromToWithStartingAt stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test01readFromWhenTheInitilValueIsNaNTheResultIsNaN stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test02readFromWhenTheInitilValueIsInfinityTheResultIsInfinity stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test03readFromWhenTheInitilValueIsMinusInfinityTheResultIsNegativeInfinity stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test04readFromWhenTheInitilValueIsANegativeNumberTheResultIsThatNumberNegated stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test05readFromWhenTheInitilValueIsJustANumberTheResultIsThatNumber stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test06readFromWhenTheInitialValueIncludesRadixItIsConvertedWithTheIndicatedRadixBase stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test07readFromWhenTheInitialValueIncludesAnInvalidRadixItRaisesAnError stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test08readFromWhenTheInitialValueIncludesANegativeRadixItConvertsTheNumberWithTheIndicatedRadixBase stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test09readFromWhenTheInitialValueIsEmptyItRaisesAnError stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testFractionPart stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testHash1 stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testHash2 stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testHash3 stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testIntegerPart stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testOne stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces2 stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces3 stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testRaisedTo stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testRaisedToInteger stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testRaisedToIntegerWithFloats stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testReadFrom stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testReciprocal stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testZeroDivideHandler stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'HAW 10/2/2020 16:14:20'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'HAW 10/2/2020 16:14:20'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNext stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBits stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBitsInvalid stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextInteger stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextIntegerInvalid stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger1 stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger2 stamp: 'HAW 10/2/2020 16:14:22'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSeedAndRepeatability stamp: 'HAW 10/2/2020 16:14:22'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSetAtRandom stamp: 'HAW 10/2/2020 16:14:22'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSimpleBuckets stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNext stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextBits stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextBitsInvalid stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextInteger stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextIntegerInvalid stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerCorrectness stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerInitialValues stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedCornerCases stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedRange stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testRandomLargeInteger1 stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller88RandomTest #testRandomLargeInteger2 stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller88RandomTest #testSeedAndRepeatability stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller88RandomTest #testSetAtRandom stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller88RandomTest #testSimpleBuckets stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNext stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextBits stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextBitsInvalid stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextInteger stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextIntegerInvalid stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller93RandomTest #testRandomLargeInteger1 stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller93RandomTest #testRandomLargeInteger2 stamp: 'HAW 10/2/2020 16:14:25'!
PASSED!

!testRun: #ParkMiller93RandomTest #testSeedAndRepeatability stamp: 'HAW 10/2/2020 16:14:25'!
PASSED!

!testRun: #ParkMiller93RandomTest #testSetAtRandom stamp: 'HAW 10/2/2020 16:14:25'!
PASSED!

!testRun: #ParkMiller93RandomTest #testSimpleBuckets stamp: 'HAW 10/2/2020 16:14:25'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesAAtoAM stamp: 'HAW 10/2/2020 16:14:26'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesANtoAZ stamp: 'HAW 10/2/2020 16:14:27'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesBAtoBM stamp: 'HAW 10/2/2020 16:14:28'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesBNtoBZ stamp: 'HAW 10/2/2020 16:14:29'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesCAtoCM stamp: 'HAW 10/2/2020 16:14:31'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesCNtoCZ stamp: 'HAW 10/2/2020 16:14:34'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesDAtoDM stamp: 'HAW 10/2/2020 16:14:36'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesDNtoDZ stamp: 'HAW 10/2/2020 16:14:36'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesEAtoEM stamp: 'HAW 10/2/2020 16:14:36'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesENtoEZ stamp: 'HAW 10/2/2020 16:14:37'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesFAtoFM stamp: 'HAW 10/2/2020 16:14:39'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesFNtoFZ stamp: 'HAW 10/2/2020 16:14:40'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesGAtoGM stamp: 'HAW 10/2/2020 16:14:40'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesGNtoGZ stamp: 'HAW 10/2/2020 16:14:41'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesHAtoHM stamp: 'HAW 10/2/2020 16:14:41'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesHNtoHZ stamp: 'HAW 10/2/2020 16:14:42'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesIAtoIM stamp: 'HAW 10/2/2020 16:14:42'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesINtoIZ stamp: 'HAW 10/2/2020 16:14:44'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesJAtoJM stamp: 'HAW 10/2/2020 16:14:44'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesJNtoJZ stamp: 'HAW 10/2/2020 16:14:44'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesKAtoKM stamp: 'HAW 10/2/2020 16:14:44'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesKNtoKZ stamp: 'HAW 10/2/2020 16:14:44'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesLAtoLM stamp: 'HAW 10/2/2020 16:14:45'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesLNtoLZ stamp: 'HAW 10/2/2020 16:14:45'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesMAtoMM stamp: 'HAW 10/2/2020 16:14:47'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesMNtoMZ stamp: 'HAW 10/2/2020 16:14:48'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesNAtoNM stamp: 'HAW 10/2/2020 16:14:48'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesNNtoNZ stamp: 'HAW 10/2/2020 16:14:49'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesOAtoOM stamp: 'HAW 10/2/2020 16:14:49'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesONtoOZ stamp: 'HAW 10/2/2020 16:14:49'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesPAtoPM stamp: 'HAW 10/2/2020 16:14:50'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesPNtoPZ stamp: 'HAW 10/2/2020 16:14:51'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesQAtoQM stamp: 'HAW 10/2/2020 16:14:51'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesQNtoQZ stamp: 'HAW 10/2/2020 16:14:51'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesRAtoRM stamp: 'HAW 10/2/2020 16:14:53'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesRNtoRZ stamp: 'HAW 10/2/2020 16:14:53'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesSAtoSM stamp: 'HAW 10/2/2020 16:14:55'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesSNtoSZ stamp: 'HAW 10/2/2020 16:14:57'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesTAtoTM stamp: 'HAW 10/2/2020 16:14:59'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesTNtoTZ stamp: 'HAW 10/2/2020 16:15:00'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesUAtoUM stamp: 'HAW 10/2/2020 16:15:00'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesUNtoUZ stamp: 'HAW 10/2/2020 16:15:00'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesVAtoVM stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesVNtoVZ stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesWAtoWM stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesWNtoWZ stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesXAtoXM stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesXNtoXZ stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesYAtoYM stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesYNtoYZ stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesZAtoZM stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesZNtoZZ stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testRemoteTemp stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test000_AutocompletesMessagesFor_GlobalVariables_WithSelectorsFromTheirClasses stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test001_AutocompletesMessagesFor_Self_WithSelectorsFromTheBrowsedClass stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test002_AutocompletesMessagesFor_Super_WithSelectorsFromTheBrowsedClass stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test003_AutocompletesMessagesFor_Super_WithSelectorsForUnknownClassesWhenTheBrowsedClassDoesNotHaveASuperclass stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test004_AutocompletesMessagesFor_True_WithSelectorsFromTrue stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test005_AutocompletesMessagesFor_False_WithSelectorsFromFalse stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test006_AutocompletesMessagesFor_Nil_WithSelectorsFromUndefinedObject stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test007_AutocompletesMessagesFor_Characters_WithSelectorsFromCharacter stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test008_AutocompletesMessagesFor_Numbers_WithSelectorsFromTheirClass stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test009_AutocompletesMessagesFor_Strings_WithSelectorsFromString stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test010_AutocompletesMessagesFor_Symbols_WithSelectorsFromSymbol stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test011_AutocompletesMessagesFor_StringSymbol_WithSelectorsFromSymbol stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables stamp: 'HAW 10/2/2020 16:15:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables_WithSelectorsOfInstVarTypes stamp: 'HAW 10/2/2020 16:15:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test013_AutocompletesMessagesFor_MethodArguments_WithSelectorsForUnknownClasses stamp: 'HAW 10/2/2020 16:15:04'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsForUnknownClasses stamp: 'HAW 10/2/2020 16:15:04'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsOfTempVarTypes stamp: 'HAW 10/2/2020 16:15:04'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test015_AutocompletesMessagesFor_BlockArguments_WithSelectorsForUnknownClasses stamp: 'HAW 10/2/2020 16:15:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test016_AutocompletesMessagesFor_BlockTemporaryVariables_WithSelectorsForUnknownClasses stamp: 'HAW 10/2/2020 16:15:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NilWorkspaceVariables_WithSelectorsForUnknownClasses stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NonNilWorkspaceVariables_WithSelectorsFromTheirClasses stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test018_AutocompletesMessagesFor_ThisContext_WithSelectorsFromMethodContext stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test019_AutocompletesMessagesFor_ClassVariables_WithSelectorsFromTheirClasses stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test020_AutocompletesMessagesFor_PoolConstants_WithSelectorsFromTheirClasses stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test021_AutocompletesMessagesFor_BlockEndings_WithSelectorsFromBlockClosure stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test022_AutocompletesMessagesFor_ArrayEnds_WithSelectorsFromArray stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletesMessagesFor_RightBraces_WithSelectorsFromArray stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletingMessagesFor_UnaryMessages stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test024_AutocompletingMessagesFor_RightParenthesis stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test025_AutocompletesMessagesFor_UnknownIdentifiers_WithSelectorsForUnknownClasses stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test026_AutocompletingMessagesFor_Cascade stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test027_AutocompletesEntriesFor_GlobalVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test028_AutocompletesEntriesFor_PoolConstants_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test029_AutocompletesEntriesFor_WorkspaceVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test030_AutocompletesEntriesFor_ClassVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test031_AutocompletesEntriesFor_InstanceVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test032_AutocompletesEntriesFor_MethodArguments_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test033_AutocompletesEntriesFor_TemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test034_AutocompletesEntriesFor_BlockArguments_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test035_AutocompletesEntriesFor_BlockTemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test036_AutocompletesEntriesFor_IncompleteIdentifiers_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test037_AutocompletesEntriesFor_ReservedNames_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test038_DoesNotAutocompleteEntriesFor_UndefinedIdentifiers stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test039_AutocompletesEntriesFor_BinaryMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test040_AutocompletesEntriesFor_IncompleteBinaryMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test041_AutocompletesEntriesFor_UnaryMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test042_AutocompletesEntriesFor_IncompleteUnaryMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test043_AutocompletesEntriesFor_KeywordMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test044_AutocompletesEntriesFor_IncompleteKeywordMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #testMessages stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ArrayWithArrayAndOtherObjects stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArray stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayOfArray stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayWithManyElements stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBinaryInParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlock stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfBlock stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfEvaluatedBlock stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndExpresionInParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndLiteralArray stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndMoreThanOneUnaryAfterExpresionInParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBlock stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBrace stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterCharacter stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterLiteralArray stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterStringSymbol stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterSymbol stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUnaryInProtoObject stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterUnary stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteMessageAfterUnary stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryInParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithMoreThanOneUnary stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithOneUnary stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ClosedAndUnclosedParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionInManyParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionWithMoreThanOneParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_LFBeforeParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_SpaceBeforeParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnaryAfterExpresionInParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedArrayAfterClosedArray stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedBlockAfterBlock stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedDoubleParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_selfInProtoObject stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_ExpresionInParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_MoreThanOneUnaryMessage stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_OnlyRightParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:09'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:09'!
griffle [ var1 := 1. goo := 1. ^goo + var1 ]! !

!testRun: #CompilerTest #testAddsMoreThanOneUndeclaredVariableCorrectlyInBlock stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:10'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:10'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:10'!
griffle [|var1| var1 := 1.goo := 1.^ goo + var1]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableCorrectlyInBlockWhenNoSpaceBetweenLastOneAndPipe stamp: 'HAW 10/2/2020 16:15:10'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:11'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:11'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:11'!
griffle [ :var1 | goo := 1.^ goo + var1]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableCorrectlyInBlockWhenTheresAnArgumentAlready stamp: 'HAW 10/2/2020 16:15:11'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:11'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:11'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:11'!
griffle [ :var1 | | | goo := 1.^ goo + var1]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableCorrectlyInBlockWhenTheresArgumentsAndTempDeclarationPipesWithNoTemps stamp: 'HAW 10/2/2020 16:15:11'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:12'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:12'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:12'!
griffle var1 := 1. [ goo := 1. ^goo + var1 ]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableCorrectlyInMethodAndInBlock stamp: 'HAW 10/2/2020 16:15:12'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:13'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:13'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:13'!
griffle |var1| var1 := 1.goo := 1.^ goo + var1! !

!testRun: #CompilerTest #testAddsUndeclaredVariableCorrectlyInMethodWhenNoSpaceBetweenLastOneAndPipe stamp: 'HAW 10/2/2020 16:15:13'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:13'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:13'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:13'!
griffle [|goo| goo := 1. ^goo ]. [goo1:=1.^ goo1]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableInRightBlock stamp: 'HAW 10/2/2020 16:15:13'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:14'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:14'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:14'!
griffle [ :var1 | | foo | foo := 2. goo := 1.^ goo + var1 + foo ]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableWithAnArgumentAndTempAlreadyInBlock stamp: 'HAW 10/2/2020 16:15:14'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:15'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #CompilerTest #testCanNotDefineVarsInsideBackTick stamp: 'HAW 10/2/2020 16:15:15'!
PASSED!

!testRun: #CompilerTest #testCanNotHaveMoreThanOneExpressionInsideBackTick stamp: 'HAW 10/2/2020 16:15:15'!
PASSED!

!testRun: #CompilerTest #testCanNotHaveReturnInsideBackTick stamp: 'HAW 10/2/2020 16:15:15'!
PASSED!

!testRun: #CompilerTest #testCanNotReferenceSelfInsideBackTick stamp: 'HAW 10/2/2020 16:15:16'!
PASSED!

!testRun: #CompilerTest #testCanNotReferenceSuperInsideBackTick stamp: 'HAW 10/2/2020 16:15:16'!
PASSED!

!testRun: #CompilerTest #testCanNotReferenceTempVarsInsideBackTick stamp: 'HAW 10/2/2020 16:15:17'!
PASSED!

!testRun: #CompilerTest #testCanNotReferenceThisContextInsideBackTick stamp: 'HAW 10/2/2020 16:15:17'!
PASSED!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:17'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:17'!
griffle [ | goo | ]. [ | goo | ]! !

!testRun: #CompilerTest #testDoesNotConfusesVariablesWithSameNameOfDifferentBlocksWhenRemoving stamp: 'HAW 10/2/2020 16:15:17'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:18'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:18'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:18'!
griffle | goo |! !

!testRun: #CompilerTest #testDoesNotRemoveUnusedVariableIfSaidSo stamp: 'HAW 10/2/2020 16:15:18'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:19'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:19'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:19'!
griffle | goo a | a := 1. ^a! !

!testRun: #CompilerTest #testKeepsVariableDefinitionWhenThereAreUsedTemporaries stamp: 'HAW 10/2/2020 16:15:19'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:19'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:19'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:19'!
griffle [ | goo | ]! !

!testRun: #CompilerTest #testRemovesUnusedVariablesFromBlocks stamp: 'HAW 10/2/2020 16:15:19'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:20'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:20'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:20'!
griffle | goo |! !

!testRun: #CompilerTest #testRemovesVariableDefinitionWhenNoMoreUnusedTemporaries stamp: 'HAW 10/2/2020 16:15:20'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:21'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:21'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:21'!
griffle [ || goo := 1.^ goo ]! !

!testRun: #CompilerTest #testReusesBlockTempDeclarationWhenEmptyForUndeclaredVariable stamp: 'HAW 10/2/2020 16:15:21'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:21'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:21'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:21'!
griffle || goo := 1.^ goo! !

!testRun: #CompilerTest #testReusesMethodTempDeclarationWhenEmptyForUndeclaredVariable stamp: 'HAW 10/2/2020 16:15:21'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:22'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:22'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #CompilerTest #testUndeclaredVariableIsSignaledForUndeclaredVariables stamp: 'HAW 10/2/2020 16:15:22'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:22'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:22'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #CompilerTest #testUndefinedVariableIsSignaledForVariablesDefinedButNotInitialized stamp: 'HAW 10/2/2020 16:15:22'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:23'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:23'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #CompilerTest #testUnknownSelectorIsSignalForMessagesSendNotImplemented stamp: 'HAW 10/2/2020 16:15:23'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:24'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:24'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #CompilerTest #testUnusedVariableIsSignaledForUnusedVariables stamp: 'HAW 10/2/2020 16:15:24'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:24'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:25'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test01ScanNewClassChange stamp: 'HAW 10/2/2020 16:15:25'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:26'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test02AddingANewMethodShouldBeLogged stamp: 'HAW 10/2/2020 16:15:26'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:26'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test02ScanNewMethodChange stamp: 'HAW 10/2/2020 16:15:26'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:27'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test03ChangingAMethodShouldBeLogged stamp: 'HAW 10/2/2020 16:15:27'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:28'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test03ScanMethodModifiedChange stamp: 'HAW 10/2/2020 16:15:28'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:28'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test04RemovingAMethodShouldBeLogged stamp: 'HAW 10/2/2020 16:15:28'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:29'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test04ScanMethodRemovalChange stamp: 'HAW 10/2/2020 16:15:29'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:30'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test05RemovingAClassShouldBeLogged stamp: 'HAW 10/2/2020 16:15:30'!
PASSED!

!testRun: #ChangesTest #test05ScanClassRemovalChange stamp: 'HAW 10/2/2020 16:15:31'!
PASSED!

!testRun: #ChangesTest #test06RenamingAClassShouldBeLogged stamp: 'HAW 10/2/2020 16:15:31'!
PASSED!

!classRemoval: #NewTestClass__ stamp: 'HAW 10/2/2020 16:15:32'!
RefactoringClassTestData subclass: #NewTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test06ScanClassRenamedChange stamp: 'HAW 10/2/2020 16:15:32'!
PASSED!

!classRemoval: #NewTestClass__ stamp: 'HAW 10/2/2020 16:15:32'!
RefactoringClassTestData subclass: #NewTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #testDataClassName stamp: 'HAW 10/2/2020 16:15:32'!
PASSED!

!testRun: #GreenTest #test01WhenANewTestIsAddedThenIsWritingAFailingTest stamp: 'HAW 10/2/2020 16:15:33'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:15:33'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test02WhenAProductionMethodIsAddedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:33'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:15:34'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test03WhenAProductionMethodIsChangedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:34'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:15:35'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test04WhenAProductionClassIsAddedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:35'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:15:35'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test05WhenAProductionClassIsRemovedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:36'!
PASSED!

!testRun: #GreenTest #test06WhenATestIsChangedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:36'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:15:37'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test07WhenATestPassesNothingHappens stamp: 'HAW 10/2/2020 16:15:37'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:15:38'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test08WhenAMethodIsRemovedIsRefactoring stamp: 'HAW 10/2/2020 16:15:38'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:15:38'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test09WhenATestHasAnErrorAnErrorIsReportedAndTransitionsToRed stamp: 'HAW 10/2/2020 16:15:38'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:15:39'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test10WhenATestIsRenamedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:39'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:15:40'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test11WhenATestFailsAnErrorIsReportedAndTransitionsToRed stamp: 'HAW 10/2/2020 16:15:40'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:15:40'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test12WhenATestIsRemovedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:41'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:15:41'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test13WhenATestClassIsRemovedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:42'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:42'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test14WhenATestClassIsAddedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:42'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:43'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test15WhenATestClassIsRenamedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:43'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 10/2/2020 16:15:44'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test01WhenAClassIsRemovedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:44'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:45'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test02WhenTheLastOfTheTestsIsRemovedIsBackToWritingAFailingTest stamp: 'HAW 10/2/2020 16:15:45'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:45'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test03WhenTheFirstOfTheTestsIsRemovedIsBackToWritingAFailingTest stamp: 'HAW 10/2/2020 16:15:45'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:46'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test04WhenAnotherTestIsRemovedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:46'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 10/2/2020 16:15:47'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:47'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test05WhenAMethodIsRemovedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:47'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:15:48'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:48'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test06WhenAModelMethodIsChangedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:48'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:15:49'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:49'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test07WhenAModelClassIsAddedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:49'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:15:50'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:50'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test08WhenAModelMethodIsAddedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:51'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:15:51'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:51'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test09WhenATestIsAddedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:52'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:52'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test10WhenATestClassIsAddedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:52'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 10/2/2020 16:15:53'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:53'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test11WhenOneOfTheTestTheTestsIsChangedIsStillInThisState stamp: 'HAW 10/2/2020 16:15:53'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:54'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test12WhenAnotherTestIsChangedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:54'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:55'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test13WhenATestFailsAnErrorIsReportedAndGoesToRed stamp: 'HAW 10/2/2020 16:15:55'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:55'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test14WhenOneOfTheTestsPassesTwoErrorsAreReported stamp: 'HAW 10/2/2020 16:15:56'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:56'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test15WhenAllOfTheTestsPassErrorsAreReportedAndGoesToGreen stamp: 'HAW 10/2/2020 16:15:56'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:57'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test16WhenOneOfTheTestsIsRenamedIsStillInThisState stamp: 'HAW 10/2/2020 16:15:57'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:58'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test17WhenAnotherTestIsRenamedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:58'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:59'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test18WhenATestUtilityIsChangedNothingHappens stamp: 'HAW 10/2/2020 16:15:59'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:59'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test01WhenAProductionClassIsAddedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:15:59'!
PASSED!

!classRemoval: #ProdClassA stamp: 'HAW 10/2/2020 16:16:00'!
Object subclass: #ProdClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test02WhenAProductionMethodIsAddedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:00'!
PASSED!

!classRemoval: #ProdClassA stamp: 'HAW 10/2/2020 16:16:01'!
Object subclass: #ProdClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test03WhenATestIsAddedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:01'!
PASSED!

!classRemoval: #ProdClassA stamp: 'HAW 10/2/2020 16:16:01'!
TestCase subclass: #ProdClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test04WhenATestClassIsAddedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:02'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:02'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test05WhenATestIsChangedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:02'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:03'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test06WhenAProductionMethodIsChangedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:03'!
PASSED!

!classRemoval: #ProductionClassA stamp: 'HAW 10/2/2020 16:16:04'!
Object subclass: #ProductionClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test07WhenAClassIsRemovedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:04'!
PASSED!

!testRun: #NotDoingTDDTest #test08WhenThereIsOneTestAndPassesThenIsInGreen stamp: 'HAW 10/2/2020 16:16:04'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:05'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test09WhenOneOfTheTestFailsThenIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:05'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:06'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test10WhenOneOfTheTestIsNotRunThenIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:06'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:07'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test11WhenATestIsRenamedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:07'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:07'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test12WhenThereIsMoreThanOneTestAndAllPassThenIsInGreen stamp: 'HAW 10/2/2020 16:16:07'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:08'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test13WhenATestIsRemovedIsNoLongerTakenIntoAccount stamp: 'HAW 10/2/2020 16:16:08'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:09'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test14WhenATestClassIsRemovedIsNoLongerTakenIntoAccount stamp: 'HAW 10/2/2020 16:16:09'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:10'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test15WhenAllTestAreRemovedThenGoesToGreen stamp: 'HAW 10/2/2020 16:16:10'!
PASSED!

!testRun: #NotStartedTest #test01WhenNoChangesAreDoneThenNothingHappens stamp: 'HAW 10/2/2020 16:16:11'!
PASSED!

!testRun: #NotStartedTest #test02WhenAModelClassIsAddedThenWeAsumeIsWritingAFailingTest stamp: 'HAW 10/2/2020 16:16:11'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:12'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test03WhenATestClassIsAddedThenIsWritingAFailingTest stamp: 'HAW 10/2/2020 16:16:12'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:16:13'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test04WhenAProductionMethodIsAddedResultShouldHaveAnError stamp: 'HAW 10/2/2020 16:16:13'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:13'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test05WhenAMethodIsChangedResultShouldHaveAnError stamp: 'HAW 10/2/2020 16:16:13'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:14'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test06WhenATestIsAddedThenIsWritingAFailingTest stamp: 'HAW 10/2/2020 16:16:14'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:15'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test07WhenAClassIsRemovedResultShouldHaveAnError stamp: 'HAW 10/2/2020 16:16:15'!
PASSED!

!testRun: #NotStartedTest #test08WhenAMethodIsRemovedResultShouldHaveAnError stamp: 'HAW 10/2/2020 16:16:16'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:16'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test09WhenAllTestsPassThenIsInGreenState stamp: 'HAW 10/2/2020 16:16:16'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:17'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test10WhenATestFailsThenIsInRedState stamp: 'HAW 10/2/2020 16:16:17'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:18'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test11WhenATestHasAnErrorThenIsInRedState stamp: 'HAW 10/2/2020 16:16:18'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:19'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test12WhenATestIsChangedThenIsWritingAFailingTest stamp: 'HAW 10/2/2020 16:16:19'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:19'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test13WhenATestIsRenamedThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:16:19'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:20'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test01ShouldIgnoreDoIts stamp: 'HAW 10/2/2020 16:16:20'!
PASSED!

!testRun: #OtherTest #test02ResultKnowsTheChangesThatWereDone stamp: 'HAW 10/2/2020 16:16:21'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:16:21'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test03TDDStateForEachChange stamp: 'HAW 10/2/2020 16:16:21'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:16:22'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test04TestRenamesAreGroupedInASingleChange stamp: 'HAW 10/2/2020 16:16:22'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:23'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test05TestsWithSameNameInDifferentClassesAreDifferent stamp: 'HAW 10/2/2020 16:16:23'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 10/2/2020 16:16:24'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:24'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test06WhenATestHasAnErrorThisTestDoesNotFail stamp: 'HAW 10/2/2020 16:16:24'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:25'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test07RunFromASpecificChange stamp: 'HAW 10/2/2020 16:16:25'!
PASSED!

!classRemoval: #ExampleClass stamp: 'HAW 10/2/2020 16:16:25'!
Object subclass: #ExampleClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:26'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test08ReRunTheWholeAnalysis stamp: 'HAW 10/2/2020 16:16:26'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:26'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test09ReRunFromASpecificChange stamp: 'HAW 10/2/2020 16:16:26'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:16:27'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:27'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test10ChangeWhenAMethodWasAdded stamp: 'HAW 10/2/2020 16:16:27'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:16:28'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test01WhenAProductionClassIsAddedIsStillInRed stamp: 'HAW 10/2/2020 16:16:28'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:16:29'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:29'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test02WhenAProductionMethodIsAddedIsStillInRed stamp: 'HAW 10/2/2020 16:16:29'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:30'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:30'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test03WhenTheTestPassesThenIsInGreen stamp: 'HAW 10/2/2020 16:16:30'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:31'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:31'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test04WhenTheTestFailsIsStillInRed stamp: 'HAW 10/2/2020 16:16:31'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:32'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:32'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test05WhenAProductionMethodIsChangedIsStillInRed stamp: 'HAW 10/2/2020 16:16:32'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:33'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:33'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test06WhenTheNewTestPassesButAnotherTestFailsThenIsStillInRed stamp: 'HAW 10/2/2020 16:16:34'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:34'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:34'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test07WhenAllTestsPassThenIsInGreen stamp: 'HAW 10/2/2020 16:16:35'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:35'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:36'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test08WhenATestIsAddedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:16:36'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:36'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test09WhenATestIsRenamedAndAllTestsPassThenIsInGreen stamp: 'HAW 10/2/2020 16:16:37'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:37'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:37'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test10WhenAModelMethodIsRemovedIsStillInRed stamp: 'HAW 10/2/2020 16:16:38'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:38'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:38'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test11WhenAModelClassIsRemovedIsStillInRed stamp: 'HAW 10/2/2020 16:16:39'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:39'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test11WhenATestClassIsAddedIsStillInRed stamp: 'HAW 10/2/2020 16:16:40'!
PASSED!

!classRemoval: #TestSomethingB stamp: 'HAW 10/2/2020 16:16:40'!
TestCase subclass: #TestSomethingB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:40'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test12WhenTheTestIsChangedIsStillInRed stamp: 'HAW 10/2/2020 16:16:41'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:41'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:41'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test13WhenAnotherTestIsChangedIsStillInRed stamp: 'HAW 10/2/2020 16:16:42'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:42'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test14WhenATestIsRemovedResultShouldHaveAnErrorAndIsNotDoingTDD stamp: 'HAW 10/2/2020 16:16:42'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:43'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test15WhenATestClassIsRemovedResultShouldHaveAnErrorAndIsNotDoingTDD stamp: 'HAW 10/2/2020 16:16:43'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:44'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test01WhenAProductionMethodIsChangedIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:44'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:45'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test02WhenAProductionMethodIsAddedIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:45'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:45'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test03WhenAProductionClassIsAddedIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:46'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:16:46'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test04WhenATestIsChangedIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:46'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:47'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test05WhenATestIsRenamedIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:47'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:48'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test06WhenATestClassIsAddedIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:48'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:48'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test07WhenATestIsAddedResultHasAnErrorAndIsWritingAFailingTest stamp: 'HAW 10/2/2020 16:16:48'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:49'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test08WhenAllTestPassThenIsInGreen stamp: 'HAW 10/2/2020 16:16:49'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:50'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test09WhenOneOfTheTestFailsThenIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:50'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:51'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test10WhenAClassIsRemovedIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:51'!
PASSED!

!testRun: #RefactorTest #test11WhenAProductionMethodIsRemovedStillRefactoring stamp: 'HAW 10/2/2020 16:16:51'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:16:52'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test12WhenATestClassIsRemovedThoseTestsAreNoLongerTakenIntoAccount stamp: 'HAW 10/2/2020 16:16:52'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 10/2/2020 16:16:53'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test13WhenATestIsRemovedIsNoLongerTakenIntoAccount stamp: 'HAW 10/2/2020 16:16:53'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:54'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test14WhenAllTestAreRemovedThenGoesToGreen stamp: 'HAW 10/2/2020 16:16:54'!
PASSED!

!testRun: #RefactorTest #test15WhenAModelMethodIsAddedButNotUsedThereIsAnError stamp: 'HAW 10/2/2020 16:16:55'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:16:55'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:56'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test16WhenAModelMethodIsAddedAndThenUsedThereAreNoErrors stamp: 'HAW 10/2/2020 16:16:56'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:16:56'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:57'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test17WhenAModelMethodIsAddedAndRemovedAndIsNotUsedThereAreNoErrors stamp: 'HAW 10/2/2020 16:16:57'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:16:57'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:58'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test18WhenAModelMethodIsAddedAndIsOnlyMentionedInACommentThereIsAnError stamp: 'HAW 10/2/2020 16:16:58'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:16:59'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:59'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test19WhenTwoModelMethodsAreAddedBothHaveToBeUsedInAValidRefactor stamp: 'HAW 10/2/2020 16:16:59'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:17:00'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:00'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test20WhenTwoModelMethodsAreAddedAndNotUsedIsNotAValidRefactor stamp: 'HAW 10/2/2020 16:17:00'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:17:01'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:01'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test21WhenAModelMethodIsAddedAndIsUsedAsAVariableNameIsNotAValidRefactor stamp: 'HAW 10/2/2020 16:17:01'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:17:02'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:02'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test22WhenAModelMethodIsNotUsedWhenAnalysisIsFinishedThereIsAnError stamp: 'HAW 10/2/2020 16:17:02'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:17:03'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:03'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test23WhenATestClassIsRenamedThoseTestsAreStillTakenIntoAccount stamp: 'HAW 10/2/2020 16:17:03'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:17:04'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassB stamp: 'HAW 10/2/2020 16:17:04'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test24WhenAMethodIsOverridenItIsConsideredUsedAndRefactorIsValid stamp: 'HAW 10/2/2020 16:17:04'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:17:05'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:05'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test01WhenTheTestIsChangedThenIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:05'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:06'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test02WhenAModelClassIsAddedThenIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:06'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:17:07'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test03WhenATestClassIsAddedThenIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:07'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:07'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test04WhenATestFailsThenIsInRedState stamp: 'HAW 10/2/2020 16:17:07'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:08'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test05WhenAModelMethodIsAddedAndNoTestIsBeingWrittenThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:08'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:17:09'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:09'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test06WhenTheTestIsRenamedThenIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:09'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:10'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test07WhenAModelMethodIsChangedThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:10'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:17:11'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:11'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test08WhenSetUpMethodIsAddedToTheTestClassThenIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:11'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:12'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test09WhenAMethodIsAddedToTheTestClassThenIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:12'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:12'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test10WhenASecondTestIsAddedIsInMoreThanOneTestWritten stamp: 'HAW 10/2/2020 16:17:12'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:13'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test11WhenATestWithTheSameNameIsChangedInOtherClassThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:13'!
PASSED!

!classRemoval: #TestSomethingB stamp: 'HAW 10/2/2020 16:17:14'!
TestCase subclass: #TestSomethingB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomethingA stamp: 'HAW 10/2/2020 16:17:14'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test12WhenADifferentTestIsChangedThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:14'!
PASSED!

!classRemoval: #TestSomethingA stamp: 'HAW 10/2/2020 16:17:15'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test13WhenATestWithTheSameNameIsAddedInOtherClassThenIsInMoreThanOneTestWritten stamp: 'HAW 10/2/2020 16:17:15'!
PASSED!

!classRemoval: #TestSomethingB stamp: 'HAW 10/2/2020 16:17:16'!
TestCase subclass: #TestSomethingB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomethingA stamp: 'HAW 10/2/2020 16:17:16'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test14WhenAModelMethodIsRemovedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:16'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:17:17'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomethingA stamp: 'HAW 10/2/2020 16:17:17'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test15WhenTheTestIsRemovedThenIsInGreen stamp: 'HAW 10/2/2020 16:17:17'!
PASSED!

!classRemoval: #TestSomethingA stamp: 'HAW 10/2/2020 16:17:18'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test16WhenATestIsRenamedThenIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:18'!
PASSED!

!classRemoval: #TestSomethingA stamp: 'HAW 10/2/2020 16:17:18'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test17WhenAModelClassIsRemovedThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:19'!
PASSED!

!classRemoval: #TestSomethingA stamp: 'HAW 10/2/2020 16:17:19'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test18WhenTheTestPassesAnErrorIsReportedAndGoesToGreen stamp: 'HAW 10/2/2020 16:17:19'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:20'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test19AnotherTestIsRemovedAnErrorIsReportedAndIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:20'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 10/2/2020 16:17:21'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:21'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test20WhenAFirstTestIsAddedIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:21'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:22'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test21WhenAModelMethodIsAddedBeforeRunningTestsThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:22'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:17:23'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:24'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test22WhenAModelMethodIsChangedBeforeWritingATestThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:24'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:17:25'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:25'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test23WhenATestClassIsRemovedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:26'!
PASSED!

!classRemoval: #TestSomethingB stamp: 'HAW 10/2/2020 16:17:26'!
TestCase subclass: #TestSomethingB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test01RunningAPassingTestShouldBeLogged stamp: 'HAW 10/2/2020 16:17:27'!
PASSED!

!classRemoval: 'TestChangesTestData' stamp: 'HAW 10/2/2020 16:17:27'!
TestCase subclass: 'TestChangesTestData'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test02RunningAFailingTestShouldBeLogged stamp: 'HAW 10/2/2020 16:17:27'!
PASSED!

!classRemoval: 'TestChangesTestData' stamp: 'HAW 10/2/2020 16:17:28'!
TestCase subclass: 'TestChangesTestData'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test03RunningATestWithAnErrorShouldBeLogged stamp: 'HAW 10/2/2020 16:17:28'!
PASSED!

!classRemoval: 'TestChangesTestData' stamp: 'HAW 10/2/2020 16:17:29'!
TestCase subclass: 'TestChangesTestData'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test04OverridingAMethodShouldBeLoggedWithAReferenceToTheOverridenMethod stamp: 'HAW 10/2/2020 16:17:29'!
PASSED!

!classRemoval: #SubclassTestDataClass__ stamp: 'HAW 10/2/2020 16:17:30'!
TestChangesTestClass__ subclass: #SubclassTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestChangesTestClass__ stamp: 'HAW 10/2/2020 16:17:30'!
Object subclass: #TestChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test05WhenAMethodIsNotOverridenTheMethodReferenceIsNotIncluded stamp: 'HAW 10/2/2020 16:17:30'!
PASSED!

!classRemoval: #SubclassTestDataClass__ stamp: 'HAW 10/2/2020 16:17:31'!
TestChangesTestClass__ subclass: #SubclassTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestChangesTestClass__ stamp: 'HAW 10/2/2020 16:17:31'!
Object subclass: #TestChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test06WhenAMethodIsChangedItIsNotConsideredOverriden stamp: 'HAW 10/2/2020 16:17:31'!
PASSED!

!classRemoval: #TestChangesTestClass__ stamp: 'HAW 10/2/2020 16:17:32'!
Object subclass: #TestChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #ScanTestChangesTest #test01ScanPassingTestChange stamp: 'HAW 10/2/2020 16:17:32'!
PASSED!

!classRemoval: 'TestChangesTestData' stamp: 'HAW 10/2/2020 16:17:33'!
TestCase subclass: 'TestChangesTestData'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #ScanTestChangesTest #test02ScanFailedTestChange stamp: 'HAW 10/2/2020 16:17:33'!
PASSED!

!classRemoval: 'TestChangesTestData' stamp: 'HAW 10/2/2020 16:17:34'!
TestCase subclass: 'TestChangesTestData'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #ScanTestChangesTest #test03ScanNewTestClass stamp: 'HAW 10/2/2020 16:17:34'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:34'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #ScanTestChangesTest #test04ScanOverridenMethod stamp: 'HAW 10/2/2020 16:17:34'!
PASSED!

!classRemoval: #AClass__ stamp: 'HAW 10/2/2020 16:17:35'!
TestChangesTestClass__ subclass: #AClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestChangesTestClass__ stamp: 'HAW 10/2/2020 16:17:35'!
Object subclass: #TestChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #ScanTestChangesTest #test05ScanAMethodThatIsNotOverriden stamp: 'HAW 10/2/2020 16:17:35'!
PASSED!

!classRemoval: #AClass__ stamp: 'HAW 10/2/2020 16:17:36'!
TestChangesTestClass__ subclass: #AClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestChangesTestClass__ stamp: 'HAW 10/2/2020 16:17:36'!
Object subclass: #TestChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #BlockNodeTest #testItDoesNotSendsAGivenMessageToSelfWhenTheBlockIsEmpty stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #BlockNodeTest #testItSendsAGivenMessageToSelfWhenItContainsAnStatementWithAMessageSendToSelf stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #MessageNodeTest #testItDoesNotSendTheMessageToSelfWhenTheReceiverIsNotSelf stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #MessageNodeTest #testItDoesNotSendTheMessageToSelfWhenTheReceiverIsSelfButTheSelectorIsDifferent stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #MessageNodeTest #testItSendsTheMessageToSelfWhenTheReceiverIsSelf stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #VariableNodeTest #testItDoesNotReferencesSelfWhenTheVariableNameIsNotSelf stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #VariableNodeTest #testItReferencesSelfWhenTheVariableNameIsSelf stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #AddInstanceVariableTest #test01NewVariableNameCanNotBeEmpty stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #AddInstanceVariableTest #test02NewVariableNameCanNotContainBlanks stamp: 'HAW 10/2/2020 16:17:37'!
PASSED!

!testRun: #AddInstanceVariableTest #test03NewVariableNameCanNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:17:37'!
PASSED!

!testRun: #AddInstanceVariableTest #test04ValidNewVariableNameGetBlanksTrimmed stamp: 'HAW 10/2/2020 16:17:38'!
PASSED!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:38'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test05NewVariableNameCanNotBeDefinedInClass stamp: 'HAW 10/2/2020 16:17:38'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:39'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:39'!
RefactoringClassTestData subclass: #SuperclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:39'!
SuperclassWithInstVar subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test06NewVariableNameCanNotBeDefinedInSuperclasses stamp: 'HAW 10/2/2020 16:17:39'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:39'!
SuperclassWithInstVar subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithInstVar stamp: 'HAW 10/2/2020 16:17:40'!
RefactoringClassTestData subclass: #SuperclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:40'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:40'!
ClassToAddInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test07NewVariableNameCanNotBeDefinedInAnySubclass stamp: 'HAW 10/2/2020 16:17:40'!
PASSED!

!classRemoval: #SubclassWithInstVar stamp: 'HAW 10/2/2020 16:17:40'!
ClassToAddInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:40'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:41'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:41'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test08AddCreatesNewInstanceVariable stamp: 'HAW 10/2/2020 16:17:41'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:41'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:41'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:41'!
m1 | a | a := 10.! !

!testRun: #AddInstanceVariableTest #test09FailsWhenNewVariableEqualsTemporaryVariableOfAMethodInClass stamp: 'HAW 10/2/2020 16:17:41'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:42'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:42'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:42'!
m1:a! !

!testRun: #AddInstanceVariableTest #test10FailsWhenNewVariableEqualsArgumentOfAMethodInClass stamp: 'HAW 10/2/2020 16:17:42'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:43'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:43'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:43'!
m1 [ :a | ] value: 1! !

!testRun: #AddInstanceVariableTest #test11FailsWhenNewVariableEqualsArgumentOfABlockInAMethodInClass stamp: 'HAW 10/2/2020 16:17:43'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:43'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:43'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:43'!
m1 [ | a | ] value! !

!testRun: #AddInstanceVariableTest #test12FailsWhenNewVariableEqualsTemporaryOfABlockInAMethodInClass stamp: 'HAW 10/2/2020 16:17:43'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:44'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:44'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassOfClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:44'!
ClassToAddInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassOfClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:44'!
m1 | a | ! !

!testRun: #AddInstanceVariableTest #test13FailsWhenNewVariableIsHiddenInAnyMethodOfAnySubclass stamp: 'HAW 10/2/2020 16:17:44'!
PASSED!

!classRemoval: #SubclassOfClassToRefactor stamp: 'HAW 10/2/2020 16:17:44'!
ClassToAddInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:45'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:45'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test14NewVariableNameCanNotBeAReservedName stamp: 'HAW 10/2/2020 16:17:45'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:45'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:45'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:45'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:45'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:45'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:45' prior: 50846537!
sender_m1 self m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:17:45'!
m1!

!testRun: #AddParameterTest #test01AddingParameterToUnaryMessageAddsColonAndParameter stamp: 'HAW 10/2/2020 16:17:45'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:46'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:46'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:46'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:46'!
sender_m1 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:46'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:46' prior: 50846576!
sender_m1 self m1: 1 m2: 2! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:17:46'!
m1: oldParam!

!testRun: #AddParameterTest #test02AddingParameterToKeywordMessageAddsNewKeywordAndParameter stamp: 'HAW 10/2/2020 16:17:46'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:47'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:47'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
sender_m1 self m1: 1. self m1: 1.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47' prior: 50846616!
sender_m1 self m1: 1 m2: 2. self m1: 1 m2: 2.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam!

!testRun: #AddParameterTest #test03AddingParameterToKeywordMessageMultipleSendsInSameMethodSameLiteral stamp: 'HAW 10/2/2020 16:17:47'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:47'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:47'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
sender_m1 self m1: self size.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47' prior: 50846657!
sender_m1 self m1: self size m2: 2.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam!

!testRun: #AddParameterTest #test04AddingParameterToKeywordMessageWithMessageSendAsLastFormalParameter stamp: 'HAW 10/2/2020 16:17:47'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:48'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:48'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:48'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:48'!
sender_m1 self m1: self size + 4.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:48'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:48' prior: 50846698!
sender_m1 self m1: self size + 4 m2: 2.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:17:48'!
m1: oldParam!

!testRun: #AddParameterTest #test05AddingParameterToKeywordMessageWithBinaryMessageSendAsLastFormalParameter stamp: 'HAW 10/2/2020 16:17:48'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
sender_m1 self m1: (self at: 1 put: 2).! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49' prior: 50846739!
sender_m1 self m1: (self at: 1 put: 2) m2: 2.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:17:49'!
m1: oldParam!

!testRun: #AddParameterTest #test06AddingParameterToKeywordMessageWithKeywordMessageSendAsLastFormalParameter stamp: 'HAW 10/2/2020 16:17:49'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
sender_m1 #m1 size! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49' prior: 50846780!
sender_m1 #m1: size! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:17:49'!
m1!

!testRun: #AddParameterTest #test07AddingParameterToUnaryMessageChangesReferencesToSelector stamp: 'HAW 10/2/2020 16:17:49'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:50'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:50'!
sender_m1 #m1: size.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:50'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:50' prior: 50846819!
sender_m1 #m1:m2: size.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:17:50'!
m1: oldParam!

!testRun: #AddParameterTest #test08AddingParameterToKeywordMessageChangesReferencesToSelector stamp: 'HAW 10/2/2020 16:17:50'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:51'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterTest #test09FailsIfNewParameterValueCanNotBeCompiled stamp: 'HAW 10/2/2020 16:17:51'!
PASSED!

!testRun: #AddParameterTest #test10FailsIfNewParameterValueIsEmpty stamp: 'HAW 10/2/2020 16:17:51'!
PASSED!

!testRun: #AddParameterTest #test11NewParameterNameCanNotBeEmpty stamp: 'HAW 10/2/2020 16:17:52'!
PASSED!

!testRun: #AddParameterTest #test12NewParameterNameCanNotStartWithNumber stamp: 'HAW 10/2/2020 16:17:52'!
PASSED!

!testRun: #AddParameterTest #test13NewParameterNameCanNotContainSpaces stamp: 'HAW 10/2/2020 16:17:52'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:53'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: 'newParam'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:53'!
m1! !

!testRun: #AddParameterTest #test14NewParameterCanNotBeDefinedAsInstanceVariableInAnyImplementor stamp: 'HAW 10/2/2020 16:17:53'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: 'newParam'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:54'!
m1:newParam! !

!testRun: #AddParameterTest #test15NewParameterCanNotBeDefinedAsParameterInAnyImplementor stamp: 'HAW 10/2/2020 16:17:54'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterTest #test16WhenCreatedForUnarySelectorMustBeUnary stamp: 'HAW 10/2/2020 16:17:54'!
PASSED!

!testRun: #AddParameterTest #test17WhenCreatedForBinarySelectorMustBeBinary stamp: 'HAW 10/2/2020 16:17:55'!
PASSED!

!testRun: #AddParameterTest #test18CanNotAddParameterToBinaryKeyword stamp: 'HAW 10/2/2020 16:17:55'!
PASSED!

!testRun: #AddParameterTest #test19AllImplementorsMustImplementOldSelector stamp: 'HAW 10/2/2020 16:17:55'!
PASSED!

!testRun: #AddParameterTest #test20AllSendersShouldSendOldSelector stamp: 'HAW 10/2/2020 16:17:56'!
PASSED!

!testRun: #AddParameterTest #test21NewKeywordToAddToOldSelectorCanNotBeUnary stamp: 'HAW 10/2/2020 16:17:56'!
PASSED!

!testRun: #AddParameterTest #test22NewKeywordToAddToOldSelectorCanNotBeBinary stamp: 'HAW 10/2/2020 16:17:57'!
PASSED!

!testRun: #AddParameterTest #test23NewKeywordToAddToOldSelectorCanNotBeKeywordWithMoreThanOneParameter stamp: 'HAW 10/2/2020 16:17:57'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:58'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
sender_m1 self m1
	! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58' prior: 50846954!
sender_m1 self m1: 1
	! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:17:58'!
m1!

!testRun: #AddParameterTest #test24AddingParameterToSendersTakeCaresOfSeparators stamp: 'HAW 10/2/2020 16:17:58'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:58'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:58'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58' prior: 50846991!
sender_m1 self m1: (self at: 1)! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:17:58'!
m1!

!testRun: #AddParameterTest #test25IfNewParameterValueIsKeywordMessageSendAddParenthesisToItForUnaryMessages stamp: 'HAW 10/2/2020 16:17:58'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:59'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:59'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:59'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:59'!
sender_m1 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:59'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:59' prior: 50847031!
sender_m1 self m1: 1 m2: (self at: 1)! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:17:59'!
m1: oldParam!

!testRun: #AddParameterTest #test26IfNewParameterValueIsKeywordMessageSendAddParenthesisToItForKeywordMessages stamp: 'HAW 10/2/2020 16:17:59'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:18:00'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterTest #test27NewParameterValueCanNotHaveMoreThanOneStatement stamp: 'HAW 10/2/2020 16:18:00'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:00'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:00'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:00'!
sender_m1 self m1:[ 1 factorial ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:00'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:00' prior: 50847076!
sender_m1 self m1:[ 1 factorial ] m2: 1! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:18:00'!
m1: oldParam!

!testRun: #AddParameterTest #test28WhenSenderLastParameterIsABlockAddedParameterIsNotAddedInsideTheBlock stamp: 'HAW 10/2/2020 16:18:00'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:18:01'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:01'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
sender self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
m2: newParam m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01' prior: 50847117!
sender self m2: 2 m1: 1! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:18:01'!
m1: p1!

!testRun: #AddParameterTest #test29AddingParameterAsFirstOneWorksAsExpected stamp: 'HAW 10/2/2020 16:18:01'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:18:01'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:01'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
sender self m1: 1 m3: 3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
m1: p1 m2: newParam m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01' prior: 50847155!
sender self m1: 1 m2: 2 m3: 3! !

!methodRemoval: ClassToAddParameter #m1:m3: stamp: 'HAW 10/2/2020 16:18:01'!
m1: p1 m3: p3!

!testRun: #AddParameterTest #test30AddingParameterInTheMiddleWorksAsExpected stamp: 'HAW 10/2/2020 16:18:01'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:18:02'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:02'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:02'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:02'!
sender
	self m1: 1 m3: 3.
	self
		m1: 4
		m3: 6! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:02'!
m1: p1 m2: newParam m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:02' prior: 50847195!
sender
	self m1: 1 m2: 2 m3: 3.
	self
		m1: 4
		m2: 2 m3: 6! !

!methodRemoval: ClassToAddParameter #m1:m3: stamp: 'HAW 10/2/2020 16:18:02'!
m1: p1 m3: p3!

!testRun: #AddParameterTest #test31AddingParameterInTheMiddleWithManySendersWorksAsExpected stamp: 'HAW 10/2/2020 16:18:02'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:18:03'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterTest #test32IndexCanNotBeLessThanOne stamp: 'HAW 10/2/2020 16:18:03'!
PASSED!

!testRun: #AddParameterTest #test33IndexCanNotBeBiggerThanNumberOfParametersPlusOne stamp: 'HAW 10/2/2020 16:18:03'!
PASSED!

!testRun: #AddParameterTest #test34IndexMustBeInteger stamp: 'HAW 10/2/2020 16:18:03'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:04'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:04'!
m1

! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:04'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:04'!
m1: newParam

! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:04' prior: 50847247!
sender_m1 self m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:18:04'!
m1

!

!testRun: #AddParameterTest #test35AddingParameterRetractsInsertionPointWhenAtInsertionPointIsANewLine stamp: 'HAW 10/2/2020 16:18:04'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:18:05'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:05'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterTest #test36ParentesisAreAddedToSendersOfUnaryMessage stamp: 'HAW 10/2/2020 16:18:05'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:18:05'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangeKeywordsSelectorOrderTest #test01CannotChangeSelectorOrderInUnaryMessages stamp: 'HAW 10/2/2020 16:18:05'!
PASSED!

!testRun: #ChangeKeywordsSelectorOrderTest #test02CannotChangeSelectorOrderInBinaryMessages stamp: 'HAW 10/2/2020 16:18:06'!
PASSED!

!testRun: #ChangeKeywordsSelectorOrderTest #test03CannotChangeSelectorOrderInKeywordMessagesWithOneParameterOnly stamp: 'HAW 10/2/2020 16:18:06'!
PASSED!

!classDefinition: #ClassToChangeSelectorOrder category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:06'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:06'!
m1: p1 m2: p2! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:06'!
m2: p2 m1: p1! !

!methodRemoval: ClassToChangeSelectorOrder #m1:m2: stamp: 'HAW 10/2/2020 16:18:06'!
m1: p1 m2: p2!

!testRun: #ChangeKeywordsSelectorOrderTest #test04ChangesKeywordsOrder stamp: 'HAW 10/2/2020 16:18:06'!
PASSED!

!classRemoval: #ClassToChangeSelectorOrder stamp: 'HAW 10/2/2020 16:18:07'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeSelectorOrder category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:07'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:07'!
m1: p1 m2: p2! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:07'!
m2: p2 m1: p1! !

!methodRemoval: ClassToChangeSelectorOrder #m1:m2: stamp: 'HAW 10/2/2020 16:18:07'!
m1: p1 m2: p2!

!testRun: #ChangeKeywordsSelectorOrderTest #test05ChangesParametersOrder stamp: 'HAW 10/2/2020 16:18:07'!
PASSED!

!classRemoval: #ClassToChangeSelectorOrder stamp: 'HAW 10/2/2020 16:18:08'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangeKeywordsSelectorOrderTest #test06NewSelectorMustIncludeOldSelectorKeywords stamp: 'HAW 10/2/2020 16:18:08'!
PASSED!

!classDefinition: #ClassToChangeSelectorOrder category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:08'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:08'!
m1: p1 m2: p2 m3: p3! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:08'!
m2: p2 m3: p3 m1: p1! !

!methodRemoval: ClassToChangeSelectorOrder #m1:m2:m3: stamp: 'HAW 10/2/2020 16:18:08'!
m1: p1 m2: p2 m3: p3!

!testRun: #ChangeKeywordsSelectorOrderTest #test07ChangesKeywordsAndParametersOrderForMoreThanTwoKeywords stamp: 'HAW 10/2/2020 16:18:08'!
PASSED!

!classRemoval: #ClassToChangeSelectorOrder stamp: 'HAW 10/2/2020 16:18:09'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:09'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:09'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:09'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test01NewSelectorShouldNotBeEmpty stamp: 'HAW 10/2/2020 16:18:09'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:09'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:09'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:09'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:09'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test02NewSelectorShouldNotContainSeparators stamp: 'HAW 10/2/2020 16:18:09'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:10'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:10'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:10'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:10'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test03ExtractingToSelectorAlreadyDefinedInTheClassRaisesAWarning stamp: 'HAW 10/2/2020 16:18:10'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:11'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:11'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:11'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:11'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test04NewSelectorShouldNotStartWithANumber stamp: 'HAW 10/2/2020 16:18:11'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:11'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:11'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:11'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:11'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test05NewUnarySelectorShouldNotStartWithASymbol stamp: 'HAW 10/2/2020 16:18:11'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:12'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:12'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:12'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test06IntervalToExtractIsNotBeforeMethodSourceCodeBoundaries stamp: 'HAW 10/2/2020 16:18:12'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:13'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:13'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:13'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test07IntervalToExtractIsNotAfterMethodSourceCodeBoundaries stamp: 'HAW 10/2/2020 16:18:13'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:13'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:13'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:13'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:13'!
m1 ^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test08IntervalToExtractShouldNotContainAReturnExpression stamp: 'HAW 10/2/2020 16:18:13'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:14'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:14'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:14'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:14'!
m1 ^ 4! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:14'!
m2

	^ 4! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:14' prior: 50847702!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test09ExtractingALiteralCreatesANewMethodAndChangesExistingCodeToCallThatNewMethod stamp: 'HAW 10/2/2020 16:18:14'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:15'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:15'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:15'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:15'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test10IntervalToExtractDoesNotContainsPartOfTheOriginalSelector stamp: 'HAW 10/2/2020 16:18:15'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:15'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:15'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:15'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:15'!
m1 | localVar | ^ localVar + 3! !

!testRun: #ExtractMethodTest #test11IntervalToExtractDoesNotContainsPartOfLocalVariablesDefinition stamp: 'HAW 10/2/2020 16:18:15'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:16'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:16'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:16'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:16'!
m1 <annoyingPragma>! !

!testRun: #ExtractMethodTest #test12IntervalToExtractDoesNotContainsPartOfPragmasDefinition stamp: 'HAW 10/2/2020 16:18:16'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:17'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:17'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:17'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:17'!
m1 ^ 3 + ((4))! !

!testRun: #ExtractMethodTest #test13IntervalToExtractShouldBeAValidSmalltalkExpression stamp: 'HAW 10/2/2020 16:18:17'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:17'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:17'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:17'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test14ItIsNotPossibleToExtractTheLeftSideOfAnAssignment stamp: 'HAW 10/2/2020 16:18:17'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:18'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:18'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:18'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:18'!
m1 self m3.
	self m4: 5! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:18'!
m2

	self m3.
	self m4: 5! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:18' prior: 50847918!
m1 self m2! !

!testRun: #ExtractMethodTest #test15ExtractingAListOfStatementsCreatesANewMethodWithoutReturn stamp: 'HAW 10/2/2020 16:18:18'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:19'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:19'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:19'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:19'!
m1 ^ 'hey true'! !

!testRun: #ExtractMethodTest #test16CanNotExtractPartOfALiteral stamp: 'HAW 10/2/2020 16:18:19'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:19'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:19'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:19'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:19'!
m1 ^ '^ 3' size! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:20'!
m2

	^ '^ 3' size! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:20' prior: 50847995!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test17AStringContainingTheReturnCharacterCanBeExtracted stamp: 'HAW 10/2/2020 16:18:20'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:20'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:20'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:20'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:20'!
m1
	
	self m3.
	self m4: 5.! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:20'!
m2

	self m3.
	self m4: 5! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:20' prior: 50848038!
m1
	
	self m2.! !

!testRun: #ExtractMethodTest #test18ExtractingAListOfStatementsIncludingDotsRemovesThemAndContinuesWithMethodExtraction stamp: 'HAW 10/2/2020 16:18:20'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:21'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:21'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:21'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:21'!
m1 ^ ((42))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:21'!
m2

	^ 42! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:21' prior: 50848082!
m1 ^ ((self m2))! !

!testRun: #ExtractMethodTest #test19ASelectionContainingAdditionalParenthesesAtTheBeginningAndOrEndCanBeExtracted stamp: 'HAW 10/2/2020 16:18:21'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:22'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:22'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:22'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22'!
m1 | local | ^ local + 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22'!
m2: local

	^ local + 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22' prior: 50848125!
m1 | local | ^ self m2: local! !

!testRun: #ExtractMethodTest #test20ASelectionContainingALocalVariableIsParameterizedOnTheExtractedMessage stamp: 'HAW 10/2/2020 16:18:22'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:22'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:22'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:22'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22'!
m1 ^ (9) * 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22'!
m2

	^ (9) * 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22' prior: 50848169!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test21ASelectionContainingAdditionalParenthesesOnOneSideCanBeExtractedAndItIsNotTrimmed stamp: 'HAW 10/2/2020 16:18:22'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:23'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:23'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:23'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:23'!
m1 | localVar | ^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:23'!
m2: localVar

	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:23' prior: 50848212!
m1 | localVar | ^ self m2: localVar! !

!testRun: #ExtractMethodTest #test22ItIsPossibleToExtractTheLastExpressionOfAMethod stamp: 'HAW 10/2/2020 16:18:23'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:24'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:24'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:24'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test23CanNotExtractWithAnInvalidInterval stamp: 'HAW 10/2/2020 16:18:24'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:24'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:24'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:24'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:24'!
m1 | localVar | localVar _ 8! !

!testRun: #ExtractMethodTest #test24ItIsNotPossibleToExtractAnIntervalIncludingATemporaryAssignmentExpression stamp: 'HAW 10/2/2020 16:18:24'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:25'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:25'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:25'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:25'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test25NewUnarySelectorShouldNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:18:25'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:26'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:26'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:26'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26'!
m1 ^ [ |something| something _ 3 ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26'!
m2

	^ [ |something| something _ 3 ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26' prior: 50848359!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test26ItIsPossibleToExtractAnEntireBlockIncludingALocalAssignment stamp: 'HAW 10/2/2020 16:18:26'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:26'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:26'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:26'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26'!
m1 ^ 2 ifNil: [ #boo ] ifNotNil: [ #yay ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26'!
m2

	^ 2 ifNil: [ #boo ] ifNotNil: [ #yay ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26' prior: 50848403!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test27ItIsPossibleToExtractExpressionsWithOptimizedSelectors stamp: 'HAW 10/2/2020 16:18:26'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:27'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:27'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:27'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:27'!
m1 | localVar | ^ #foo! !

!testRun: #ExtractMethodTest #test28ItIsNotPossibleToExtractALocalVariableInsideOfItsDeclaration stamp: 'HAW 10/2/2020 16:18:27'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:28'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:28'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:28'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28'!
m1: arg ^ 2 + arg * 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28'!
m2: arg

	^ 2 + arg! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28' prior: 50848483!
m1: arg ^ (self m2: arg) * 3! !

!testRun: #ExtractMethodTest #test29ExtractingABinaryExpressionToAKeywordMessageIntroducesParenthesesToNotBreakOriginalPrecedence stamp: 'HAW 10/2/2020 16:18:28'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:28'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:28'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:28'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28'!
m1 ^ `3 + 4`! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28'!
m2

	^ `3 + 4`! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28' prior: 50848528!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test30ItIsPossibleToExtractAQuotedExpression stamp: 'HAW 10/2/2020 16:18:28'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:29'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:29'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:29'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:29'!
m1 ^ 2 factorial ifNotNil: [ #boo ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:29'!
m2

	^ 2 factorial ifNotNil: [ #boo ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:29' prior: 50848570!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test31ItIsPossibleToExtractExpressionsWithOptimizedSelectorsWhereTheReceiverIsNotASimpleLiteral stamp: 'HAW 10/2/2020 16:18:29'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:30'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:30'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:30'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:30'!
m1 ^ [ | a | a _ 3 factorial ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:30'!
m2

	| a | a _ 3 factorial! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:30' prior: 50848615!
m1 ^ [ self m2 ]! !

!testRun: #ExtractMethodTest #test32ItIsPossibleToExtractATemporaryDeclarationOfABlockIfItIsNotUsedOutsideOfSelectionInterval stamp: 'HAW 10/2/2020 16:18:30'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:30'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:31'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:31'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:31'!
m1 | a | a _ 3 factorial! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:31'!
m2

	| a | a _ 3 factorial! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:31' prior: 50848659!
m1 self m2! !

!testRun: #ExtractMethodTest #test33ItIsPossibleToExtractATemporaryDeclarationIfItIsNotUsedOutsideOfSelectionInterval stamp: 'HAW 10/2/2020 16:18:31'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:31'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:31'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:31'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:31'!
m1 | localVar1 localVar2 | ^ localVar1 + localVar2 + 2! !

!testRun: #ExtractMethodTest #test34TryingToExtractAMethodWithLessArgumentsThanNeededFails stamp: 'HAW 10/2/2020 16:18:31'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:32'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:32'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:32'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:32'!
m1 | localVar1 localVar2 | ^ localVar1 + localVar2 + 2! !

!testRun: #ExtractMethodTest #test35TryingToExtractAMethodWithMoreArgumentsThanNeededFails stamp: 'HAW 10/2/2020 16:18:32'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:33'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:33'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:33'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33'!
m1 ^ (3 + 2) factorial; yourself! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33'!
m2

	^ (3 + 2) factorial; yourself! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33' prior: 50848775!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test36ItIsPossibleToExtractACascadeExpression stamp: 'HAW 10/2/2020 16:18:33'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:33'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:33'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:33'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33'!
m1 | temp | []! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33'!
m2

	| temp | []! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33' prior: 50848819!
m1 self m2! !

!testRun: #ExtractMethodTest #test37ItIsPossibleATempDeclarationAlongWithABlock stamp: 'HAW 10/2/2020 16:18:33'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:34'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:34'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:34'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:34'!
m1 ^ (  (3 + 4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:34'!
m2

	^ 3 + 4! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:34' prior: 50848861!
m1 ^ (  (self m2))! !

!testRun: #ExtractMethodTest #test38ItIsPossibleToExtractCodeThatContainsMultipleParenthesisWithSpacesBetweenThem stamp: 'HAW 10/2/2020 16:18:34'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:35'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:35'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:35'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:35'!
m1 ^ 42! !

!testRun: #ExtractMethodTest #test39TryingToExtractToAMethodThatExistsInASuperclassRaisesAWarning stamp: 'HAW 10/2/2020 16:18:35'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:35'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:35'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:35'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:35'!
m1 |var| var _ 42. ^ var! !

!testRun: #ExtractMethodTest #test40CanNotExtractTemporaryAssignmentWithDeclarationIfTheVariableIsUsedOutsideOfSelectionInterval stamp: 'HAW 10/2/2020 16:18:35'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:36'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:36'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:36'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:36'!
m1: arg ^ self! !

!testRun: #ExtractMethodTest #test41CannotExtractPartOfMethodSignature stamp: 'HAW 10/2/2020 16:18:36'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:37'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:37'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:37'!
m1 ^ 2! !

!testRun: #ExtractToTemporaryTest #test01NewVariableCanNotBeEmpty stamp: 'HAW 10/2/2020 16:18:37'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:37'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:37'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:37'!
m1 ^ 2! !

!testRun: #ExtractToTemporaryTest #test02NewVariableHasToBeValid stamp: 'HAW 10/2/2020 16:18:37'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:38'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:38'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:38'!
m1 | new | ^ 2! !

!testRun: #ExtractToTemporaryTest #test03NewVariableNameCanNotBeDefinedInMethod stamp: 'HAW 10/2/2020 16:18:38'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:39'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:39'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:39'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:39'!
m1 ^ 78! !

!testRun: #ExtractToTemporaryTest #test04FailsIfNewTemporaryIsEqualToInstanceVariableInClass stamp: 'HAW 10/2/2020 16:18:39'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:39'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:39'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRefactorSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:39'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:39'!
m1 ^ 78! !

!testRun: #ExtractToTemporaryTest #test05FailsIfNewTemporaryIsEqualToInstanceVariableInAnySuperclass stamp: 'HAW 10/2/2020 16:18:39'!
PASSED!

!classRemoval: #ClassToRefactorSuperclass stamp: 'HAW 10/2/2020 16:18:40'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:40'!
AnObsoleteClassToRefactorSuperclass subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:40'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:40'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test06SourceCodeToExtractCanNotIncludeReturn stamp: 'HAW 10/2/2020 16:18:40'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:41'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:41'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:41'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test07SourceCodeToExtractCanNotBeEmpty stamp: 'HAW 10/2/2020 16:18:41'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:42'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:42'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:42'!
m1 ^ 1 + 3! !

!testRun: #ExtractToTemporaryTest #test08SourceCodeToExtractCanNotHaveSyntaxErrors stamp: 'HAW 10/2/2020 16:18:42'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:42'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:42'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:42'!
m1 1+2. 3+4! !

!testRun: #ExtractToTemporaryTest #test09SourceCodeToExtractHasToBeOneStatement stamp: 'HAW 10/2/2020 16:18:42'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:43'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:43'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:43'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test10FailsIfIntervalToExtractIsBeforeMethodSourceCodeBoundaries stamp: 'HAW 10/2/2020 16:18:43'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:44'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:44'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:44'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test11FailsIfIntervalToExtractIsAfterMethodSourceCodeBoundaries stamp: 'HAW 10/2/2020 16:18:44'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:44'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:44'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:44'!
m1

	^ 42! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:44' prior: 50849298!
m1

	| new |
	new _ 42.
	^ new! !

!testRun: #ExtractToTemporaryTest #test12ItIsPossibleToExtractASingleLiteralFromAMethodWithoutAnyTempsOrArguments stamp: 'HAW 10/2/2020 16:18:44'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:45'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:45'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:45'!
m1

	| four |
	four _ 4.
	^ four + 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:45' prior: 50849328!
m1

	| four two |
	four _ 4.
	two _ 2.
	^ four + two! !

!testRun: #ExtractToTemporaryTest #test13ItIsPossibleToExtractASingleExpressionFromAMethodThatHasAlreadyOtherTemporary stamp: 'HAW 10/2/2020 16:18:45'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:46'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:46'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:46'!
m1

	| |
	^ 3 factorial! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:46' prior: 50849360!
m1

	| f |
	f _ 3 factorial.
	^ f! !

!testRun: #ExtractToTemporaryTest #test14ItIsPossibleToExtractASingleExpressionFromAMethodThatHasAnEmptyTemporariesDeclaration stamp: 'HAW 10/2/2020 16:18:46'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:46'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:46'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:46'!
m1

	^ 42! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:46' prior: 50849392!
m1

	| new |
	new := 42.
	^ new! !

!testRun: #ExtractToTemporaryTest #test15ItIsPossibleToExtractCodeAndGenerateAssignmentUsingAnsiAssignmentStyle stamp: 'HAW 10/2/2020 16:18:46'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:47'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:47'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:47'!
m1

	^ [ self m2 ]! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:47' prior: 50849422!
m1

	^ [ | new |
	new _ self m2 ]! !

!testRun: #ExtractToTemporaryTest #test16ItIsPossibleToExtractASingleLiteralFromABlockWithoutAnyTempsOrArguments stamp: 'HAW 10/2/2020 16:18:47'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:48'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:48'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:48'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test17CannotExtractPartOfMethodName stamp: 'HAW 10/2/2020 16:18:48'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:48'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:48'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:48'!
m1 ^ self m2! !

!testRun: #ExtractToTemporaryTest #test18CannotExtractPartOfMessageSend stamp: 'HAW 10/2/2020 16:18:48'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:49'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:49'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:49'!
m1

	^ 42! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:49' prior: 50849501!
m1

	| new |
	new _ 42.
	^ new! !

!testRun: #ExtractToTemporaryTest #test19ItIsPossibleToExtractAnIntervalWithSomeExtraSpaces stamp: 'HAW 10/2/2020 16:18:49'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:50'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:50'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:50'!
m1

	^ []! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:50' prior: 50849531!
m1

	| new |
	new _ [].
	^ new! !

!testRun: #ExtractToTemporaryTest #test20ItIsPossibleToExtractAnEmptyBlock stamp: 'HAW 10/2/2020 16:18:50'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:50'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:50'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:50'!
m1 | existing | existing := 2! !

!testRun: #ExtractToTemporaryTest #test21CannotExtractLeftSideOfAssignment stamp: 'HAW 10/2/2020 16:18:50'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:51'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:51'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:51'!
m1

	^ 3 factorial; yourself! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:51' prior: 50849585!
m1

	| new |
	new _ 3 factorial; yourself.
	^ new! !

!testRun: #ExtractToTemporaryTest #test22ItIsPossibleToExtractACascadeExpression stamp: 'HAW 10/2/2020 16:18:51'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:52'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:52'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52'!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50849616!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50849620!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50849624!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50849628!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50849632!
m1 ^ 2! !

!testRun: #ExtractToTemporaryTest #test23CannotUseAReservedNameAsTheNewTemporaryVariable stamp: 'HAW 10/2/2020 16:18:52'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:52'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:52'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52'!
m1

	self run! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50849661!
m1

	| action |
	action _ self run! !

!testRun: #ExtractToTemporaryTest #test24WhenExtractingAnEntireStatementItOnlyGeneratesTheVariableAssignment stamp: 'HAW 10/2/2020 16:18:52'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:53'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:53'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:53'!
m1: arg ^ self! !

!testRun: #ExtractToTemporaryTest #test25CannotExtractArgumentNamesFromMethodSignature stamp: 'HAW 10/2/2020 16:18:53'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:54'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:54'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:54'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:54'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test01ChangesTheSuperclassOfTheClassToRefactor stamp: 'HAW 10/2/2020 16:18:54'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 10/2/2020 16:18:54'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AddedSuperclass stamp: 'HAW 10/2/2020 16:18:55'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:55'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: 'instVar1 instVar2'
	classVariableNames: 'ClassVar1 ClassVar2'
	poolDictionaries: 'SharedAAA'
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:55'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:55'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: 'instVar1 instVar2'
	classVariableNames: 'ClassVar1 ClassVar2'
	poolDictionaries: 'SharedAAA'
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test02ClassToRefactorStructureIsMaintained stamp: 'HAW 10/2/2020 16:18:55'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 10/2/2020 16:18:55'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: 'instVar1 instVar2'
	classVariableNames: 'ClassVar1 ClassVar2'
	poolDictionaries: 'private'
	category: '__Refactoring-TestData__'!

!classRemoval: #AddedSuperclass stamp: 'HAW 10/2/2020 16:18:56'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:56'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:56'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:56'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test03NewSuperclassCategoryIsTheSameAsClassToRefactorCategory stamp: 'HAW 10/2/2020 16:18:56'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 10/2/2020 16:18:56'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AddedSuperclass stamp: 'HAW 10/2/2020 16:18:57'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:57'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:57'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:57'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test04NewSuperclassHasNoVariables stamp: 'HAW 10/2/2020 16:18:57'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 10/2/2020 16:18:57'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AddedSuperclass stamp: 'HAW 10/2/2020 16:18:58'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:58'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AlreadyExistingClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:58'!
RefactoringClassTestData subclass: #AlreadyExistingClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test05NewSuperclassShouldNotExist stamp: 'HAW 10/2/2020 16:18:58'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 10/2/2020 16:18:59'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AlreadyExistingClass stamp: 'HAW 10/2/2020 16:18:59'!
RefactoringClassTestData subclass: #AlreadyExistingClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test06NewSuperclassNameHasToBeASymbol stamp: 'HAW 10/2/2020 16:18:59'!
PASSED!

!testRun: #InsertSuperclassTest #test07NewSuperclassNameHasToStartWithUppercaseLetter stamp: 'HAW 10/2/2020 16:18:59'!
PASSED!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:00'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:00'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:00'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test08WhenAppliedToMetaclassWorksAsWithClass stamp: 'HAW 10/2/2020 16:19:00'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 10/2/2020 16:19:00'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AddedSuperclass stamp: 'HAW 10/2/2020 16:19:01'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test09NewSuperclassNameCanNotBeEmpty stamp: 'HAW 10/2/2020 16:19:01'!
PASSED!

!testRun: #InsertSuperclassTest #test10NewSuperclassNameCanNotHaveSpaces stamp: 'HAW 10/2/2020 16:19:01'!
PASSED!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:01'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToMoveMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:01'!
newMethod ^a! !

!testRun: #MoveToInstanceOrClassMethodTest #test01CannotMoveWhenReferencingInstanceVariables stamp: 'HAW 10/2/2020 16:19:01'!
PASSED!

!classRemoval: #ClassToMoveMethod stamp: 'HAW 10/2/2020 16:19:02'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:02'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: 'ClassToMoveMethod class' category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:02'!
ClassToMoveMethod class
	instanceVariableNames: 'a'!
!ClassToMoveMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:02'!
newMethod|a|! !

!testRun: #MoveToInstanceOrClassMethodTest #test02CannotMoveToClassWhenLocalVariableIsTheSameAsClassInstanceVariable stamp: 'HAW 10/2/2020 16:19:02'!
PASSED!

!classRemoval: #ClassToMoveMethod stamp: 'HAW 10/2/2020 16:19:03'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:03'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:03'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToMoveMethod class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:03'!
newMethod|a|! !

!testRun: #MoveToInstanceOrClassMethodTest #test03CannotMoveToInstanceWhenLocalVariableIsTheSameAsClassInstanceVariable stamp: 'HAW 10/2/2020 16:19:03'!
PASSED!

!classRemoval: #ClassToMoveMethod stamp: 'HAW 10/2/2020 16:19:04'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:04'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToMoveMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:04'!
newMethod! !
!ClassToMoveMethod class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:04'!
newMethod! !

!methodRemoval: ClassToMoveMethod #newMethod stamp: 'HAW 10/2/2020 16:19:04'!
newMethod!

!testRun: #MoveToInstanceOrClassMethodTest #test04InstanceMethodIsMovedToClassMethod stamp: 'HAW 10/2/2020 16:19:04'!
PASSED!

!classRemoval: #ClassToMoveMethod stamp: 'HAW 10/2/2020 16:19:04'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:04'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToMoveMethod class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:04'!
newMethod! !
!ClassToMoveMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:04'!
newMethod! !

!methodRemoval: ClassToMoveMethod class #newMethod stamp: 'HAW 10/2/2020 16:19:04'!
newMethod!

!testRun: #MoveToInstanceOrClassMethodTest #test05ClassMethodIsMovedToInstanceMethod stamp: 'HAW 10/2/2020 16:19:04'!
PASSED!

!classRemoval: #ClassToMoveMethod stamp: 'HAW 10/2/2020 16:19:05'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:05'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushDownInstanceVariableTest #test01AnInstanceVariableDoesNotExistOnClassToFactorCannotBePushedDownToSubclasses stamp: 'HAW 10/2/2020 16:19:05'!
PASSED!

!classRemoval: #ClassToPushInstanceVariableDown stamp: 'HAW 10/2/2020 16:19:06'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:06'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushInstanceVariableDown methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:06'!
newMethod^ a! !

!classDefinition: #SubclassWithoutInstVarOne category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:06'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarOne
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithoutInstVarTwo category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:06'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarTwo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushDownInstanceVariableTest #test02AnInstanceVariableThatIsAccessedOnClassToRefactorCannotBePushedDownToAllSubclasses stamp: 'HAW 10/2/2020 16:19:06'!
PASSED!

!classRemoval: #SubclassWithoutInstVarTwo stamp: 'HAW 10/2/2020 16:19:06'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarTwo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SubclassWithoutInstVarOne stamp: 'HAW 10/2/2020 16:19:06'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarOne
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushInstanceVariableDown stamp: 'HAW 10/2/2020 16:19:07'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:07'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithoutInstVarOne category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:07'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarOne
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithoutInstVarTwo category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:07'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarTwo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:07'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithoutInstVarOne category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:07'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarOne
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithoutInstVarTwo category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:07'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarTwo
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushDownInstanceVariableTest #test03AnInstanceVariableThatIsNotAccessedOnClassToRefactorShouldBePushedDownToAllSubclasses stamp: 'HAW 10/2/2020 16:19:07'!
PASSED!

!classRemoval: #SubclassWithoutInstVarTwo stamp: 'HAW 10/2/2020 16:19:08'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarTwo
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SubclassWithoutInstVarOne stamp: 'HAW 10/2/2020 16:19:08'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarOne
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushInstanceVariableDown stamp: 'HAW 10/2/2020 16:19:08'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:08'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass1 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:08'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass2 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:08'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:08'!
newMethod! !
!Subclass1 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:08' overrides: 50850324!
newMethod! !
!Subclass2 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:08' overrides: 50850324!
newMethod! !

!methodRemoval: ClassToPushMethodDown #newMethod stamp: 'HAW 10/2/2020 16:19:08'!
newMethod!

!testRun: #PushDownMethodTest #test01AnEmptyMethodOnClassToRefactorShouldBePushedDownToSubclasses stamp: 'HAW 10/2/2020 16:19:08'!
PASSED!

!classRemoval: #Subclass2 stamp: 'HAW 10/2/2020 16:19:09'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Subclass1 stamp: 'HAW 10/2/2020 16:19:09'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 10/2/2020 16:19:09'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:09'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass1 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:09'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass2 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:09'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:09'!
newMethod|a|! !

!testRun: #PushDownMethodTest #test02AMethodTemporaryVarDeclaredAsInstVarOnASubclassCanNotBePushedDownToSubclasses stamp: 'HAW 10/2/2020 16:19:09'!
PASSED!

!classRemoval: #Subclass2 stamp: 'HAW 10/2/2020 16:19:10'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Subclass1 stamp: 'HAW 10/2/2020 16:19:10'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 10/2/2020 16:19:11'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:11'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass1 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:11'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass2 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:11'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:11'!
newMethod:a! !

!testRun: #PushDownMethodTest #test03AMethodArgumentDeclaredAsInstVarOnASubclassCanNotBePushedDownToSubclasses stamp: 'HAW 10/2/2020 16:19:11'!
PASSED!

!classRemoval: #Subclass2 stamp: 'HAW 10/2/2020 16:19:11'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Subclass1 stamp: 'HAW 10/2/2020 16:19:12'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 10/2/2020 16:19:12'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:12'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass1 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:12'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass2 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:12'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:12'!
newMethod^ 1 + a! !
!Subclass1 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:12' overrides: 50850498!
newMethod^ 1 + a! !
!Subclass2 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:12' overrides: 50850498!
newMethod^ 1 + a! !

!methodRemoval: ClassToPushMethodDown #newMethod stamp: 'HAW 10/2/2020 16:19:12'!
newMethod^ 1 + a!

!testRun: #PushDownMethodTest #test04AMethodAccessesClassToRefactorInstVarShouldBePushedDownToSubclasses stamp: 'HAW 10/2/2020 16:19:12'!
PASSED!

!classRemoval: #Subclass2 stamp: 'HAW 10/2/2020 16:19:13'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Subclass1 stamp: 'HAW 10/2/2020 16:19:13'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 10/2/2020 16:19:13'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:13'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass1 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:13'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass2 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:13'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:13'!
newMethod a = 1! !
!Subclass1 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:13' overrides: 50850563!
newMethod a = 1! !
!Subclass2 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:13' overrides: 50850563!
newMethod a = 1! !

!methodRemoval: ClassToPushMethodDown #newMethod stamp: 'HAW 10/2/2020 16:19:13'!
newMethod a = 1!

!testRun: #PushDownMethodTest #test05AMethodWritesClassToRefactorInstVarShouldBePushedDownToSubclasses stamp: 'HAW 10/2/2020 16:19:13'!
PASSED!

!classRemoval: #Subclass2 stamp: 'HAW 10/2/2020 16:19:14'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Subclass1 stamp: 'HAW 10/2/2020 16:19:14'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 10/2/2020 16:19:15'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:15'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:15'!
newMethod
	^ 2 + a.! !

!classDefinition: #Subclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:15'!
ClassToPushMethodDown subclass: #Subclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!Subclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:15' overrides: 50850612!
newMethod^ 1 + a! !

!testRun: #PushDownMethodTest #test06AMethodInClassToRefactorExistsInSubClassesShouldOverrideTheExistingSubClassesMethod stamp: 'HAW 10/2/2020 16:19:15'!
PASSED!

!classRemoval: #Subclass stamp: 'HAW 10/2/2020 16:19:15'!
ClassToPushMethodDown subclass: #Subclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 10/2/2020 16:19:16'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:16'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:16'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:16'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:16'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushUpInstanceVariableTest #test01AnInstanceVariableThatIsNotUsedOnClassToRefactorShouldBePushedUpToSuperclass stamp: 'HAW 10/2/2020 16:19:16'!
PASSED!

!classRemoval: #ClassToPushInstanceVariableUp stamp: 'HAW 10/2/2020 16:19:16'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithoutInstVar stamp: 'HAW 10/2/2020 16:19:17'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:17'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:17'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnoterSubClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:17'!
SuperclassWithoutInstVar subclass: #AnoterSubClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:17'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnoterSubClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:17'!
SuperclassWithoutInstVar subclass: #AnoterSubClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:17'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushUpInstanceVariableTest #test02AnInstanceVariableOnMultipleSubclassesShouldBeRemovedFromAllSubclassesAndPushedUpToSuperClass stamp: 'HAW 10/2/2020 16:19:17'!
PASSED!

!classRemoval: #ClassToPushInstanceVariableUp stamp: 'HAW 10/2/2020 16:19:18'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnoterSubClassWithInstVar stamp: 'HAW 10/2/2020 16:19:18'!
SuperclassWithoutInstVar subclass: #AnoterSubClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithoutInstVar stamp: 'HAW 10/2/2020 16:19:18'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:18'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushUpInstanceVariableTest #test03AnInstanceVariableDoesNotExistOnClassToRefactorCannotBePushedUp stamp: 'HAW 10/2/2020 16:19:18'!
PASSED!

!classRemoval: #ClassToPushInstanceVariableUp stamp: 'HAW 10/2/2020 16:19:19'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithVariableAsTemporaryVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:19'!
RefactoringClassTestData subclass: #SuperclassWithVariableAsTemporaryVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SuperclassWithVariableAsTemporaryVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:19'!
newMethod| a |! !

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:19'!
SuperclassWithVariableAsTemporaryVariable subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushUpInstanceVariableTest #test04AnInstanceVariableThatIsUsedOnSuperClassAsTemporaryVariableCannotBePushedUp stamp: 'HAW 10/2/2020 16:19:19'!
PASSED!

!classRemoval: #ClassToPushInstanceVariableUp stamp: 'HAW 10/2/2020 16:19:19'!
SuperclassWithVariableAsTemporaryVariable subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithVariableAsTemporaryVariable stamp: 'HAW 10/2/2020 16:19:20'!
RefactoringClassTestData subclass: #SuperclassWithVariableAsTemporaryVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:20'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:20'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:20'!
newMethod! !
!Superclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:20'!
newMethod! !

!methodRemoval: ClassToPushMethodUp #newMethod stamp: 'HAW 10/2/2020 16:19:20'!
newMethod!

!testRun: #PushUpMethodTest #test01AnEmptyMethodOnClassToRefactorShouldBePushedUpToSuperclass stamp: 'HAW 10/2/2020 16:19:20'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 10/2/2020 16:19:20'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 10/2/2020 16:19:21'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:21'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:21'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:21'!
newMethod^ 1 + a! !

!testRun: #PushUpMethodTest #test02AMethodAccessesClassToRefactorInstVarCanNotBePushedUpToSuperclass stamp: 'HAW 10/2/2020 16:19:21'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 10/2/2020 16:19:21'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 10/2/2020 16:19:22'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:22'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:22'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:22'!
newMethod a = 1! !

!testRun: #PushUpMethodTest #test03AMethodWritesClassToRefactorInstVarCanNotBePushedUpToSuperclass stamp: 'HAW 10/2/2020 16:19:22'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 10/2/2020 16:19:22'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 10/2/2020 16:19:23'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:23'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:23'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:23'!
newMethod a = 1! !
!Superclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:23'!
newMethod a = 1! !

!methodRemoval: ClassToPushMethodUp #newMethod stamp: 'HAW 10/2/2020 16:19:23'!
newMethod a = 1!

!testRun: #PushUpMethodTest #test04AMethodWritesSuperClassInstVarShouldBePushedUpToSuperclass stamp: 'HAW 10/2/2020 16:19:23'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 10/2/2020 16:19:23'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 10/2/2020 16:19:24'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:24'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:24'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:24'!
newMethod^ 1 + a! !
!Superclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:24'!
newMethod^ 1 + a! !

!methodRemoval: ClassToPushMethodUp #newMethod stamp: 'HAW 10/2/2020 16:19:24'!
newMethod^ 1 + a!

!testRun: #PushUpMethodTest #test05AMethodAccessesSuperClassClassToRefactorInstVarShouldBePushedUpToSuperclass stamp: 'HAW 10/2/2020 16:19:24'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 10/2/2020 16:19:24'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 10/2/2020 16:19:25'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:25'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:25'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:25'!
newMethod^ 1 + a! !
!Superclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:25'!
newMethod^ 1 + a! !

!methodRemoval: ClassToPushMethodUp #newMethod stamp: 'HAW 10/2/2020 16:19:25'!
newMethod^ 1 + a!

!testRun: #PushUpMethodTest #test06AMethodAccessesSuperClassClassToRefactorInstVarShouldBePushedUpToSuperclass stamp: 'HAW 10/2/2020 16:19:25'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 10/2/2020 16:19:25'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 10/2/2020 16:19:26'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:26'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!Superclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:26'!
newMethod^ 1 + a! !

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:26'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:26' overrides: 50851126!
newMethod
	^ 2 + a.! !

!testRun: #PushUpMethodTest #test07AMethodInClassToRefactorExistsInSuperClassShouldOverrideTheExistingSuperClassMethod stamp: 'HAW 10/2/2020 16:19:26'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 10/2/2020 16:19:26'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 10/2/2020 16:19:27'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:27'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveAllUnreferencedInstanceVariablesTest #test01NoVariableIsRemovedWhenClassHasNoInstanceVariable stamp: 'HAW 10/2/2020 16:19:27'!
PASSED!

!classRemoval: #ClassWithoutInstVar stamp: 'HAW 10/2/2020 16:19:27'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:27'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:27'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveAllUnreferencedInstanceVariablesTest #test02UnreferencedVariablesAreRemoved stamp: 'HAW 10/2/2020 16:19:27'!
PASSED!

!classRemoval: #ClassWithInstVar stamp: 'HAW 10/2/2020 16:19:28'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:28'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:28'!
m1 ^a! !

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:28'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveAllUnreferencedInstanceVariablesTest #test03VariablesWithReferencesAreNotRemoved stamp: 'HAW 10/2/2020 16:19:28'!
PASSED!

!classRemoval: #ClassWithInstVar stamp: 'HAW 10/2/2020 16:19:29'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:29'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithReferenceInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:29'!
ClassWithInstVar subclass: #ClassWithReferenceInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassWithReferenceInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:29'!
m1 ^a! !

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:29'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveAllUnreferencedInstanceVariablesTest #test04VariablesWithReferencesInSubclassesAreNotRemoved stamp: 'HAW 10/2/2020 16:19:29'!
PASSED!

!classRemoval: #ClassWithReferenceInstVar stamp: 'HAW 10/2/2020 16:19:29'!
ClassWithInstVar subclass: #ClassWithReferenceInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassWithInstVar stamp: 'HAW 10/2/2020 16:19:30'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:30'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveInstanceVariableTest #test01CanNotRemoveAnInstanceVariableNotDefinedInClass stamp: 'HAW 10/2/2020 16:19:30'!
PASSED!

!classRemoval: #ClassWithoutInstVar stamp: 'HAW 10/2/2020 16:19:30'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:30'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:30'!
m1 ^a! !

!testRun: #RemoveInstanceVariableTest #test02CanNotRemoveInstanceVariableWithReferences stamp: 'HAW 10/2/2020 16:19:30'!
PASSED!

!classRemoval: #ClassWithInstVar stamp: 'HAW 10/2/2020 16:19:31'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:31'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:31'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveInstanceVariableTest #test03WhenAppliedRemovesInstanceVariable stamp: 'HAW 10/2/2020 16:19:31'!
PASSED!

!classRemoval: #ClassWithInstVar stamp: 'HAW 10/2/2020 16:19:32'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveParameterTest #test01CanNotRemoveParameterFromUnaryMessages stamp: 'HAW 10/2/2020 16:19:32'!
PASSED!

!testRun: #RemoveParameterTest #test02CanNotRemoveParameterFromBinaryMessages stamp: 'HAW 10/2/2020 16:19:32'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:33'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:33'!
m1: parameter! !

!testRun: #RemoveParameterTest #test03CanNotRemoveParameterNotInMessage stamp: 'HAW 10/2/2020 16:19:33'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:33'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:33'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:33'!
m1: parameter! !

!testRun: #RemoveParameterTest #test04AllImplementorsMustImplementSelector stamp: 'HAW 10/2/2020 16:19:33'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:34'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:34'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:34'!
m1: parameter! !

!testRun: #RemoveParameterTest #test05AllSendersShouldSendSelector stamp: 'HAW 10/2/2020 16:19:34'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:35'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:35'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:35'!
m1: parameter ^parameter! !

!testRun: #RemoveParameterTest #test06NoImplementorReferencesParameterToRemove stamp: 'HAW 10/2/2020 16:19:35'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:35'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:35'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:35'!
m1:parameter1 
	m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:35'!
m2:parameter2! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'HAW 10/2/2020 16:19:35'!
m1:parameter1 
	m2:parameter2!

!testRun: #RemoveParameterTest #test07FirstParameterIsRemovedCorrectly stamp: 'HAW 10/2/2020 16:19:35'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:36'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:36'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:36'!
m1:parameter1 m2:parameter2
	| t1 |! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:36'!
m1:parameter1 
	| t1 |! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'HAW 10/2/2020 16:19:36'!
m1:parameter1 m2:parameter2
	| t1 |!

!testRun: #RemoveParameterTest #test08LastParameterIsRemovedCorrectly stamp: 'HAW 10/2/2020 16:19:36'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:37'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:37'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:37'!
m0: parameter0 
	m1:parameter1 
	m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:37'!
m0: parameter0 
	m2:parameter2! !

!methodRemoval: ClassToRemoveParameter #m0:m1:m2: stamp: 'HAW 10/2/2020 16:19:37'!
m0: parameter0 
	m1:parameter1 
	m2:parameter2!

!testRun: #RemoveParameterTest #test09MiddleParameterIsRemovedCorrectly stamp: 'HAW 10/2/2020 16:19:37'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:37'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:37'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:37'!
m1:parameter1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:37'!
m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:19:37'!
m1:parameter1!

!testRun: #RemoveParameterTest #test10ParameterFromOneKeywordSelectorIsRemovedCorrectly stamp: 'HAW 10/2/2020 16:19:37'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:38'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:38'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:38'!
m1:parameter1 m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:38'!
sender
		self 
			m1: 1 
			m2: 2 ! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:38'!
m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:38' prior: 50851609!
sender
		self 
			m2: 2 ! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'HAW 10/2/2020 16:19:38'!
m1:parameter1 m2:parameter2!

!testRun: #RemoveParameterTest #test11ParameterOfSendersOfMoreThanOneKeywordSelectorsIsRemovedCorrectly stamp: 'HAW 10/2/2020 16:19:38'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:39'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:39'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:39'!
m1:parameter1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:39'!
sender
		self 
			m1:
			 (1+2).! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:39'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:39' prior: 50851651!
sender
		self 
			m1.! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:19:39'!
m1:parameter1!

!testRun: #RemoveParameterTest #test12ParameterOfSendersOfOneKeywordSelectorsIsRemovedCorrectly stamp: 'HAW 10/2/2020 16:19:39'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:40'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:40'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:40'!
m1:parameter1 m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:40'!
sender
		self m1: (1+1) m2: 2.
		self m1: 3 m2: 4.! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:40'!
m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:40' prior: 50851691!
sender
		self m2: 2.
		self m2: 4.! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'HAW 10/2/2020 16:19:40'!
m1:parameter1 m2:parameter2!

!testRun: #RemoveParameterTest #test13ParameterIsRemovedCorrecltyFromSendersWithMoreThanOneSend stamp: 'HAW 10/2/2020 16:19:40'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:40'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveParameterTest #test14CanNotRemoveParameterIndexLessThanOne stamp: 'HAW 10/2/2020 16:19:40'!
PASSED!

!testRun: #RemoveParameterTest #test15CanNotRemoveParameterIndexBiggerThanOldSelectorNumberOfKeywords stamp: 'HAW 10/2/2020 16:19:41'!
PASSED!

!testRun: #RemoveParameterTest #test16ParameterIndexMustBeInteger stamp: 'HAW 10/2/2020 16:19:41'!
PASSED!

!testRun: #RenameClassTest #test01NewClassNameHasToBeDifferentToOldOne stamp: 'HAW 10/2/2020 16:19:42'!
PASSED!

!testRun: #RenameClassTest #test02NewClassNameHasToBeASymbol stamp: 'HAW 10/2/2020 16:19:42'!
PASSED!

!testRun: #RenameClassTest #test03NewClassNameHasToStartWithUppercaseLetter stamp: 'HAW 10/2/2020 16:19:42'!
PASSED!

!testRun: #RenameClassTest #test04NewClassShouldNotExist stamp: 'HAW 10/2/2020 16:19:43'!
PASSED!

!testRun: #RenameClassTest #test04_01NewClassNameShouldNotBeAGlobalVariable stamp: 'HAW 10/2/2020 16:19:43'!
PASSED!

!testRun: #RenameClassTest #test05NewClassShouldNotBeUndeclare stamp: 'HAW 10/2/2020 16:19:44'!
PASSED!

!classDefinition: #OldClassTest07 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:44'!
RefactoringClassTestData subclass: #OldClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRenamed: #OldClassTest07 as: #NewClassTest07 stamp: 'HAW 10/2/2020 16:19:44'!
Smalltalk renameClassNamed: #OldClassTest07 as: #NewClassTest07!

!testRun: #RenameClassTest #test06OldClassIsRenamedToNewClass stamp: 'HAW 10/2/2020 16:19:44'!
PASSED!

!classRemoval: #NewClassTest07 stamp: 'HAW 10/2/2020 16:19:45'!
RefactoringClassTestData subclass: #NewClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest07 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:45'!
RefactoringClassTestData subclass: #OldClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest07 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:45'!
m1 OldClassTest07 new! !

!classRenamed: #OldClassTest07 as: #NewClassTest07 stamp: 'HAW 10/2/2020 16:19:45'!
Smalltalk renameClassNamed: #OldClassTest07 as: #NewClassTest07!
!NewClassTest07 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:45' prior: 50851784!
m1 NewClassTest07 new! !

!testRun: #RenameClassTest #test07OldClassDirectReferencesAreRenamed stamp: 'HAW 10/2/2020 16:19:45'!
PASSED!

!classRemoval: #NewClassTest07 stamp: 'HAW 10/2/2020 16:19:46'!
RefactoringClassTestData subclass: #NewClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest08 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:46'!
RefactoringClassTestData subclass: #OldClassTest08
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest08 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:46'!
m1 #OldClassTest08 size! !

!classRenamed: #OldClassTest08 as: #NewClassTest8 stamp: 'HAW 10/2/2020 16:19:46'!
Smalltalk renameClassNamed: #OldClassTest08 as: #NewClassTest8!
!NewClassTest8 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:46' prior: 50851816!
m1 #NewClassTest8 size! !

!testRun: #RenameClassTest #test08OldClassLiteralReferencesAreRenamed stamp: 'HAW 10/2/2020 16:19:46'!
PASSED!

!classRemoval: #NewClassTest8 stamp: 'HAW 10/2/2020 16:19:47'!
RefactoringClassTestData subclass: #NewClassTest8
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest09 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:47'!
RefactoringClassTestData subclass: #OldClassTest09
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest09 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:47'!
m1 OldClassTest09 new. Object new! !

!classRenamed: #OldClassTest09 as: #NewClassTest09 stamp: 'HAW 10/2/2020 16:19:47'!
Smalltalk renameClassNamed: #OldClassTest09 as: #NewClassTest09!
!NewClassTest09 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:47' prior: 50851848!
m1 NewClassTest09 new. Object new! !

!testRun: #RenameClassTest #test09OtherClassDirectReferencesAreNotRenamed stamp: 'HAW 10/2/2020 16:19:47'!
PASSED!

!classRemoval: #NewClassTest09 stamp: 'HAW 10/2/2020 16:19:47'!
RefactoringClassTestData subclass: #NewClassTest09
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest10 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:47'!
RefactoringClassTestData subclass: #OldClassTest10
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest10 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:47'!
m1 #OldClassTest10 size. #Object size! !

!classRenamed: #OldClassTest10 as: #NewClassTest10 stamp: 'HAW 10/2/2020 16:19:47'!
Smalltalk renameClassNamed: #OldClassTest10 as: #NewClassTest10!
!NewClassTest10 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:48' prior: 50851880!
m1 #NewClassTest10 size. #Object size! !

!testRun: #RenameClassTest #test10OtherLiteralReferencesAreNotRenamed stamp: 'HAW 10/2/2020 16:19:48'!
PASSED!

!classRemoval: #NewClassTest10 stamp: 'HAW 10/2/2020 16:19:48'!
RefactoringClassTestData subclass: #NewClassTest10
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest11 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:48'!
RefactoringClassTestData subclass: #OldClassTest11
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest11 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:48'!
m1 OldClassTest11 new. #OldClassTest11 size! !

!classRenamed: #OldClassTest11 as: #NewClassTest11 stamp: 'HAW 10/2/2020 16:19:48'!
Smalltalk renameClassNamed: #OldClassTest11 as: #NewClassTest11!
!NewClassTest11 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:48' prior: 50851913!
m1 NewClassTest11 new. #NewClassTest11 size! !

!testRun: #RenameClassTest #test11OldClassDirectAndLiteralReferencesAreRenameAtOnce stamp: 'HAW 10/2/2020 16:19:48'!
PASSED!

!classRemoval: #NewClassTest11 stamp: 'HAW 10/2/2020 16:19:49'!
RefactoringClassTestData subclass: #NewClassTest11
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameClassTest #test12CanNotRenameAMetaclass stamp: 'HAW 10/2/2020 16:19:49'!
PASSED!

!testRun: #RenameClassTest #test13NewClassNameHasToBeASymbol stamp: 'HAW 10/2/2020 16:19:49'!
PASSED!

!classDefinition: #OldClassTest14 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:50'!
RefactoringClassTestData subclass: #OldClassTest14
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameClassTest #test14NewClassNameCanNotHaveSpaces stamp: 'HAW 10/2/2020 16:19:50'!
PASSED!

!classRemoval: #OldClassTest14 stamp: 'HAW 10/2/2020 16:19:51'!
RefactoringClassTestData subclass: #OldClassTest14
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:51'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:51'!
m1 ^OldClassTest15! !

!classDefinition: #OldClassTest15 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:51'!
RefactoringClassTestData subclass: #OldClassTest15
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRenamed: #OldClassTest15 as: #NewClassTest15 stamp: 'HAW 10/2/2020 16:19:51'!
Smalltalk renameClassNamed: #OldClassTest15 as: #NewClassTest15!

!testRun: #RenameClassTest #test15ItDoesNotRenameReferencesToClassVariableWithSameName stamp: 'HAW 10/2/2020 16:19:51'!
PASSED!

!classRemoval: #NewClassTest15 stamp: 'HAW 10/2/2020 16:19:51'!
RefactoringClassTestData subclass: #NewClassTest15
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 10/2/2020 16:19:52'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: 'OldClassTest15'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVarSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:52'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:52'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:52'!
m1 ^OldClassTest16! !

!classDefinition: #OldClassTest16 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:52'!
RefactoringClassTestData subclass: #OldClassTest16
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRenamed: #OldClassTest16 as: #NewClassTest16 stamp: 'HAW 10/2/2020 16:19:52'!
Smalltalk renameClassNamed: #OldClassTest16 as: #NewClassTest16!

!testRun: #RenameClassTest #test16ItDoesNotRenameReferencesToClassVariableWithSameNameDefinedInAnySuperclass stamp: 'HAW 10/2/2020 16:19:52'!
PASSED!

!classRemoval: #NewClassTest16 stamp: 'HAW 10/2/2020 16:19:52'!
RefactoringClassTestData subclass: #NewClassTest16
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 10/2/2020 16:19:53'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVarSuperclass stamp: 'HAW 10/2/2020 16:19:53'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: 'OldClassTest16'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVarSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:53'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:53'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:53'!
m1 ^NewClassTest17! !

!classDefinition: #OldClassTest17 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:53'!
RefactoringClassTestData subclass: #OldClassTest17
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRenamed: #OldClassTest17 as: #NewClassTest17 stamp: 'HAW 10/2/2020 16:19:53'!
Smalltalk renameClassNamed: #OldClassTest17 as: #NewClassTest17!

!testRun: #RenameClassTest #test17ItDoesNotRenameReferencesToClassVariableWithSameNameAsNewClassDefinedInAnySuperclass stamp: 'HAW 10/2/2020 16:19:53'!
PASSED!

!classRemoval: #NewClassTest17 stamp: 'HAW 10/2/2020 16:19:54'!
RefactoringClassTestData subclass: #NewClassTest17
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 10/2/2020 16:19:54'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVarSuperclass stamp: 'HAW 10/2/2020 16:19:54'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: 'NewClassTest17'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest18 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:54'!
RefactoringClassTestData subclass: #OldClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest18 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:54'!
m1 ^OldClassTest18! !

!classRenamed: #OldClassTest18 as: #NewClassTest18 stamp: 'HAW 10/2/2020 16:19:54'!
Smalltalk renameClassNamed: #OldClassTest18 as: #NewClassTest18!
!NewClassTest18 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:55' prior: 50852147!
m1 ^NewClassTest18! !

!testRun: #RenameClassTest #test18WorksCorrectlyWhenSourceCodeEndsWithClassToRename stamp: 'HAW 10/2/2020 16:19:55'!
PASSED!

!classRemoval: #NewClassTest18 stamp: 'HAW 10/2/2020 16:19:55'!
RefactoringClassTestData subclass: #NewClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest18 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:55'!
RefactoringClassTestData subclass: #OldClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameClassTest #test19RenamesClassWhenMethodReferencesClassAndDoesNothing stamp: 'HAW 10/2/2020 16:19:55'!
PASSED!

!classRemoval: #OldClassTest18 stamp: 'HAW 10/2/2020 16:19:56'!
RefactoringClassTestData subclass: #OldClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameGlobalTest #test00GlobalCanNotBeClass stamp: 'HAW 10/2/2020 16:19:56'!
PASSED!

!testRun: #RenameGlobalTest #test01NewNameHasToBeDifferentToOldOne stamp: 'HAW 10/2/2020 16:19:56'!
PASSED!

!testRun: #RenameGlobalTest #test02NewNameHasToBeASymbol stamp: 'HAW 10/2/2020 16:19:57'!
PASSED!

!testRun: #RenameGlobalTest #test03NewNameShouldNotBeAClass stamp: 'HAW 10/2/2020 16:19:57'!
PASSED!

!testRun: #RenameGlobalTest #test04NewNameShouldNotBeAGlobalVariable stamp: 'HAW 10/2/2020 16:19:58'!
PASSED!

!testRun: #RenameGlobalTest #test06OldNameIsRenamedToNewName stamp: 'HAW 10/2/2020 16:19:58'!
PASSED!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:59'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:59'!
m1 ^OldNameToRename__! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:59' prior: 50852222!
m1 ^NewNameToRename__! !

!testRun: #RenameGlobalTest #test07OldDirectReferencesAreRenamed stamp: 'HAW 10/2/2020 16:19:59'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:19:59'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:59'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:59'!
m1 ^#OldNameToRename__! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:59' prior: 50852249!
m1 ^#NewNameToRename__! !

!testRun: #RenameGlobalTest #test08OldNameLiteralReferencesAreRenamed stamp: 'HAW 10/2/2020 16:19:59'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:20:00'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameGlobalTest #test09NewNameHasToBeASymbol stamp: 'HAW 10/2/2020 16:20:00'!
PASSED!

!testRun: #RenameGlobalTest #test10NewNameCanNotHaveSpaces stamp: 'HAW 10/2/2020 16:20:00'!
PASSED!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:01'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:01'!
m1 ^OldNameToRename__! !

!testRun: #RenameGlobalTest #test11ItDoesNotRenameReferencesToClassVariableWithSameName stamp: 'HAW 10/2/2020 16:20:01'!
PASSED!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 10/2/2020 16:20:02'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: 'OldNameToRename__'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVarSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:02'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:02'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:02'!
m1 ^OldNameRenamed__! !

!testRun: #RenameGlobalTest #test12ItDoesNotRenameReferencesToClassVariableWithSameNameDefinedInAnySuperclass stamp: 'HAW 10/2/2020 16:20:02'!
PASSED!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 10/2/2020 16:20:02'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVarSuperclass stamp: 'HAW 10/2/2020 16:20:03'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: 'OldNameRenamed__'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameGlobalTest #test13OldNameMustBeDefined stamp: 'HAW 10/2/2020 16:20:03'!
PASSED!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:03'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:03'!
m1 ^OldNameToRename__! !

!testRun: #RenameGlobalTest #test14ItDoesNotRenameReferencesToClassVariableFromClassSideWithSameName stamp: 'HAW 10/2/2020 16:20:03'!
PASSED!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 10/2/2020 16:20:04'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: 'OldNameToRename__'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameGlobalTest #test15OldNameCanNotBeEmpty stamp: 'HAW 10/2/2020 16:20:04'!
PASSED!

!classDefinition: #ClassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:04'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test01CanNotRenameAnInstanceVariableNotDefinedInClass stamp: 'HAW 10/2/2020 16:20:04'!
PASSED!

!classRemoval: #ClassWithoutInstVar stamp: 'HAW 10/2/2020 16:20:05'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:05'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test02NewVariableNameCanNotBeEmpty stamp: 'HAW 10/2/2020 16:20:05'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:06'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:06'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test03NewVariableNameCanNotContainBlanks stamp: 'HAW 10/2/2020 16:20:06'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:06'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:06'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test04NewVariableNameCanNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:20:06'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:07'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:07'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test05ValidNewVariableNameGetBlanksTrimmed stamp: 'HAW 10/2/2020 16:20:07'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:08'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:08'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test06NewVariableNameCanNotBeDefinedInClass stamp: 'HAW 10/2/2020 16:20:08'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:08'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:08'!
RefactoringClassTestData subclass: #SuperclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:08'!
SuperclassWithInstVar subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test07NewVariableNameCanNotBeDefinedInSuperclasses stamp: 'HAW 10/2/2020 16:20:08'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:09'!
SuperclassWithInstVar subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithInstVar stamp: 'HAW 10/2/2020 16:20:09'!
RefactoringClassTestData subclass: #SuperclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:09'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:09'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test08NewVariableNameCanNotBeDefinedInAnySubclass stamp: 'HAW 10/2/2020 16:20:09'!
PASSED!

!classRemoval: #SubclassWithInstVar stamp: 'HAW 10/2/2020 16:20:10'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:10'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:10'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:10'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test09RenameCreatesNewInstanceVariableAndDeletesOldOne stamp: 'HAW 10/2/2020 16:20:10'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:11'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:11'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:11'!
m1 ^old! !

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:11'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:11' prior: 50852610!
m1 ^new! !

!testRun: #RenameInstanceVariableTest #test10ReadReferencesToOldVariableAreRenamed stamp: 'HAW 10/2/2020 16:20:11'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:12'!
m1 old := 10! !

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:12' prior: 50852647!
m1 new := 10! !

!testRun: #RenameInstanceVariableTest #test11WriteReferencesToOldVariableAreRenamed stamp: 'HAW 10/2/2020 16:20:12'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:12'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:12'!
m1 old := 10. ^old! !

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:12' prior: 50852693!
m1 new := 10. ^new! !

!testRun: #RenameInstanceVariableTest #test12ReferencesInSubclassesAreRenamed stamp: 'HAW 10/2/2020 16:20:12'!
PASSED!

!classRemoval: #SubclassWithInstVar stamp: 'HAW 10/2/2020 16:20:13'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:13'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:13'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old keep'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:13'!
m1 keep := old. ^keep! !

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:13'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new keep'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:13' prior: 50852738!
m1 keep := new. ^keep! !

!testRun: #RenameInstanceVariableTest #test13ReferencesToOtherVariablesAreNotRenamed stamp: 'HAW 10/2/2020 16:20:13'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:14'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new keep'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:14'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:14'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test14NewVariableOfExistingInstancesReferToOldVariableValue stamp: 'HAW 10/2/2020 16:20:14'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:15'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:15'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:15'!
m1 | new | new := 10.! !

!testRun: #RenameInstanceVariableTest #test15FailsWhenNewVariableEqualsTemporaryVariableOfAMethodInClass stamp: 'HAW 10/2/2020 16:20:15'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:15'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:15'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:15'!
m1:new! !

!testRun: #RenameInstanceVariableTest #test16FailsWhenNewVariableEqualsArgumentOfAMethodInClass stamp: 'HAW 10/2/2020 16:20:15'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:16'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:16'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:16'!
m1 [ :new | ] value: 1! !

!testRun: #RenameInstanceVariableTest #test17FailsWhenNewVariableEqualsArgumentOfABlockInAMethodInClass stamp: 'HAW 10/2/2020 16:20:16'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:16'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:17'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:17'!
m1 [ | new | ] value! !

!testRun: #RenameInstanceVariableTest #test18FailsWhenNewVariableEqualsTemporaryOfABlockInAMethodInClass stamp: 'HAW 10/2/2020 16:20:17'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:17'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:17'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassOfClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:17'!
ClassToRenameInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassOfClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:17'!
m1 | new | ! !

!testRun: #RenameInstanceVariableTest #test19FailsWhenNewVariableIsHiddenInAnyMethodOfAnySubclass stamp: 'HAW 10/2/2020 16:20:17'!
PASSED!

!classRemoval: #SubclassOfClassToRefactor stamp: 'HAW 10/2/2020 16:20:18'!
ClassToRenameInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:18'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:18'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:18'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:18' overrides: 16806529!
wantsChangeSetLogging ^false! !

!testRun: #RenameInstanceVariableTest #test20ClassChangeIsAddedWhenRenamingAnInstanceVariable stamp: 'HAW 10/2/2020 16:20:18'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:19'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:19'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:19'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:19'!
newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:19'!
oldXyz__!

!testRun: #RenameSelectorTest #test01MessageWithNoSendersCreatesNewMethodAndRemovesOldOne stamp: 'HAW 10/2/2020 16:20:19'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:19'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:20'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20' prior: 50853014!
m1__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:20'!
oldXyz__!

!testRun: #RenameSelectorTest #test02SendersOfMessageAreRenamed stamp: 'HAW 10/2/2020 16:20:20'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:20'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:20'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20' prior: 50853053!
m1__ self oldXyz__. self toKeep! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20' prior: 50853057!
m1__ self newXyz__. self toKeep! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:20'!
oldXyz__!

!testRun: #RenameSelectorTest #test03OtherMessagesSendsAreNotRenamed stamp: 'HAW 10/2/2020 16:20:20'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:21'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameSelectorTest #test04OldSelectorCanNotBeEmpty stamp: 'HAW 10/2/2020 16:20:21'!
PASSED!

!testRun: #RenameSelectorTest #test05NewSelectorCanNotBeEmpty stamp: 'HAW 10/2/2020 16:20:21'!
PASSED!

!testRun: #RenameSelectorTest #test06CanRenameWithoutImplementors stamp: 'HAW 10/2/2020 16:20:22'!
PASSED!

!testRun: #RenameSelectorTest #test07AllImplementorsMustImplementOldSelector stamp: 'HAW 10/2/2020 16:20:22'!
PASSED!

!testRun: #RenameSelectorTest #test08AllSendersShouldSendOldSelector stamp: 'HAW 10/2/2020 16:20:23'!
PASSED!

!testRun: #RenameSelectorTest #test09NewSelectorMustBeOfSameTypeAsOldSelector stamp: 'HAW 10/2/2020 16:20:23'!
PASSED!

!testRun: #RenameSelectorTest #test10NewSelectorMustHaveSameNumberOfArgumentsAsOldSelector stamp: 'HAW 10/2/2020 16:20:23'!
PASSED!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:24'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:24'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:24'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'oldSelectorCategory' stamp: 'HAW 10/2/2020 16:20:24'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:24' prior: 50853121!
m1__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:24'!
oldXyz__!

!testRun: #RenameSelectorTest #test11NewImplementorsKeepMethodCategory stamp: 'HAW 10/2/2020 16:20:24'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:24'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:24'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:24'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25' prior: 50853156!
oldXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25'!
newXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25' prior: 50853168!
newXyz__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:25'!
oldXyz__ self oldXyz__!

!testRun: #RenameSelectorTest #test12RenamesRecursiveMethodsWhenNotInSenders stamp: 'HAW 10/2/2020 16:20:25'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:25'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:25'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25' prior: 50853201!
oldXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25'!
newXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25' prior: 50853209!
oldXyz__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25' prior: 50853213!
newXyz__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:25'!
oldXyz__ self newXyz__!

!testRun: #RenameSelectorTest #test13RenamesRecursiveMethodsWhenInSenders stamp: 'HAW 10/2/2020 16:20:25'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:26'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:26'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:26'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:26'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:26' prior: 50853250!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:26'!
m1 #oldXyz__ size! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:26'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:26' prior: 50853262!
m1 #newXyz__ size! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:26'!
oldXyz__!

!testRun: #RenameSelectorTest #test14RenamesSymbolsEqualToOldSelector stamp: 'HAW 10/2/2020 16:20:26'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:27'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:27'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:27'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27' prior: 50853301!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27' prior: 50853309!
m1__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:27'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:27'!
oldXyz__!

!testRun: #RenameSelectorTest #test15ScopeToRenameCanBeClassOnly stamp: 'HAW 10/2/2020 16:20:27'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:27'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAvoidRenameSelector stamp: 'HAW 10/2/2020 16:20:28'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:28'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28'!
m1__ self oldXyz__! !

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:28'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853377!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853381!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853385!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853389!
m1__ self oldXyz__! !

!classDefinition: #SubclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:28'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853402!
oldXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853406!
m1__ self oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853411!
oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853415!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:28'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28'!
newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853460!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853464!
newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853468!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853472!
newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' prior: 50853381!
m1__ self newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' prior: 50853389!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' prior: 50853406 overrides: 50853485!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' prior: 50853415 overrides: 50853490!
m1__ self newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' prior: 50853433 overrides: 50853495!
m1__ self newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' prior: 50853443 overrides: 50853500!
m1__ self newXyz__! !

!methodRemoval: SuperclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__!

!methodRemoval: SuperclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__!

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__!

!testRun: #RenameSelectorTest #test16ScopeToRenameCanBeHierarchyOnly stamp: 'HAW 10/2/2020 16:20:28'!
PASSED!

!classRemoval: #SubclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:28'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:29'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:29'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAvoidRenameSelector stamp: 'HAW 10/2/2020 16:20:29'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:29'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
m1__ self oldXyz__! !

!classDefinition: #AnotherclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:29'!
RefactoringClassTestData subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
m1__ self oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: '__Refactoring-TestData__-toAvoid' stamp: 'HAW 10/2/2020 16:20:29'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
m1__ self oldXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
newXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29' prior: 50853605!
m1__ self newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29' prior: 50853613!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29' prior: 50853580!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29' prior: 50853588!
m1__ self newXyz__! !

!methodRemoval: AnotherclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__!

!methodRemoval: AnotherclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__!

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__!

!testRun: #RenameSelectorTest #test17ScopeToRenameCanBeCategoryOnly stamp: 'HAW 10/2/2020 16:20:29'!
PASSED!

!classRemoval: #ClassToAvoidRenameSelector stamp: 'HAW 10/2/2020 16:20:30'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:30'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnotherclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:30'!
RefactoringClassTestData subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassToRenameSelector category: '__Refactoring-TestData__-Another' stamp: 'HAW 10/2/2020 16:20:31'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
m1__ self oldXyz__! !

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:31'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853714!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853718!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853722!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853726!
m1__ self oldXyz__! !

!classDefinition: #SubclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:31'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853739!
oldXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853743!
m1__ self oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853748!
oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853752!
m1__ self oldXyz__! !

!classDefinition: #AnotheclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:31'!
RefactoringClassTestData subclass: #AnotheclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__! !
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
m1__ self oldXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
m1__ self oldXyz__! !

!classDefinition: #OtherCatClassToRenameSelector category: '__Refactoring-TestData__-Another' stamp: 'HAW 10/2/2020 16:20:31'!
RefactoringClassTestData subclass: #OtherCatClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__! !
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
m1__ self oldXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: '__Refactoring-TestData__-toAvoid' stamp: 'HAW 10/2/2020 16:20:31'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
m1__ self oldXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853857!
newXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853881!
newXyz__! !
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853797!
m1__ self newXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853805!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853743 overrides: 50853718!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853752 overrides: 50853726!
m1__ self newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853770 overrides: 50853899!
m1__ self newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853718!
m1__ self newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853726!
m1__ self newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853780 overrides: 50853904!
m1__ self newXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853831!
m1__ self newXyz__! !
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853823!
m1__ self newXyz__! !

!methodRemoval: AnotheclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: SuperclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: AnotheclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: OtherCatClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: OtherCatClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: SuperclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!testRun: #RenameSelectorTest #test18ScopeToRenameCanBeCategoriesAndHierarchyOnly stamp: 'HAW 10/2/2020 16:20:31'!
PASSED!

!classRemoval: #ClassToAvoidRenameSelector stamp: 'HAW 10/2/2020 16:20:31'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!

!classRemoval: #AnotheclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:32'!
RefactoringClassTestData subclass: #AnotheclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SubclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:32'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:32'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:33'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!

!classRemoval: #OtherCatClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:33'!
RefactoringClassTestData subclass: #OtherCatClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:33'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
m1__ self oldXyz__! !

!classDefinition: #AnotherclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:33'!
RefactoringClassTestData subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
m1__ self oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
newXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33' prior: 50854034!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33' prior: 50854042!
m1__ self newXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33' prior: 50854059!
m1__ self newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33' prior: 50854067!
m1__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__!

!methodRemoval: AnotherclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__!

!methodRemoval: AnotherclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__!

!testRun: #RenameSelectorTest #test19ScopeToRenameCanBeTheCompleteSystem stamp: 'HAW 10/2/2020 16:20:33'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:34'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnotherclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:34'!
RefactoringClassTestData subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameSelectorTest #test20CanNotRenameToItSelf stamp: 'HAW 10/2/2020 16:20:34'!
PASSED!

!testRun: #RenameSelectorTest #test21NewSelectorCanNotBeImplementedOnAnyClassImplementingOldSelector stamp: 'HAW 10/2/2020 16:20:34'!
PASSED!

!testRun: #RenameSelectorTest #test22WarnsWhenOverridesSuperclassImplementation stamp: 'HAW 10/2/2020 16:20:35'!
PASSED!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:35'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:35'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:35'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:35' prior: 50854158!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:35'!
m1 ^#(#oldXyz__)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:35'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:35' prior: 50854170!
m1 ^#(#newXyz__)! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:35'!
oldXyz__!

!testRun: #RenameSelectorTest #test23OldSelectorIsRenamedWhenDefinedInLiteralArray stamp: 'HAW 10/2/2020 16:20:35'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:36'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:36'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:36'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:36'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:36' prior: 50854205!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:36'!
m1 ^#(#oldXyz__ #oldXyz__)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:36'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:36' prior: 50854217!
m1 ^#(#newXyz__ #newXyz__)! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:36'!
oldXyz__!

!testRun: #RenameSelectorTest #test24OldSelectorIsRenamedWhenDefinedInLiteralArrayMoreThanOnce stamp: 'HAW 10/2/2020 16:20:36'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:36'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:37'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37' prior: 50854253!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
m1 ^#(#oldXyz__ #oldXyz__), #(#oldXyz__ #oldXyz__)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37' prior: 50854265!
m1 ^#(#newXyz__ #newXyz__), #(#newXyz__ #newXyz__)! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:37'!
oldXyz__!

!testRun: #RenameSelectorTest #test25OldSelectorIsRenamedWhenDefinedInMoreThanOneLiteralArrayMoreThanOnce stamp: 'HAW 10/2/2020 16:20:37'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:37'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:37'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37' prior: 50854303!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
m1 ^#(#oldXyz__ #oldXyz__1)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37' prior: 50854315!
m1 ^#(#newXyz__ #oldXyz__1)! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:37'!
oldXyz__!

!testRun: #RenameSelectorTest #test26DoesNotRenameLiteralsThatBeginsWithOldSelectorInsideLiteralArray stamp: 'HAW 10/2/2020 16:20:37'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:38'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:38'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:38'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:38'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:38' prior: 50854351!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:38'!
m1 ^#(#oldXyz__ #oldXyz__:)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:38'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:38' prior: 50854363!
m1 ^#(#newXyz__ #oldXyz__:)! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:38'!
oldXyz__!

!testRun: #RenameSelectorTest #test27DoesNotRenameLiteralsThatBeginsWithOldSelectorAndEndWithColonInsideLiteralArray stamp: 'HAW 10/2/2020 16:20:38'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:39'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:39'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39'!
&& aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39'!
m1 ^self && 1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39'!
abc: aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39' prior: 50854403!
m1 ^self abc: 1! !

!methodRemoval: ClassToRenameSelector #&& stamp: 'HAW 10/2/2020 16:20:39'!
&& aParameter!

!testRun: #RenameSelectorTest #test28CanRenameFromBinaryToKeywordOfOneParameter stamp: 'HAW 10/2/2020 16:20:39'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:39'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:39'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39'!
abc: aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39'!
m1 ^self abc: 1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39'!
&& aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39' prior: 50854442!
m1 ^self && 1! !

!methodRemoval: ClassToRenameSelector #abc: stamp: 'HAW 10/2/2020 16:20:39'!
abc: aParameter!

!testRun: #RenameSelectorTest #test29CanRenameFromKeywordOfOneParameterToBinary stamp: 'HAW 10/2/2020 16:20:39'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:40'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:40'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:40'!
&& aParameter! !

!testRun: #RenameSelectorTest #test30CanNotRenameFromBinaryToKeywordOfMoreThanOneParameter stamp: 'HAW 10/2/2020 16:20:40'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:41'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:41'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41'!
abc: p1 def: p2! !

!testRun: #RenameSelectorTest #test31CanNotRenameFromKeywordOfOneParameterToBinary stamp: 'HAW 10/2/2020 16:20:41'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:41'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:41'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41'!
m1__ self oldXyz__! !

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:41'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854526!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854530!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854534!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854538!
m1__ self oldXyz__! !

!classDefinition: #SubclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:41'!
SuperclassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854526!
oldXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854530!
m1__ self oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854534!
oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854538!
m1__ self oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41'!
newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854596!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854600!
newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854596!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854600!
newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' prior: 50854530!
m1__ self newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' prior: 50854538!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' prior: 50854555 overrides: 50854621!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' prior: 50854564 overrides: 50854626!
m1__ self newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' prior: 50854582 overrides: 50854621!
m1__ self newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' prior: 50854592 overrides: 50854626!
m1__ self newXyz__! !

!methodRemoval: SuperclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__!

!methodRemoval: SuperclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__!

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__!

!testRun: #RenameSelectorTest #test32HierarchyScopeRenamesSelectorsFromSuperclassDefiningSelector stamp: 'HAW 10/2/2020 16:20:41'!
PASSED!

!classRemoval: #SubclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:42'!
SuperclassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:42'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:43'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:43'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:43'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
oldXyz__! !
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
m1__ self oldXyz__! !
!ClassToAvoidRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
oldXyz__! !
!ClassToAvoidRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
m1__ self oldXyz__! !
!ClassToAvoidRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43' overrides: 16782761!
compilerClass ^nil! !
!ClassToAvoidRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
newXyz__! !
!ClassToAvoidRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43' prior: 50854742!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43' prior: 50854709!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43' prior: 50854717!
m1__ self newXyz__! !

!methodRemoval: ClassToAvoidRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:43'!
oldXyz__!

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:43'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:43'!
oldXyz__!

!testRun: #RenameSelectorTest #test33DoNotRenameSendersAndImplementorsWhoseCompilerClassIsDifferentToCompiler stamp: 'HAW 10/2/2020 16:20:43'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:43'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAvoidRenameSelector stamp: 'HAW 10/2/2020 16:20:44'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameTemporaryTest #test01VariableToRenameHasToBeDefined stamp: 'HAW 10/2/2020 16:20:44'!
PASSED!

!testRun: #RenameTemporaryTest #test02NewVariableNameCanNotBeEmpty stamp: 'HAW 10/2/2020 16:20:44'!
PASSED!

!testRun: #RenameTemporaryTest #test03NewVariableHasToBeValid stamp: 'HAW 10/2/2020 16:20:44'!
PASSED!

!testRun: #RenameTemporaryTest #test04NewVariableNameCanNotBeDefinedInMethod stamp: 'HAW 10/2/2020 16:20:45'!
PASSED!

!classDefinition: #ClassToRenameTemp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:45'!
RefactoringClassTestData subclass: #ClassToRenameTemp
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameTemporaryTest #test05FailsIfNewTemporaryIsEqualToInstanceVariableInClass stamp: 'HAW 10/2/2020 16:20:45'!
PASSED!

!classRemoval: #ClassToRenameTemp stamp: 'HAW 10/2/2020 16:20:46'!
RefactoringClassTestData subclass: #ClassToRenameTemp
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRefactorSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:46'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameTemp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:46'!
ClassToRefactorSuperclass subclass: #ClassToRenameTemp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameTemporaryTest #test06FailsIfNewTemporaryIsEqualToInstanceVariableInAnySuperclass stamp: 'HAW 10/2/2020 16:20:46'!
PASSED!

!classRemoval: #ClassToRenameTemp stamp: 'HAW 10/2/2020 16:20:47'!
ClassToRefactorSuperclass subclass: #ClassToRenameTemp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRefactorSuperclass stamp: 'HAW 10/2/2020 16:20:47'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameTemporaryTest #test07RenameCreatesNewTemporaryVariableAndDeletesOldOne stamp: 'HAW 10/2/2020 16:20:47'!
PASSED!

!testRun: #RenameTemporaryTest #test08RenameChangesReferencesFromOldVariableToNewVariable stamp: 'HAW 10/2/2020 16:20:47'!
PASSED!

!testRun: #RenameTemporaryTest #test09RenamesArguments stamp: 'HAW 10/2/2020 16:20:48'!
PASSED!

!testRun: #RenameTemporaryTest #test10NewVariableNameCanNotBeDefinedAsBlockArgument stamp: 'HAW 10/2/2020 16:20:48'!
PASSED!

!testRun: #RenameTemporaryTest #test11RenamesBlockArguments stamp: 'HAW 10/2/2020 16:20:49'!
PASSED!

!testRun: #RenameTemporaryTest #test12RenamesBlockTemporaries stamp: 'HAW 10/2/2020 16:20:49'!
PASSED!

!testRun: #RenameTemporaryTest #test13OldNodeMustBePartOfMethodNode stamp: 'HAW 10/2/2020 16:20:49'!
PASSED!

!testRun: #RenameTemporaryTest #test14OldVariableNodeMustBeArgOrTempNode stamp: 'HAW 10/2/2020 16:20:50'!
PASSED!

!testRun: #RenameTemporaryTest #test15RenameVariablesWithSameNameInDifferentBlocksCorrectly stamp: 'HAW 10/2/2020 16:20:50'!
PASSED!

!testRun: #RenameTemporaryTest #test16CantRenameVariableToANameAlreadyUsedInAnUpperBlock stamp: 'HAW 10/2/2020 16:20:51'!
PASSED!

!testRun: #RenameTemporaryTest #test17RenamesOneCharVariableAfterAReturnWithoutCharsAfterThatCorrectly stamp: 'HAW 10/2/2020 16:20:51'!
PASSED!

!testRun: #RenameTemporaryTest #test18CantRenameVariableToAReservedName stamp: 'HAW 10/2/2020 16:20:51'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:52'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:20:52'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test02ClassesWithNoReferencesAndNoSubclassesAreSafetelyRemoved stamp: 'HAW 10/2/2020 16:20:52'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:53'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:20:53'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test03RemovingTheMetaclassRemovesTheClass stamp: 'HAW 10/2/2020 16:20:53'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:53'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:53'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:53'!
m1 ^ClassToRemove! !

!testRun: #SafelyRemoveClassTest #test04CanNotRemoveClassWithReferencesOutsideHierarchy stamp: 'HAW 10/2/2020 16:20:54'!
PASSED!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:20:54'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassToRemove stamp: 'HAW 10/2/2020 16:20:55'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:55'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:55'!
m1 ^ClassToRemove! !

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:20:55'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test05CanRemoveClassWithReferencesFromItself stamp: 'HAW 10/2/2020 16:20:55'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:55'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:55'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test06WarnIfClassToRemoveHasSubclasses stamp: 'HAW 10/2/2020 16:20:55'!
PASSED!

!classRemoval: #ClassToRemoveSubclass stamp: 'HAW 10/2/2020 16:20:56'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:20:56'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:56'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:56'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassToRemoveSubclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:56'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassToRemoveSubclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:56'!
m1 ^ClassToRemoveSubclass! !

!testRun: #SafelyRemoveClassTest #test07CanNotRemoveClassWhenSubclassesHaveReferencesOutsideTheHierarchy stamp: 'HAW 10/2/2020 16:20:57'!
PASSED!

!classRemoval: #ClassToRemoveSubclass stamp: 'HAW 10/2/2020 16:20:57'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:20:58'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassToRemoveSubclass stamp: 'HAW 10/2/2020 16:20:58'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:58'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:58'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveSubclass stamp: 'HAW 10/2/2020 16:20:58'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:20:59'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test08HierarchyIsRemovedIfSubclassesWarningIsResumed stamp: 'HAW 10/2/2020 16:20:59'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:59'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:59'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:59'!
m1 ^ClassToRemoveSubclass! !
!ClassToRemoveSubclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:59'!
m2 ^ClassToRemove! !

!classRemoval: #ClassToRemoveSubclass stamp: 'HAW 10/2/2020 16:20:59'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:21:00'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test09CanRemoveIfReferencesToSubclassesAreInTheHierarchy stamp: 'HAW 10/2/2020 16:21:00'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:00'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:00'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:00'!
m1 ^#ClassToRemove! !

!testRun: #SafelyRemoveClassTest #test10WarnWhenHasReferencesToName stamp: 'HAW 10/2/2020 16:21:00'!
PASSED!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:21:01'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassToRemove stamp: 'HAW 10/2/2020 16:21:01'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:01'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:01'!
m1| a |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:01' prior: 50855245!
m1 ! !

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:01'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #TemporaryToInstanceVariableTest #test01ApplyChangesTemporaryVariableToInstanceVariable stamp: 'HAW 10/2/2020 16:21:01'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:02'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:02'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:02'!
m1| a |a := 2.
	^a! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:02' prior: 50855282!
m1 a := 2.
	^a! !

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:02'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #TemporaryToInstanceVariableTest #test02ApplyDoesntChangeRestOfSourceCode stamp: 'HAW 10/2/2020 16:21:02'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:03'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:03'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:03'!
m1! !

!testRun: #TemporaryToInstanceVariableTest #test03TemporaryToChangeShouldExist stamp: 'HAW 10/2/2020 16:21:03'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:03'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:03'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:03'!
m1| a |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:03'!
m2| a |! !

!testRun: #TemporaryToInstanceVariableTest #test04TemporaryShouldNotExistInOtherClassMethod stamp: 'HAW 10/2/2020 16:21:03'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:04'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:04'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:04'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:04'!
m1| a |! !

!testRun: #TemporaryToInstanceVariableTest #test05InstanceVariableShouldNotExistInSubclass stamp: 'HAW 10/2/2020 16:21:04'!
PASSED!

!classRemoval: #SubclassToRefactor stamp: 'HAW 10/2/2020 16:21:05'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:05'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:05'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:05'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:05'!
m1| a |! !
!SubclassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:05'!
m2| a |! !

!testRun: #TemporaryToInstanceVariableTest #test06TemporaryShouldNotExistInSubclassMethod stamp: 'HAW 10/2/2020 16:21:05'!
PASSED!

!classRemoval: #SubclassToRefactor stamp: 'HAW 10/2/2020 16:21:06'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:06'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:06'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:06'!
m1| a |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:06' prior: 50855455!
m1 ! !

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:06'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #TemporaryToInstanceVariableTest #test07RemovesPipesWhenRemovingLastTemporaryInMethod stamp: 'HAW 10/2/2020 16:21:06'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:07'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:07'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:07'!
m1| a b |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:07' prior: 50855492!
m1|  b |! !

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:07'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #TemporaryToInstanceVariableTest #test08DoesntRemoveOtherVariables stamp: 'HAW 10/2/2020 16:21:07'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:08'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:08'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:08'!
m1
	[ | a | ].
	[ | a | ].! !

!testRun: #TemporaryToInstanceVariableTest #test09TemporaryShouldNotExistInOtherBlockInSameMethod stamp: 'HAW 10/2/2020 16:21:08'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:08'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:08'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:08'!
m1
	[ | a | ].! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:08' prior: 50855554!
m1
	[   ].! !

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:08'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #TemporaryToInstanceVariableTest #test10RemovesPipesWhenRemovingLastTemporaryInBlock stamp: 'HAW 10/2/2020 16:21:08'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:09'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:09'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:09'!
m1 [ | a | ]. [ :a | ].! !

!testRun: #TemporaryToInstanceVariableTest #test11TemporaryShouldNotExistAsArgumentInOtherBlocksInSameMethod stamp: 'HAW 10/2/2020 16:21:09'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:10'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:10'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:10'!
m1: a! !

!testRun: #TemporaryToInstanceVariableTest #test12CantExtractArgument stamp: 'HAW 10/2/2020 16:21:10'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:10'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:11'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:11'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:11'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test01MethodObjectClassNameMustNotBeEmpty stamp: 'HAW 10/2/2020 16:21:11'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:11'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:11'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:12'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:12'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:12'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test02MethodObjectClassNameMustBeASymbol stamp: 'HAW 10/2/2020 16:21:12'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:12'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:12'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:12'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:12'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:13'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test03MethodObjectClassNameMustStartWithUppercaseLetter stamp: 'HAW 10/2/2020 16:21:13'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:13'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:13'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:13'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:13'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:13'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test04MethodObjectClassNameMustNotHaveSeparators stamp: 'HAW 10/2/2020 16:21:13'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:14'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:14'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:14'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:14'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:14'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test05MethodObjectClassNameMustNotExist stamp: 'HAW 10/2/2020 16:21:14'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:15'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:15'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:15'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:15'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:15'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test06AllVariablesToParametrizeMustHaveACorrespondingMethodObjectInstanceVariableName stamp: 'HAW 10/2/2020 16:21:15'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:16'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:16'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:16'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:16'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:16'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test07AllInstanceVariableNamesMustCorrespondToVariableToParametrize stamp: 'HAW 10/2/2020 16:21:16'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:17'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:17'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:17'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:17'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:17'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test08MethodObjectInstanceVariableNamesMustNotBeEmpty stamp: 'HAW 10/2/2020 16:21:17'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:18'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:18'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:18'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:18'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:18'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test09MethodObjectInstanceVariableNamesCanNotContainBlanks stamp: 'HAW 10/2/2020 16:21:18'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:19'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:19'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:19'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:19'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:19'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test10MethodObjectInstanceVariableNamesCanNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:21:19'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:20'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:20'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:20'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: 'anInstVarName'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:20'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:20'!
m1
		self isNil.! !

!testRun: #ExtractToMethodObjectTest #test11MethodObjectInstanceVariableNamesCanNotBeDefinedInSuperclasses stamp: 'HAW 10/2/2020 16:21:20'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:21'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: 'anInstVarName'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:21'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:21'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:21'!
m1
		self isNil.
		anInstVar isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:21'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test12MethodObjectInstanceVariableNamesCanNotBeDuplicated stamp: 'HAW 10/2/2020 16:21:21'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:22'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:21:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:22'!
m1
		| aTemporal |

		aTemporal := 1.
		self isNil.

		^aTemporal + 2! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:22'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test13MethodObjectInstanceVariableNamesCanNotBeNamedAsMethodTemporal stamp: 'HAW 10/2/2020 16:21:22'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:23'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:21:23'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:23'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:23'!
m1
		^[
			| aBlockTemporal |

			self isNil.
			aBlockTemporal.]! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:23'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test14MethodObjectInstanceVariableNamesCanNotBeNamedAsBlockTemporal stamp: 'HAW 10/2/2020 16:21:23'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:24'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:21:24'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:24'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:24'!
m1
		^[:aBlockArgument |
			self isNil.
			aBlockArgument.]! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:24'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test15MethodObjectInstanceVariableNamesCanNotBeNamedAsBlockArgument stamp: 'HAW 10/2/2020 16:21:24'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:25'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:21:25'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:25'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:25'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:25'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test16MethodObjectInstanceCreationMessageMustHaveAKeywordForEveryVariableToParametrize stamp: 'HAW 10/2/2020 16:21:25'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:26'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:26'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:26'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:26'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:26'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test17MethodObjectInstanceCreationMessageMustHaveOnlyOneKeywordForEveryVariableToParametrize stamp: 'HAW 10/2/2020 16:21:26'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:26'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:27'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:27'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:27'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:27'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test18MethodObjectInstanceCreationMessageMustNotHaveKeywordForAnUnknownVariableToParametrize stamp: 'HAW 10/2/2020 16:21:27'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:27'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:28'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:28'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test19MethodObjectInstanceCreationMessageKeywordsCanNotHaveInvalidCharacters stamp: 'HAW 10/2/2020 16:21:28'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:28'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:29'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:29'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:29'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:29'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test20MethodObjectInstanceCreationMessageSelectorStartsWithAnInvalidStartOfSelector stamp: 'HAW 10/2/2020 16:21:29'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:29'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:30'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:30'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:30'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:30'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test21MethodObjectInstanceCreationMessageKeywordsCannotBeEmpty stamp: 'HAW 10/2/2020 16:21:30'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:30'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:31'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:31'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:31'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:31'!
m1! !

!testRun: #ExtractToMethodObjectTest #test22MethodObjectSuperclassCannotBeMeta stamp: 'HAW 10/2/2020 16:21:31'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:31'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:32'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:32'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:32'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:32'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:32' prior: 50856507!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test23CreatesMethodObjectClass stamp: 'HAW 10/2/2020 16:21:32'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:32'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:33'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:33'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:33'!
m1! !

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:33'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:33'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:33' prior: 50856577!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test24CreatesMethodObjectClassAsSubclassOfTheChosenSuperclass stamp: 'HAW 10/2/2020 16:21:33'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:34'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:34'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:34'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:34'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:34'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:34'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:34' prior: 50856630!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test25CreatesMethodObjectClassInTheChosenCategory stamp: 'HAW 10/2/2020 16:21:34'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:35'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:35'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:35'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:36'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:36'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:36'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:36'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:36'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:36'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:36'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:36' prior: 50856692!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test26MethodObjectClassInstanceCreationMessageReceivesTheSameNumberOfArgumentsAsVariablesToParametrizeInMethodToExtract stamp: 'HAW 10/2/2020 16:21:36'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:36'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:37'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:37'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:37'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:37'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:37'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:37'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:37'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:37'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:37'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:37' prior: 50856768!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test27MethodObjectClassInstanceCreationMessageSelectorConsistsOfTheChosenKeywords stamp: 'HAW 10/2/2020 16:21:37'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:38'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:38'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:38'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:38'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:38'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:38'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:38'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:38'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:38'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:38'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:38' prior: 50856843!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test28MethodObjectClassInstanceCreationMessageCreatesARefactoringInstance stamp: 'HAW 10/2/2020 16:21:38'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:39'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:39'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:39'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:39'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:39'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:39'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:39'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:39'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:39'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:39'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:39' prior: 50856918!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test29MethodObjectInitializationMessageReceivesTheSameNumberOfArgumentsAsVariablesToParametrizeInMethodToExtract stamp: 'HAW 10/2/2020 16:21:39'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:40'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:40'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:41'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:41'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:41'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:41'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:41'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:41'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:41'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:41'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:41' prior: 50856994!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test30MethodObjectInitializationMessageSelectorConsistsOfTheChosenKeywordsPrefixedWithInitializationPrefix stamp: 'HAW 10/2/2020 16:21:41'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:41'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:41'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:42'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:42'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:42'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:42'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:42'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:42'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:42'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:42'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:42' prior: 50857070!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test31MethodObjectInitializationMessageAssignsTheInstanceVariables stamp: 'HAW 10/2/2020 16:21:42'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:42'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:43'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:43'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:43'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:43'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:43'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:43'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:43'!
aCustomEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:43' prior: 50857145!
m1
	(MethodObject new) aCustomEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test32MethodObjectEvaluationMessageHasTheChosenSelector stamp: 'HAW 10/2/2020 16:21:43'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:44'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:44'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:44'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:44'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:44'!
m1
	self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:44'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:44'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:44'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:44'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:44'!
defaultEvaluationSelector
	thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:44' prior: 50857207!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test33MethodObjectEvaluationMethodSourceCodeHasTheSameFormatAsTheExtractedMethod stamp: 'HAW 10/2/2020 16:21:44'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:45'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:45'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:45'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:45'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:45'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:45'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:45'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:45'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:45'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:45'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:45' prior: 50857282!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test34MethodObjectEvaluationMethodSourceCodeReferencesCorrespondingInstanceVariableInsteadOfSelf stamp: 'HAW 10/2/2020 16:21:45'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:46'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:46'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:47'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:47'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:47'!
m1
		anInstVar isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:47'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:47'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:47'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:47'!
initializeWith: aParamName
	aCorrespondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:47'!
defaultEvaluationSelector
		aCorrespondingInstVar isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:47' prior: 50857358!
m1
	(MethodObject with: anInstVar) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test35MethodObjectEvaluationMethodSourceCodeReferencesCorrespondingInstanceVariableInsteadOfClassToRefactorInstanceVariable stamp: 'HAW 10/2/2020 16:21:47'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:47'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:48'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:48'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:48'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:48'!
m1: anArg
		anArg isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:48'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:48'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'anArgReplacement'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:48'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:48'!
initializeWith: aParamName
	anArgReplacement := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:48'!
defaultEvaluationSelector
		anArgReplacement isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:48' prior: 50857436!
m1: anArg
	(MethodObject with: anArg) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test36MethodObjectEvaluationMethodSourceCodeReferencesCorrespondingInstanceVariableInsteadOfExtractedMethodArgument stamp: 'HAW 10/2/2020 16:21:48'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:49'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'anArgReplacement'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:49'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:49'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #APool category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:49'!
SharedPool subclass: #APool
	instanceVariableNames: ''
	classVariableNames: 'APoolVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:49'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'APool'
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:49'!
m1
		APoolVar isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:49'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:49'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:49'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:49'!
initializeWith: aParamName
	aCorrespondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:49'!
defaultEvaluationSelector
		aCorrespondingInstVar isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:49' prior: 50857521!
m1
	(MethodObject with: APoolVar) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test37MethodObjectEvaluationMethodSourceCodeReferencesCorrespondingInstanceVariableInsteadOfClassToRefactorPoolVariable stamp: 'HAW 10/2/2020 16:21:49'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:50'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'APool'
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:50'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:50'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #APool stamp: 'HAW 10/2/2020 16:21:51'!
SharedPool subclass: #APool
	instanceVariableNames: ''
	classVariableNames: 'APoolVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:51'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:51'!
m1
		"A comment talking about self"
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:51'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:51'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:51'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:51'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:51'!
defaultEvaluationSelector
		"A comment talking about self"
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:51' prior: 50857605!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test38MethodObjectEvaluationMethodSourceCodeCommentsReferencingParametrizedVariableAreNotReplaced stamp: 'HAW 10/2/2020 16:21:51'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:51'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:52'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:52'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:52'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test39MethodObjectEvaluationMethodSourceCodePreservesBlockArgumentsShadowing stamp: 'HAW 10/2/2020 16:21:52'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:52'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:52'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test40MethodObjectEvaluationMethodSourceCodePreservesBlockTemporalsShadowing stamp: 'HAW 10/2/2020 16:21:52'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:53'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:53'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:53'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:53'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:53'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:53'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:53' prior: 50857723!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test41RefactoredMethodUnarySelectorIsPreserved stamp: 'HAW 10/2/2020 16:21:53'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:54'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:54'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:54'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:54'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:54'!
!!@ anArg ^anArg.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:54'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:54'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:54'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:54'!
initializeWith: aParamName
	correspondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:54'!
defaultEvaluationSelector ^correspondingInstVar.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:54' prior: 50857784!
!!@ anArg
	^(MethodObject with: anArg) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test42RefactoredMethodBinarySelectorIsPreserved stamp: 'HAW 10/2/2020 16:21:54'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:55'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:55'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:56'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:56'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:56'!
m1: anArg ^anArg.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:56'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:56'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:56'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:56'!
initializeWith: aParamName
	correspondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:56'!
defaultEvaluationSelector ^correspondingInstVar.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:56' prior: 50857860!
m1: anArg
	^(MethodObject with: anArg) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test43RefactoredMethodKeywordSelectorIsPreserved stamp: 'HAW 10/2/2020 16:21:56'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:56'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:56'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:57'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:57'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:57'!
!!@ anArg ^anArg.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:57'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:57'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:57'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:57'!
initializeWith: aParamName
	correspondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:57'!
defaultEvaluationSelector ^correspondingInstVar.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:57' prior: 50857936!
!!@ anArg
	^(MethodObject with: anArg) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test44WhenBinaryMethodIsRefactoredArgumentNameIsPreserved stamp: 'HAW 10/2/2020 16:21:57'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:57'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:58'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:58'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:58'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:58'!
m1: anArg ^anArg.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:58'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:58'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:58'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:58'!
initializeWith: aParamName
	correspondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:58'!
defaultEvaluationSelector ^correspondingInstVar.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:58' prior: 50858012!
m1: anArg
	^(MethodObject with: anArg) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test45WhenKeywordsMethodIsRefactoredArgumentNamesArePreserved stamp: 'HAW 10/2/2020 16:21:58'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:59'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:59'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:59'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:59'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:59'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:59'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:59'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:59'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:59' prior: 50858088!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test46WhenThereAreNoVariablesToParametrizeTheRefactoredMethodUsesTheNewMessageToCreateTheMethodObjectInstance stamp: 'HAW 10/2/2020 16:21:59'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:00'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:00'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:00'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:00'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:00'!
m1 ^self isNil! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:00'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:00'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:00'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:00'!
initializeWith: aParamName
	correspondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:00'!
defaultEvaluationSelector ^correspondingInstVar isNil! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:00' prior: 50858151!
m1
	^(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test47WhenThereAreVariablesToParametrizeTheRefactoredMethodUsesTheChosenMessageToCreateTheMethodObjectInstance stamp: 'HAW 10/2/2020 16:22:00'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:01'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:01'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:02'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:02'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:02'!
m1: anArg ^(self isNil) or: (anArg isNil)! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:02'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:02'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'anArgCorrespondingInstVar selfCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:02'!
with: anArgParamName andWith: aSelfParamName
	^self new initializeWith: anArgParamName andWith: aSelfParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:02'!
initializeWith: anArgParamName andWith: aSelfParamName
	anArgCorrespondingInstVar := anArgParamName.
	selfCorrespondingInstVar := aSelfParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:02'!
defaultEvaluationSelector ^(selfCorrespondingInstVar isNil) or: (anArgCorrespondingInstVar isNil)! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:02' prior: 50858227!
m1: anArg
	^(MethodObject with: anArg andWith: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test48WhenThereAreMultipleVariablesToParametrizeTheRefactoredMethodPassesTheVariablesInTheChosenOrderToTheMessageToCreateTheMethodObjectInstance stamp: 'HAW 10/2/2020 16:22:02'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:02'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'anArgCorrespondingInstVar selfCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:03'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:03'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:03'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:03'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:03'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:03'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:03'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:03' prior: 50858314!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test49TheRefactoredMethodUsesTheChosenEvaluationSelectorToEvaluateTheMethodObjectInstance stamp: 'HAW 10/2/2020 16:22:03'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:04'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:04'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:04'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:04'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:04'!
m1
		| a |

		a := 1 + 1.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:04'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:04'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:04'!
defaultEvaluationSelector
		| a |

		a := 1 + 1.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:04' prior: 50858377!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test50TheRefactoredMethodPreservesTheImplicitReturn stamp: 'HAW 10/2/2020 16:22:04'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:05'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:05'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:05'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:05'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:05'!
m1 ^super isNil! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:05'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test51TheMethodToExtractMustNotReferenceSuper stamp: 'HAW 10/2/2020 16:22:05'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:06'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:06'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:06'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:06'!
m1
		anInstVar := 2.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:06'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test52TheMethodToExtractMustNotContainInstVarAssignments stamp: 'HAW 10/2/2020 16:22:06'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:07'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:07'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:07'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:07'!
m1
		AClassVar := 2.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:07'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test53TheMethodToExtractMustNotContainClassVarAssignments stamp: 'HAW 10/2/2020 16:22:07'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:08'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:08'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #APool category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:08'!
SharedPool subclass: #APool
	instanceVariableNames: ''
	classVariableNames: 'APoolVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:08'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'APool'
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:08'!
m1
		APoolVar := 2.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:08'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test54TheMethodToExtractMustNotContainPoolVarAssignments stamp: 'HAW 10/2/2020 16:22:08'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:09'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'APool'
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:09'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #APool stamp: 'HAW 10/2/2020 16:22:10'!
SharedPool subclass: #APool
	instanceVariableNames: ''
	classVariableNames: 'APoolVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:10'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:10'!
m1
		AClassVar isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:10'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:10'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:10'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:10'!
initializeWith: aParamName
	aCorrespondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:10'!
defaultEvaluationSelector
		aCorrespondingInstVar isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:10' prior: 50858610!
m1
	(MethodObject with: AClassVar) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test55MethodObjectEvaluationMethodSourceCodeReferencesCorrespondingInstanceVariableInsteadOfClassToRefactorClassVariable stamp: 'HAW 10/2/2020 16:22:10'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:10'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:11'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:11'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:11'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:11'!
m1 self = anInstVar ifTrue: [^1] ifFalse: [^2]! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:11'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test56MethodObjectInstanceCreationMessageParameterNamesMustNotRepeat stamp: 'HAW 10/2/2020 16:22:11'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:12'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:12'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:12'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:12'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:12'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test57MethodObjectInstanceCreationMessageParameterNamesMustNotBeEmpty stamp: 'HAW 10/2/2020 16:22:12'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:12'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:13'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:13'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:13'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:13'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test58MethodObjectInstanceCreationMessageParameterNamesMustNotContainSeparators stamp: 'HAW 10/2/2020 16:22:13'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:13'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:14'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:14'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:14'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:14'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test59MethodObjectInstanceCreationMessageParameterNamesMustNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:22:14'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:14'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:15'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:15'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:15'!
m1 self = anInstVar ifTrue: [^1] ifFalse: [^2]! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:15'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test60MethodObjectInstanceCreationMessageParameterNamesMustNotBeEqualToAMethodObjectInstanceVariable stamp: 'HAW 10/2/2020 16:22:15'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:15'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:16'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:16'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:16'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:16'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:16'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:16'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:16'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:16'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:16' prior: 50858887!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test61MethodObjectClassInstanceCreationMessageParameterNamesAreTheChosenOnes stamp: 'HAW 10/2/2020 16:22:16'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:16'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:17'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:17'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:17'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:17'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:17'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:17'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:17'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:17'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:17'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:17' prior: 50858962!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test62MethodObjectInstanceCreationMessageParameterNamesAreTheChosenOnes stamp: 'HAW 10/2/2020 16:22:17'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:18'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:18'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:18'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:18'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:18'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:18'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:18'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:18'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:18'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:18'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:18' prior: 50859037!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test63MethodObjectInstanceInitializationMessageIsCategorizedAsInitialization stamp: 'HAW 10/2/2020 16:22:18'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:19'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:19'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:20'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:20'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:20'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:20'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:20'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:20'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:20'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:20'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:20' prior: 50859112!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test64MethodObjectInstanceCreationMessageIsCategorizedAsInstanceCreation stamp: 'HAW 10/2/2020 16:22:20'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:20'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:21'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:21'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:21'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:21'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:21'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:21'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:21'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:21'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:21'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:21' prior: 50859187!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test65MethodObjectEvaluationMessageIsCategorizedAsEvaluating stamp: 'HAW 10/2/2020 16:22:21'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:22'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:22'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:22'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:22'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:22'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:22'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test66MethodObjectEvaluationSelectorMustNotBeEmpty stamp: 'HAW 10/2/2020 16:22:22'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:23'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:23'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:23'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:23'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:23'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test67MethodObjectEvaluationSelectorMustNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:22:23'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:24'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:24'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:24'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:24'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:24'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test68MethodObjectEvaluationSelectorMustNotStartWithAnInvalidStartOfSelector stamp: 'HAW 10/2/2020 16:22:24'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:25'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:25'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:25'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IfNilChecksFinderTest #test01InstanceVariableMustBelongToTheClass stamp: 'HAW 10/2/2020 16:22:25'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:26'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:26'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IfNilChecksFinderTest #test02WhenThereAreNoIfNilChecksTheResultIsEmpty stamp: 'HAW 10/2/2020 16:22:26'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:26'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:26'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:26'!
m1 randomInstVar ifNil: [ 1 + 1 ]! !

!testRun: #IfNilChecksFinderTest #test03ResultIncludesIfNilMessageSending stamp: 'HAW 10/2/2020 16:22:26'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:27'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:27'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:27'!
m1 randomInstVar ifNotNil: [ 1 + 1 ]! !

!testRun: #IfNilChecksFinderTest #test04ResultIncludesIfNotNilMessageSending stamp: 'HAW 10/2/2020 16:22:27'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:28'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:28'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:28'!
m1 randomInstVar ifNil: [ 2 + 2 ] ifNotNil: [ 1 + 1 ]! !

!testRun: #IfNilChecksFinderTest #test05ResultIncludesIfNilIfNotNilMessageSending stamp: 'HAW 10/2/2020 16:22:28'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:28'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:28'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:28'!
m1 randomInstVar ifNotNil: [ 2 + 2 ] ifNil: [ 1 + 1 ]! !

!testRun: #IfNilChecksFinderTest #test06ResultIncludesIfNotNilIfNilMessageSending stamp: 'HAW 10/2/2020 16:22:28'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:29'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:29'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:29'!
m1 randomInstVar isNil ifTrue: [ 2 + 2 ]! !

!testRun: #IfNilChecksFinderTest #test07ResultIncludesIsNilIfTrueMessageSending stamp: 'HAW 10/2/2020 16:22:29'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:30'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:30'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:30'!
m1 randomInstVar isNil ifFalse: [ 2 + 2 ]! !

!testRun: #IfNilChecksFinderTest #test08ResultIncludesIsNilIfFalseMessageSending stamp: 'HAW 10/2/2020 16:22:30'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:30'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:30'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:30'!
m1 randomInstVar isNil ifTrue: [1 + 1] ifFalse: [ 2 + 2 ]! !

!testRun: #IfNilChecksFinderTest #test09ResultIncludesIsNilIfTrueIfFalseMessageSending stamp: 'HAW 10/2/2020 16:22:30'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:31'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:31'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:31'!
m1 randomInstVar isNil ifFalse: [1 + 1] ifTrue: [ 2 + 2 ]! !

!testRun: #IfNilChecksFinderTest #test10ResultIncludesIsNilIfFalseIfTrueMessageSending stamp: 'HAW 10/2/2020 16:22:31'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:32'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:32'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:32'!
m1 randomInstVar ifNil: [1 + 1].randomInstVar ifNotNil: [1 + 1].! !

!testRun: #IfNilChecksFinderTest #test11WhenThereAreMultipleIfNilChecksInTheSameMethodTheResultIncludesAllOfThem stamp: 'HAW 10/2/2020 16:22:32'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:32'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:32'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:32'!
m1 randomInstVar ifNil: [1 + 1]! !
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:32'!
m2 randomInstVar ifNil: [2 + 2]! !

!testRun: #IfNilChecksFinderTest #test12WhenThereAreIfNilChecksInMultipleMethodsTheResultIncludesAllOfThem stamp: 'HAW 10/2/2020 16:22:32'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:33'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:33'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:33'!
m1 randomInstVar ifNil: [1 + 1].randomInstVar ifNil: [1 + 1].! !

!testRun: #IfNilChecksFinderTest #test13WhenThereAreMultipleIfNilChecksInTheSameMethodWithTheSameCodeTheResultIncludesAllOfThem stamp: 'HAW 10/2/2020 16:22:33'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:34'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:34'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:34'!
m1 anInstVar ifNil: [ super isNil ]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:34'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:34'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test01BlocksToExtractMustNotContainReferencesToSuper stamp: 'HAW 10/2/2020 16:22:34'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:34'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:34'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:35'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:35'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:35'!
m1 anInstVar ifNil: [ anInstVar := 1 ]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:35'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:35'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test02BlocksToExtractMustNotContainAssignmentsToVariablesThatAreNotTemporals stamp: 'HAW 10/2/2020 16:22:35'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:35'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:36'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:36'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:36'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:36'!
m1 anInstVar ifNil: [
			1 = 2 ifFalse: [ |aTemp| aTemp := 3]]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:36'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:36'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test03BlocksToExtractCanAssignToTemporalsOfNestedBlocks stamp: 'HAW 10/2/2020 16:22:36'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:37'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:37'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:37'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:37'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:37'!
m1 anInstVar ifNil: [ |aTemp| aTemp := 2]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:37'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:37'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test04BlocksToExtractCanAssignToTemporalsOfBlocks stamp: 'HAW 10/2/2020 16:22:37'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:38'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:38'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:38'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:38'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:38'!
m1 anInstVar ifNil: [^anInstVar is Nil]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:38'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:38'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test07BlocksToExtractMustNotContainReturnStatements stamp: 'HAW 10/2/2020 16:22:38'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:39'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:39'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:40'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactorSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:40'!
RefactoringClassTestData subclass: #AClassToRefactorSuperclass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:40'!
AClassToRefactorSuperclass subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:40'!
m1 anInstVar ifNil: [anInstVar isNil ]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:40'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:40'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test08InstanceVariableMustBelongToTheClassToRefactor stamp: 'HAW 10/2/2020 16:22:40'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:40'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:41'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:41'!
AClassToRefactorSuperclass subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactorSuperclass stamp: 'HAW 10/2/2020 16:22:41'!
RefactoringClassTestData subclass: #AClassToRefactorSuperclass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:41'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:41'!
m1 anInstVar ifNil: [anInstVar isNil ]! !

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:41'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test09ConcreteClassMustBeDifferentToNullClass stamp: 'HAW 10/2/2020 16:22:41'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:42'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:42'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:42'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClasOutsideTheHierarchy category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:42'!
RefactoringClassTestData subclass: #AClasOutsideTheHierarchy
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClasOutsideTheHierarchy methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:42'!
m1 anInstVar ifNil: [anInstVar isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:42'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:42'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test10MethodsMustBelongToTheHierarchyToRefactor stamp: 'HAW 10/2/2020 16:22:42'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:43'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:43'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:43'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClasOutsideTheHierarchy stamp: 'HAW 10/2/2020 16:22:44'!
RefactoringClassTestData subclass: #AClasOutsideTheHierarchy
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:44'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:44'!
m1 anInstVar ifNil: [anInstVar isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:44'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:44'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test13MessageNodesMustNotBeDuplicated stamp: 'HAW 10/2/2020 16:22:44'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:44'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:44'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:45'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:45'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:45'!
m1 self ifNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:45'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:45'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test14MessageNodesReceiverMustBeTheInstVar stamp: 'HAW 10/2/2020 16:22:45'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:45'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:46'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:46'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:46'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:46'!
m1 anInstVar ifNil: [ 1 + 1 ]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:46'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:46'!
unaryPolymorphicSelector! !

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:46'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test15ConcreteClassMustNotContainAnyPolymorphicSelector stamp: 'HAW 10/2/2020 16:22:46'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:47'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:47'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:47'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:47'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:47'!
m1 anInstVar ifNil: [ 1 + 1 ]! !

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:47'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!NullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:47'!
unaryPolymorphicSelector! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:47'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test16NullClassMustNotContainAnyPolymorphicSelector stamp: 'HAW 10/2/2020 16:22:47'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:48'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:48'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:48'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:48'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48'!
m1 anInstVar ifNil: [ 1 + 1 ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:48'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:48'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48'!
replaceIfNilSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48'!
replaceIfNilSelector
	1 + 1! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48' prior: 50860384!
m1 anInstVar replaceIfNilSelector! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48' prior: 50860414!
m1 anInstVar replaceIfNilSelector! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48' prior: 50860419!
m1 anInstVar replaceIfNilSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test17WhenThereAreNoVariablesToParametrizeReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:22:48'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:49'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:49'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:50'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:50'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50'!
m1 anInstVar ifNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:50'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:50'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50'!
with: p1! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50' prior: 50860476!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50' prior: 50860504!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50' prior: 50860508!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test18WhenThereAreVariablesToParametrizeReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:22:50'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:50'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:51'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:51'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:51'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51'!
m1 anInstVar ifNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:51'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:51'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51'!
with: p1! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51' prior: 50860565!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51' prior: 50860593!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51' prior: 50860597!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test19WhenIfNilCheckHasOneKeywordReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:22:51'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:52'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:52'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:52'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:52'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52'!
m1 anInstVar ifNil: [ self isNil ] ifNotNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:52'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:52'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52' prior: 50860654!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52' prior: 50860684!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52' prior: 50860688!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test20WhenIfNilCheckHasTwoKeywordsReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:22:52'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:53'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:53'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:53'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:53'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:53'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:53'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53' prior: 50860745!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53' prior: 50860775!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53' prior: 50860779!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test21WhenIfNilCheckHasIsNilReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:22:53'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:54'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:54'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:55'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:55'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:55'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:55'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55' prior: 50860836!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55' prior: 50860866!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55' prior: 50860870!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test22PolymorphicMessageIsAddedToTheConcreteClass stamp: 'HAW 10/2/2020 16:22:55'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:55'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:56'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:56'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:56'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:56'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:56'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56' prior: 50860926!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56' prior: 50860956!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56' prior: 50860960!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test23PolymorphicMessageIsAddedToTheConcreteClassWithChosenParameterNames stamp: 'HAW 10/2/2020 16:22:56'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:57'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:57'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:57'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:57'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:57'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:57'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57' prior: 50861017!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57' prior: 50861047!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57' prior: 50861051!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test24PolymorphicMessageIsAddedToTheConcreteClassReplacingParametrizedVariables stamp: 'HAW 10/2/2020 16:22:57'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:58'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:58'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:58'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:58'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:58'!
m1 anInstVar ifNil: [ self isNil ] ifNotNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:59'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:59'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59' prior: 50861108!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59' prior: 50861138!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59' prior: 50861142!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test25ReplacesIfNilIfNotNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:22:59'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:59'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:59'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:00'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:00'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00'!
m1 anInstVar ifNotNil: [ self isNil ] ifNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:00'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:00'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00' prior: 50861198!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00' prior: 50861228!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00' prior: 50861232!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test26ReplacesIfNotNilIfNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:23:00'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:00'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:01'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:01'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:01'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01'!
m1 anInstVar ifNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:01'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:01'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01'!
with: p1! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01' prior: 50861288!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01' prior: 50861316!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01' prior: 50861320!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test27ReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:23:01'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:02'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:02'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:02'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:02'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02'!
m1 anInstVar ifNotNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:02'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:02'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02'!
with: p1! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02' prior: 50861376!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02' prior: 50861405!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02' prior: 50861409!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test28ReplacesIfNotNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:23:02'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:03'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:03'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:04'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:04'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04'!
m1 anInstVar isNil ifTrue: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:04'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:04'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04'!
with: p1! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04' prior: 50861465!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04' prior: 50861493!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04' prior: 50861497!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test29ReplacesIsNilIfTrueWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:23:04'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:04'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:05'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05'!
m1 anInstVar isNil ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:05'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:05'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05'!
with: p1! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05' prior: 50861553!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05' prior: 50861582!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05' prior: 50861586!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test30ReplacesIsNilIfFalseWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:23:05'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:06'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:06'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:06'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:06'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06'!
m1 anInstVar isNil ifTrue: [self isNil] ifFalse: [self isNil]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:06'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:06'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06' prior: 50861642!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06' prior: 50861672!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06' prior: 50861676!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test31ReplacesIsNilIfTrueIfFalseWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:23:06'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:07'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:07'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:08'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:08'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08'!
m1 anInstVar isNil ifFalse: [self isNil] ifTrue: [self isNil]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:08'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:08'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08' prior: 50861733!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08' prior: 50861763!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08' prior: 50861767!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test32ReplacesIsNilIfFalseIfTrueWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:23:08'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:08'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:09'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:09'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:09'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:09'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:09'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09' prior: 50861824!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09' prior: 50861854!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09' prior: 50861858!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test33PolymorphicMessageIsAddedToTheNullClass stamp: 'HAW 10/2/2020 16:23:09'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:10'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:10'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:10'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:10'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:10'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:10'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10' prior: 50861914!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10' prior: 50861944!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10' prior: 50861948!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test34PolymorphicMessageIsAddedToTheNullClassWithChosenParameterNames stamp: 'HAW 10/2/2020 16:23:10'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:11'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:11'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:12'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:12'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12' prior: 50862005!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12' prior: 50862035!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12' prior: 50862039!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test35PolymorphicMessageIsAddedToTheNullClassReplacingParametrizedVariables stamp: 'HAW 10/2/2020 16:23:12'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:12'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:13'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:13'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:13'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13'!
m1 anInstVar isNil ifFalse: [self isNil]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:13'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:13'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13'!
with: p1! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13' prior: 50862096!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13' prior: 50862125!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13' prior: 50862129!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test36WhenNoNullBlockIsPresentEmptyPolymorphicMessageIsAddedToTheNullClass stamp: 'HAW 10/2/2020 16:23:13'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:14'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:14'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14'!
m1 anInstVar isNil ifTrue: [self isNil]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:14'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:14'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14'!
with: p1! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14' prior: 50862186!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14' prior: 50862214!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14' prior: 50862218!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test37WhenNoConcreteBlockIsPresentEmptyPolymorphicMessageIsAddedToTheConcreteClass stamp: 'HAW 10/2/2020 16:23:14'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:15'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:15'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16'!
m1 anInstVar ifNil: [1+1. 2+2]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:16'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:16'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16' prior: 50862275!
m1 anInstVar unaryPolymorphicSelector! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16' prior: 50862305!
m1 anInstVar unaryPolymorphicSelector! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16' prior: 50862310!
m1 anInstVar unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test38WhenThereAreMultipleStatementsPolymorphicMessageIsAddedToTheNullClass stamp: 'HAW 10/2/2020 16:23:16'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:16'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:17'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:17'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:17'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17'!
m1
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := nil.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:17'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:17'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17' prior: 50862367!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := nil.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17' prior: 50862397!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := ANullClass new.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17' prior: 50862403!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := ANullClass new.! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test39ReplacesNilAssignmentsWithNullObject stamp: 'HAW 10/2/2020 16:23:17'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:18'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:18'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:18'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:18'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18'!
m1
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := nil.
	anInstVar := nil.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:18'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:18'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18' prior: 50862461!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := nil.
	anInstVar := nil.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18' prior: 50862492!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := ANullClass new.
	anInstVar := ANullClass new.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18' prior: 50862498!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := ANullClass new.
	anInstVar := ANullClass new.! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test40ReplacesMultipleNilAssignmentsWithNullObject stamp: 'HAW 10/2/2020 16:23:18'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:19'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:19'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:19'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:19'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19'!
m1
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := self doSomething.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:19'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:19'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19' prior: 50862558!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := self doSomething.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19' prior: 50862589!
m1
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19' prior: 50862595!
m1
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test41ReplacesAssignmentWithNullObject stamp: 'HAW 10/2/2020 16:23:19'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:20'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:20'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:21'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:21'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21'!
m1
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:21'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:21'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21' prior: 50862655!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21' prior: 50862687!
m1
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21' prior: 50862695!
m1
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test42ReplacesMultipleAssignmentsInTheSameMethodWithNullObject stamp: 'HAW 10/2/2020 16:23:21'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:22'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:22'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22'!
m11
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22'!
m12
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:22'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:22'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862760!
m11
	anInstVar unaryPolymorphicSelector.
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862790!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862794!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862767!
m12
	anInstVar unaryPolymorphicSelector.
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862799!
m11
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862816!
m12
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862824!
m11
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862832!
m12
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test43ReplacesMultipleAssignmentsInMultipleMethodsWithNullObject stamp: 'HAW 10/2/2020 16:23:22'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:23'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:23'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:24'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:24'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24'!
m1
	anInstVar ifNil: [1+1. 2+2].
	^anInstVar! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:24'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:24'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24' prior: 50862905!
m1
	anInstVar unaryPolymorphicSelector.
	^anInstVar! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24' prior: 50862935!
m1
	anInstVar unaryPolymorphicSelector.
	^anInstVar! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24' prior: 50862940!
m1
	anInstVar unaryPolymorphicSelector.
	^anInstVar nilIfNullObject! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test44ReplacesReturnOfIvarWithNilIfNullObject stamp: 'HAW 10/2/2020 16:23:24'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:24'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:25'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:25'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:25'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25'!
m1
	anInstVar ifNil: [1+1. 2+2].
	self do: anInstVar.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:25'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:25'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25' prior: 50862998!
m1
	anInstVar unaryPolymorphicSelector.
	self do: anInstVar.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25' prior: 50863028!
m1
	anInstVar unaryPolymorphicSelector.
	self do: anInstVar.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25' prior: 50863034!
m1
	anInstVar unaryPolymorphicSelector.
	self do: anInstVar nilIfNullObject.! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test45ReplacesIvarAsParamWithNilIfNullObject stamp: 'HAW 10/2/2020 16:23:25'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:26'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:26'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:26'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:26'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil. anInstVar isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:26'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:26'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26'!
with: p1
	p1 isNil. self isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26' prior: 50863092!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26' prior: 50863122!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26' prior: 50863126!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test46WhenIvarAppearsInNotNilBlockAsReceiverReplacesIvarWithSelf stamp: 'HAW 10/2/2020 16:23:26'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:27'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:27'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:28'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:28'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self sendIvar: anInstVar ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:28'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:28'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28'!
with: p1
	p1 sendIvar: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28' prior: 50863183!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28' prior: 50863213!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28' prior: 50863217!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test47WhenIvarAppearsInNotNilBlockAsArgumentReplacesIvarWithSelf stamp: 'HAW 10/2/2020 16:23:28'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:28'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:29'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:29'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:29'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29'!
m1 anInstVar isNil ifFalse: [ self isNil ] ifTrue: [ self sendIvar: anInstVar ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:29'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:29'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29'!
with: p1
	p1 sendIvar: self nilIfNullObject! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29' prior: 50863274!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29' prior: 50863305!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29' prior: 50863309!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test48WhenIvarAppearsInNilBlockAsArgumentReplacesIvarWithSelfNilIfNullObject stamp: 'HAW 10/2/2020 16:23:29'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:30'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:30'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:30'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:30'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:30'!
m1 self ifNil: [1 + 1]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test01WhenThereAreNoVariablesToExtractFindsNothing stamp: 'HAW 10/2/2020 16:23:30'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:31'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:31'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:31'!
m1 self ifNil: [| a | a := 2. a + 1]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test02WhenThereAreOnlyTemporariesFindsNothing stamp: 'HAW 10/2/2020 16:23:31'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:32'!
m1 self ifNil: [| a | a := 2. a + self]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test03WhenABlockReferencesNonTemporariesTheyAreFound stamp: 'HAW 10/2/2020 16:23:32'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:32'!
m1 self ifNil: [| a | a := 2. a ifNil: [ self + 2]]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test04WhenANestedBlockReferencesNonTemporariesTheyAreFound stamp: 'HAW 10/2/2020 16:23:32'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:33'!
m1 self ifNil: [| a | a := nil]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test05NilIsNotFound stamp: 'HAW 10/2/2020 16:23:33'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:34'!
m1 self ifNil: [false or: [true]]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test06TrueAndFalseAreNotFound stamp: 'HAW 10/2/2020 16:23:34'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:34'!
m1 self ifNil: [| a | a := 2. a + anInstVar]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test07WhenABlockReferencesInstanceVariablesTheyAreFound stamp: 'HAW 10/2/2020 16:23:34'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:35'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:35'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:35'!
m1: anArg self ifNil: [| a | a := 2. a + anArg]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test08WhenABlockReferencesArgumentsTheyAreFound stamp: 'HAW 10/2/2020 16:23:35'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:36'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:36'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:36'!
m1: anArg self ifNil: [| a | a := 2. a + anArg]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test09ExcludingVariablesAreNotIncludedInTheResult stamp: 'HAW 10/2/2020 16:23:36'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:36'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:36'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test01AbstractClassClassNameMustNotBeEmpty stamp: 'HAW 10/2/2020 16:23:36'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:37'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:37'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test02AbstractClassClassNameMustBeASymbol stamp: 'HAW 10/2/2020 16:23:37'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:38'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:38'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test03AbstractClassClassNameMustStartWithUppercaseLetter stamp: 'HAW 10/2/2020 16:23:38'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:38'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:38'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test04AbstractClassClassNameMustNotHaveSeparators stamp: 'HAW 10/2/2020 16:23:38'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:39'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:39'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test05AbstractClassClassNameMustNotExist stamp: 'HAW 10/2/2020 16:23:39'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:40'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:40'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test06NullObjectClassNameMustNotBeEmpty stamp: 'HAW 10/2/2020 16:23:40'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:40'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:40'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test07NullObjectClassNameMustBeASymbol stamp: 'HAW 10/2/2020 16:23:40'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:41'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:41'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test08NullObjectClassNameMustStartWithUppercaseLetter stamp: 'HAW 10/2/2020 16:23:41'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:42'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:42'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test09NullObjectClassNameMustNotHaveSeparators stamp: 'HAW 10/2/2020 16:23:42'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:42'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:43'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test10NullObjectClassNameMustNotExist stamp: 'HAW 10/2/2020 16:23:43'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:43'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:43'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:43'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:43'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test11CreatesAbstractClass stamp: 'HAW 10/2/2020 16:23:43'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:44'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:44'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:44'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:44'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:44'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:44'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test12CreatesAbstractClassInChosenCategory stamp: 'HAW 10/2/2020 16:23:44'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:45'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:45'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:46'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:46'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:46'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:46'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test13CreatesAbstractClassAsSubclassOfConcreteClassPreviousSuperclass stamp: 'HAW 10/2/2020 16:23:46'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:46'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:47'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:47'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:47'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:47'!
m1! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:47'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:47'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:47'!
m1
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:47' overrides: 50863949!
m1! !

!testRun: #NullObjectHierarchyCreatorTest #test14AbstractClassDefinesAllTheSelectorsOfConcreteClass stamp: 'HAW 10/2/2020 16:23:47'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:48'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:48'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:48'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:48'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:48'!
m1: anArg! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:48'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:48'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:48'!
m1: anArg
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:48' overrides: 50864013!
m1: anArg! !

!testRun: #NullObjectHierarchyCreatorTest #test15AbstractClassMethodParametersNamesArePreservedFromConcreteClass stamp: 'HAW 10/2/2020 16:23:48'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:49'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:49'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:49'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:49'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:49'!
m1: anArg
		^1 + 2! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:49'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:49'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:49'!
m1: anArg
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:49' overrides: 50864078!
m1: anArg! !

!testRun: #NullObjectHierarchyCreatorTest #test16AbstractClassMethodsDelegateResponsibility stamp: 'HAW 10/2/2020 16:23:49'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:50'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:50'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:51'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:51'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:51'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:51'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test17CreatesNullObjectClass stamp: 'HAW 10/2/2020 16:23:51'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:51'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:52'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:52'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:52'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:52'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:52'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test18CreatesNullObjectClassInChosenCategory stamp: 'HAW 10/2/2020 16:23:52'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:53'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:53'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:53'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:53'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:53'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:53'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test19CreatesNullObjectClassClassAsSubclassOfAbstractClass stamp: 'HAW 10/2/2020 16:23:53'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:54'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:54'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:54'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:54'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:54'!
m1! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:54'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:54'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:54'!
m1
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:54' overrides: 50864297!
m1! !

!testRun: #NullObjectHierarchyCreatorTest #test20NullObjectClassDefinesAllTheSelectorsOfConcreteClass stamp: 'HAW 10/2/2020 16:23:54'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:55'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:55'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:56'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:56'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:56'!
m1: anArg! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:56'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:56'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:56'!
m1: anArg
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:56' overrides: 50864361!
m1: anArg! !

!testRun: #NullObjectHierarchyCreatorTest #test21NullObjectClassMethodParametersNamesArePreservedFromConcreteClass stamp: 'HAW 10/2/2020 16:23:56'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:56'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:57'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:57'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:57'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:57'!
m1: anArg
		^1 + 2! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:57'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:57'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:57'!
m1: anArg
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:57' overrides: 50864426!
m1: anArg! !

!testRun: #NullObjectHierarchyCreatorTest #test22NullObjectClassMethodsAreEmpty stamp: 'HAW 10/2/2020 16:23:57'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:58'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:58'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:58'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:58'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:58'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:58'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test23ConcreteClassSubclassesTheAbstractClass stamp: 'HAW 10/2/2020 16:23:58'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:59'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:59'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:59'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:59'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:59'!
m1: anArg
		^1 + 2! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:59'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:59'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:59'!
m1: anArg
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:59' overrides: 50864542!
m1: anArg! !

!testRun: #NullObjectHierarchyCreatorTest #test24ConcreteClassMethodsArePreserved stamp: 'HAW 10/2/2020 16:23:59'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:24:00'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:24:00'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:24:00'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:01'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:01'!
m1 self ifNil: [1 + 1].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:01'!
m2 1 + 1.! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test01MessageNodeMustBelongToTheMethodNode stamp: 'HAW 10/2/2020 16:24:01'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:01'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:01'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:01'!
m1 anInstVar ifTrue: [1 + 1].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test02MessageNodeMustRepresentASupportedMessageSent stamp: 'HAW 10/2/2020 16:24:01'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:02'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:02'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:02'!
m1 anInstVar ifNil: [self isNil]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test03AllVariablesToParametrizeHaveACorrespondingKeyword stamp: 'HAW 10/2/2020 16:24:02'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:03'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:03'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:03'!
m1 anInstVar ifNil: [self isNil].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test04AllKeywordsMustHaveACorrespondingVariableToParametrize stamp: 'HAW 10/2/2020 16:24:03'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:03'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:03'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:03'!
m1 anInstVar ifNil: [self isNil].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test05CreatesReplaceIfNilWithPolymorphismParameters stamp: 'HAW 10/2/2020 16:24:03'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:04'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:04'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:04'!
m1 anInstVar ifNil: [self or: [true]].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test06ReplaceIfNilWithPolymorphismParametersOnBlocksWithBooleanConstants stamp: 'HAW 10/2/2020 16:24:04'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:05'!
m1 anInstVar ifNil: [ | tempVar | tempVar := 1 + 1. self isNil].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test07ParameterNamesMustNotBeEqualToABlockTemporal stamp: 'HAW 10/2/2020 16:24:05'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:05'!
m1
		anInstVar ifNil: [self ifNil: [ | tempVar | tempVar := 1 + 1]].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test08ParameterNamesMustNotBeEqualToANestedBlockTemporal stamp: 'HAW 10/2/2020 16:24:05'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:06'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:06'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:06'!
m1
		anInstVar ifNil: [self allInstVarNames collect: [:arg | arg asSymbol]].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test09ParameterNamesMustNotBeEqualToNestedBlocksArguments stamp: 'HAW 10/2/2020 16:24:06'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:07'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:07'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:07'!
m1 anInstVar ifNil: [1 + 1] ifNotNil: [2 + 2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test10RangeOfMessageSendForIfNilIfNotNil stamp: 'HAW 10/2/2020 16:24:07'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:07'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:07'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:07'!
m1 anInstVar ifNotNil: [1 + 1] ifNil: [2 + 2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test11RangeOfMessageSendForIfNotNilIfNil stamp: 'HAW 10/2/2020 16:24:07'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:08'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:08'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:08'!
m1 anInstVar ifNotNil: [1 + 1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test12RangeOfMessageSendForIfNotNil stamp: 'HAW 10/2/2020 16:24:08'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:09'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:09'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:09'!
m1 anInstVar ifNil: [1 + 1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test13RangeOfMessageSendForIfNil stamp: 'HAW 10/2/2020 16:24:09'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:09'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:09'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:09'!
m1 anInstVar isNil ifTrue: [1 + 1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test14RangeOfMessageSendForIsNilIfTrue stamp: 'HAW 10/2/2020 16:24:09'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:10'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:10'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:10'!
m1 anInstVar isNil ifTrue: [1 + 1] ifFalse: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test15RangeOfMessageSendForIsNilIfTrueIfFalse stamp: 'HAW 10/2/2020 16:24:10'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:11'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:11'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:11'!
m1 anInstVar       ifNil: [1 + 1]          ifNotNil: [2 + 2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test16WhenThereAreExtraSpacesRangeOfMessageSendForIfNilIfNotNil stamp: 'HAW 10/2/2020 16:24:11'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:12'!
m1 anInstVar    isNil       ifTrue: [1 + 1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test17WhenThereAreExtraSpacesRangeOfMessageSendForIsNilIfTrue stamp: 'HAW 10/2/2020 16:24:12'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:12'!
m1 anInstVar ifNil: [1 + 1] ifNotNil: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test18ConcreteBlockSourceCodeForIfNilIfNotNil stamp: 'HAW 10/2/2020 16:24:12'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:13'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:13'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:13'!
m1 anInstVar ifNotNil: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test19ConcreteBlockSourceCodeForIfNotNil stamp: 'HAW 10/2/2020 16:24:13'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:14'!
m1 anInstVar ifNotNil: [2+2] ifNil: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test20ConcreteBlockSourceCodeForIfNotNilIfNil stamp: 'HAW 10/2/2020 16:24:14'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:14'!
m1 anInstVar isNil ifFalse: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test21ConcreteBlockSourceCodeForIsNilIfFalse stamp: 'HAW 10/2/2020 16:24:14'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:15'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:15'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:15'!
m1 anInstVar isNil ifTrue: [1+1] ifFalse: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test22ConcreteBlockSourceCodeForIsNilIfTrueIfFalse stamp: 'HAW 10/2/2020 16:24:15'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:16'!
m1 anInstVar ifNil: [1+1] ifNotNil: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test23NullBlockSourceCodeForIfNilIfNotNil stamp: 'HAW 10/2/2020 16:24:16'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:16'!
m1 anInstVar ifNil: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test24NullBlockSourceCodeForIfNil stamp: 'HAW 10/2/2020 16:24:16'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:17'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:17'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:17'!
m1 anInstVar ifNotNil: [2+2] ifNil: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test25NullBlockSourceCodeForIfNotNilIfNil stamp: 'HAW 10/2/2020 16:24:17'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:18'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:18'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:18'!
m1 anInstVar isNil ifTrue: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test26NullBlockSourceCodeForIsNilIfTrue stamp: 'HAW 10/2/2020 16:24:18'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:18'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:18'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:18'!
m1 anInstVar isNil ifFalse: [2+2] ifTrue: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test27NullBlockSourceCodeForIsNilIfFalseIfTrue stamp: 'HAW 10/2/2020 16:24:18'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:19'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:19'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:19'!
m1 anInstVar ifNotNil: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test28NullBlockSourceCodeForIfNotNil stamp: 'HAW 10/2/2020 16:24:19'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:20'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:20'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:20'!
m1 anInstVar ifNil: [1] ifNotNil: [2+2. 1+1.]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test29WhenThereAreMultipleStatementsConcreteBlockSourceCodeForIfNilIfNotNil stamp: 'HAW 10/2/2020 16:24:20'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:20'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:20'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:20'!
m1 anInstVar ifNotNil: [2+2. 1+1.]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test30WhenThereAreMultipleStatementsConcreteBlockSourceCodeForIfNotNil stamp: 'HAW 10/2/2020 16:24:20'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:21'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:21'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:21'!
m1 anInstVar isNil ifFalse: [2+2. 1+1.]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test31WhenThereAreMultipleStatementsConcreteBlockSourceCodeForIsNilIfFalse stamp: 'HAW 10/2/2020 16:24:21'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:22'!
m1 anInstVar ifNil: [1+1. 2+2.] ifNotNil: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test32WhenThereAreMultipleStatementsNullBlockSourceCodeForIfNilIfNotNil stamp: 'HAW 10/2/2020 16:24:22'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:22'!
m1 anInstVar ifNil: [1+1. 2+2.]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test33WhenThereAreMultipleStatementsNullBlockSourceCodeForIfNil stamp: 'HAW 10/2/2020 16:24:22'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:23'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:23'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:23'!
m1 anInstVar isNil ifTrue: [1+1. 2+2.]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test34WhenThereAreMultipleStatementsNullBlockSourceCodeForIsNilIfTrue stamp: 'HAW 10/2/2020 16:24:23'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:24'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test01ParameterNameMustNotBeEmpty stamp: 'HAW 10/2/2020 16:24:24'!
PASSED!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test02ParameterNameMustNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:24:24'!
PASSED!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test03ParameterNameMustNotContainSeparators stamp: 'HAW 10/2/2020 16:24:25'!
PASSED!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test04KeywordMustNotBeEmpty stamp: 'HAW 10/2/2020 16:24:25'!
PASSED!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test05KeywordMustNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:24:25'!
PASSED!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test06CreatesADefinition stamp: 'HAW 10/2/2020 16:24:26'!
PASSED!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:26'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:26'!
m1! !

!testRun: #VariablesToExtractFinderTest #test01WhenTheMethodHasNoVariablesItReturnsAnEmptySet stamp: 'HAW 10/2/2020 16:24:26'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:27'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:27'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:27'!
m1
		| aTempVar |

		aTempVar := 2.

		^aTempVar.! !

!testRun: #VariablesToExtractFinderTest #test02WhenTheMethodHasOnlyTemporaryVariablesItReturnsAnEmptySet stamp: 'HAW 10/2/2020 16:24:27'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:28'!
m1

		self m2.! !

!testRun: #VariablesToExtractFinderTest #test03WhenTheMethodReferencesSelfPseudoVariableItFindsIt stamp: 'HAW 10/2/2020 16:24:28'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:28'!
m1: anArg

		^anArg + 2! !

!testRun: #VariablesToExtractFinderTest #test04WhenTheMethodHasArgumentsTheyAreIncludedAsVariablesToExtract stamp: 'HAW 10/2/2020 16:24:28'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:29'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:29'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:29'!
m1

		^anInstVar isNil! !

!testRun: #VariablesToExtractFinderTest #test05WhenTheMethodReferencesAnInstanceVariableItFindsIt stamp: 'HAW 10/2/2020 16:24:29'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:30'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:30'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:30'!
m1

		^AClassVar isNil! !

!testRun: #VariablesToExtractFinderTest #test06WhenTheMethodReferencesAClassVariableItFindsIt stamp: 'HAW 10/2/2020 16:24:30'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:30'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ASharedPool category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:30'!
SharedPool subclass: #ASharedPool
	instanceVariableNames: ''
	classVariableNames: 'APoolVariable'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:30'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'ASharedPool'
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:30'!
m1
		^APoolVariable isNil! !

!testRun: #VariablesToExtractFinderTest #test07WhenTheMethodReferencesAPoolVariableItFindsIt stamp: 'HAW 10/2/2020 16:24:30'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:31'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'ASharedPool'
	category: '__Refactoring-TestData__'!

!classRemoval: #ASharedPool stamp: 'HAW 10/2/2020 16:24:31'!
SharedPool subclass: #ASharedPool
	instanceVariableNames: ''
	classVariableNames: 'APoolVariable'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:31'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:31'!
m1

		^true not! !

!testRun: #VariablesToExtractFinderTest #test08DoesNotFindPseudoVariablesButSelf stamp: 'HAW 10/2/2020 16:24:31'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:32'!
m1
		^anInstVar! !

!testRun: #VariablesToExtractFinderTest #test09WhenReturnsAnInstVarFindsIt stamp: 'HAW 10/2/2020 16:24:32'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:33'!
m1
		^Object! !

!testRun: #VariablesToExtractFinderTest #test10DoesNotFindClasses stamp: 'HAW 10/2/2020 16:24:33'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:33'!
m1
		^Smalltalk! !

!testRun: #VariablesToExtractFinderTest #test11DoesNotFindGlobals stamp: 'HAW 10/2/2020 16:24:33'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test01SelectorMustNotBeEmpty stamp: 'HAW 10/2/2020 16:24:34'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test02SelectorMustNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:24:34'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test03SelectorMustNotStartWithInvalidStartOfSelector stamp: 'HAW 10/2/2020 16:24:35'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test04CreatesVariablesToParametrizeKeywordsDefinitionsWithSelector stamp: 'HAW 10/2/2020 16:24:35'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test05FirstKeywordMustNotStartWithAnInvalidStartOfSelector stamp: 'HAW 10/2/2020 16:24:36'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test06ParameterNamesMustNotBeRepeated stamp: 'HAW 10/2/2020 16:24:36'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test07VariablesToParametrizeMustNotBeRepeated stamp: 'HAW 10/2/2020 16:24:37'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test08CreatesVariablesToParametrizeKeywordsDefinitionsWithDefinitions stamp: 'HAW 10/2/2020 16:24:37'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test09WhenNoVariablesToParametrizeBuildsSelector stamp: 'HAW 10/2/2020 16:24:37'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test10WhenVariablesToParametrizeBuildsSelectorFromKeywordsInOrder stamp: 'HAW 10/2/2020 16:24:38'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test11WhenVariablesToParametrizeBuildsMessageSending stamp: 'HAW 10/2/2020 16:24:38'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test12WhenNoVariablesToParametrizeBuildsMessageHeader stamp: 'HAW 10/2/2020 16:24:39'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test13WhenVariablesToParametrizeBuildsMessageHeader stamp: 'HAW 10/2/2020 16:24:39'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:40'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40' prior: 50865803!
m3 | x | self m1: 1. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:40'!
m1!

!testRun: #AddParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'HAW 10/2/2020 16:24:40'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:40'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:40'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40'!
m3 | x | self m1: 1 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40'!
m1: p1 m2: p2 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40' prior: 50865844!
m3 | x | self m1: 1 m2: 2 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !

!methodRemoval: ClassToAddParameter #m1:m3: stamp: 'HAW 10/2/2020 16:24:40'!
m1: p1 m3: p3!

!testRun: #AddParameterWithActualScopeTest #test01_01_DoesNotChangePossibleMessageSendWhenInstructedToDoSoWithKeywordMessages stamp: 'HAW 10/2/2020 16:24:40'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:41'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:41'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:41'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:41'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:41'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:41'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #AddParameterWithActualScopeTest #test02CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'HAW 10/2/2020 16:24:41'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:42'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:42'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:42'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:42'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:42'!
m1: p1 m3: p3! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:42'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:42'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1 m3: 3! !

!testRun: #AddParameterWithActualScopeTest #test02_01_CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsForKeywordMessage stamp: 'HAW 10/2/2020 16:24:42'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:43'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:43'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:43'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:43'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:43'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:43'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:43'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:43' prior: 50865992!
m3 | x | x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:43'!
m1!

!testRun: #AddParameterWithActualScopeTest #test03AddParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'HAW 10/2/2020 16:24:43'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:44'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:44'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:44'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:44'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:44'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:44'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:44'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:44'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:44'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:44' prior: 50866050!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:44'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:24:44'!
m1!

!testRun: #AddParameterWithActualScopeTest #test04AddParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'HAW 10/2/2020 16:24:44'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:45'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:45'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:45'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:45'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:45'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:45'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:45'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:45'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:45'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:45' prior: 50866114!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:45'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:24:45'!
m1!

!testRun: #AddParameterWithActualScopeTest #test05AddParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'HAW 10/2/2020 16:24:45'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:46'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:46'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:46'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:46'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:46'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:46'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:46'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:46'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:46'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:46' prior: 50866179!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:46'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:24:46'!
m1!

!testRun: #AddParameterWithActualScopeTest #test06AddParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'HAW 10/2/2020 16:24:46'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:47'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:47'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:47'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:47'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:47'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:47'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:47' prior: 50866233!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:47'!
m1!

!testRun: #AddParameterWithActualScopeTest #test07AddParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'HAW 10/2/2020 16:24:47'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:48'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:48'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:48'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:48'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:48'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:48'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:48' prior: 50866281!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:24:48'!
m1!

!testRun: #AddParameterWithActualScopeTest #test08AddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'HAW 10/2/2020 16:24:48'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:48'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:49'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:49'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:49'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:49'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:49'!
m3 self m1. ClassOfSender new m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:49'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:49' prior: 50866341!
m3 self m1: 1. ClassOfSender new m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:49'!
m1!

!testRun: #AddParameterWithActualScopeTest #test09AddParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'HAW 10/2/2020 16:24:49'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:50'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:50'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:50'!
m3 |x| self m1. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:50'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:50' prior: 50866387!
m3 |x| self m1: 1. x m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:50'!
m1!

!testRun: #AddParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenAddingParameterToMethodWithSureAndPossibleSenders stamp: 'HAW 10/2/2020 16:24:50'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:50'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:50'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:50'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:50'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #AddParameterWithActualScopeTest #test11CanNotAddParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'HAW 10/2/2020 16:24:50'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:51'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:51'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'HAW 10/2/2020 16:24:51'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:52'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:52'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:52'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:52'!
m3 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:52'!
m1: p1 m2: p2 ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:52' prior: 50866487!
m3 self m1: 1 m2: 2! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:24:52'!
m1: p1!

!testRun: #AddParameterWithActualScopeTest #test13AddLastParameterCorrectly stamp: 'HAW 10/2/2020 16:24:52'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:52'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:53'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:53'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:53'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:53'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:53'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:53' prior: 50866533!
m3 | x | self m1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:24:53'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'HAW 10/2/2020 16:24:53'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:53'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:53'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:53'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:53'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:53'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:53'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!testRun: #RemoveParameterWithActualScopeTest #test02CanNotRemoveParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'HAW 10/2/2020 16:24:53'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:54'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:54'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:54'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:54'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:54'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:54'!
m3 | x | x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:54'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:54' prior: 50866632!
m3 | x | x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:24:54'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test03RemovesParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'HAW 10/2/2020 16:24:54'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:55'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:55'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:55'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:55'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:55'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:55'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:55'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:55'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:55'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:55' prior: 50866692!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:24:55'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'HAW 10/2/2020 16:24:55'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test04RemovesParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'HAW 10/2/2020 16:24:55'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:56'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:56'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:56'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:56'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:56'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:56'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:56'!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:56'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:56'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:56' prior: 50866758!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:24:56'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'HAW 10/2/2020 16:24:56'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test05RemovesParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'HAW 10/2/2020 16:24:56'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:57'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:57'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:57'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:57'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:57'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:57'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:57'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:57'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:57'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:57' prior: 50866825!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:24:57'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'HAW 10/2/2020 16:24:57'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test06RemovesParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'HAW 10/2/2020 16:24:57'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:58'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:58'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:58'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:58'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:58'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:58'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:58' prior: 50866882!
m3 | x | self m1. false ifTrue: [ x m1]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:24:58'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test07RemovesParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'HAW 10/2/2020 16:24:58'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:59'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:59'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:59'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:59'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:59'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:59'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:59' prior: 50866932!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassOfSender #m1: stamp: 'HAW 10/2/2020 16:24:59'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test08RemovesParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'HAW 10/2/2020 16:24:59'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:59'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:00'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:00'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:00'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:00'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:00'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:00'!
m3 self m1: 1. ClassOfSender new m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:00'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:00' prior: 50866994!
m3 self m1. ClassOfSender new m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:25:00'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test09RemovesParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'HAW 10/2/2020 16:25:00'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:25:00'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:01'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:01'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:01'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:01'!
m3 |x| self m1: 1. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:01'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:01' prior: 50867043!
m3 |x| self m1. x m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:25:01'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRemovingParameterToMethodWithSureAndPossibleSenders stamp: 'HAW 10/2/2020 16:25:01'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:25:01'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:01'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:01'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:01'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:01'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:01'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1; printString! !

!testRun: #RemoveParameterWithActualScopeTest #test11CanNotRemoveParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'HAW 10/2/2020 16:25:01'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:25:02'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:02'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'HAW 10/2/2020 16:25:02'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:03'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:03'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:03'!
m1: p1 m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:03'!
m3 self m1: 1 m2: 2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:03'!
m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:03' prior: 50867146!
m3 self m2: 2! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'HAW 10/2/2020 16:25:03'!
m1: p1 m2: p2!

!testRun: #RemoveParameterWithActualScopeTest #test13RemovesOtherThanLastParameterCorrectly stamp: 'HAW 10/2/2020 16:25:03'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:03'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:25:04'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:04'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:04'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:04'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:04'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:04' prior: 50867191!
m3 | x | self m2. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:04'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test01DoesNotRenamesPossibleMessageSendWhenInstructedToDoSo stamp: 'HAW 10/2/2020 16:25:04'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:04'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:04'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:04'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:04'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:04'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:04'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #RenameSelectorWithActualScopeTest #test02CanNotRenameWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'HAW 10/2/2020 16:25:04'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:05'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:05'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:05'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:05'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:05'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:05'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:05'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:05' prior: 50867287!
m3 | x | x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:05'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test03RenamesWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'HAW 10/2/2020 16:25:05'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:06'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:06'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:06'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:06'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:06'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:06'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:06'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:06'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:06'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:06' prior: 50867346!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:06'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:25:06'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test04RenamesWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'HAW 10/2/2020 16:25:06'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:07'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:07'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:07'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:07'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:07'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:07'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:07'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:07'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:07'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:07' prior: 50867410!
m3 | x y | x := self. y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:07'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:25:07'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test05RenamesDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'HAW 10/2/2020 16:25:07'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:08'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:08'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:08'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:08'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:08'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:08'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:08'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:08'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:08'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:08' prior: 50867475!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:08'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:25:08'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test06RenamesDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'HAW 10/2/2020 16:25:08'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:09'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:09'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:09'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:09'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:09'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:09'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:09' prior: 50867529!
m3 | x | self m2. false ifTrue: [ x m2 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:09'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test07RenamePossibleMessageSendIfInstructedToDoSo stamp: 'HAW 10/2/2020 16:25:09'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:10'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:10'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:10'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:10'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:10'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:10'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:10' prior: 50867577!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:25:10'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test08RenamesWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'HAW 10/2/2020 16:25:10'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:11'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:11'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:11'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:11'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:11'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:11'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:11'!
m3 self m1. ClassOfSender new m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:11'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:11' prior: 50867637!
m3 self m2. ClassOfSender new m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:11'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test09RenamesOnlyValidMessageSendWhenMoreSendsInSameMethod stamp: 'HAW 10/2/2020 16:25:11'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:12'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:12'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:12'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:12'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:12'!
m3 |x| self m1. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:12'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:12' prior: 50867683!
m3 |x| self m2. x m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:12'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRenamingAMethodWithSureAndPossibleSenders stamp: 'HAW 10/2/2020 16:25:12'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:13'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:13'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:13'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:13'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:13'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:13'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #RenameSelectorWithActualScopeTest #test11CanNotRenameWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'HAW 10/2/2020 16:25:13'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:14'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:14'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameSelectorWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'HAW 10/2/2020 16:25:14'!
PASSED!

----QUIT----(2 October 2020 16:25:14) CuisUniversity-4384.image priorSource: 16021447!

----STARTUP---- (16 November 2020 17:32:25) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64\CuisUniversity-4384.image!


Object subclass: #CarritoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #CarritoTest category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/16/2020 17:38:06'!
Object subclass: #CarritoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

TestCase subclass: #CarritoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #CarritoTest category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/16/2020 17:38:34'!
TestCase subclass: #CarritoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!CarritoTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 17:39:23'!
test01ANewCartIsEmpty! !
!CarritoTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 17:40:04'!
test02ABookCanBeAddedToTheCart! !
!CarritoTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 17:40:28'!
test03ManyBooksCanBeAddedToTheCart! !

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/16/2020 18:56:36'!
Object subclass: #ShoppingCart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!CarritoTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 18:56:27' prior: 50867793!
test01ANewCartIsEmpty
	|aCart|
	
	aCart := ShoppingCart new.
	
	self assert: aCart listCart equals: OrderedCollection new.! !

!testRun: #CarritoTest #test01ANewCartIsEmpty stamp: 'LH 11/16/2020 18:56:42'!
ERROR!
!ShoppingCart methodsFor: 'accessing' stamp: 'LH 11/16/2020 18:56:53'!
listCart
	self shouldBeImplemented.! !
!ShoppingCart methodsFor: 'accessing' stamp: 'LH 11/16/2020 18:57:04' prior: 50867822!
listCart
	^OrderedCollection new.! !

!testRun: #CarritoTest #test01ANewCartIsEmpty stamp: 'LH 11/16/2020 18:57:06'!
PASSED!

!testRun: #CarritoTest #test01ANewCartIsEmpty stamp: 'LH 11/16/2020 18:57:06'!
PASSED!

!testRun: #CarritoTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 18:57:06'!
PASSED!

!testRun: #CarritoTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 18:57:06'!
PASSED!
!CarritoTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:05:29' prior: 50867797!
test02ABookCanBeAddedToTheCart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	
	self assert: aCart listCart equals: (OrderedCollection with:'0-7645-2641-3' with: 1).   ! !

!testRun: #CarritoTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:05:33'!
ERROR!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/16/2020 19:05:46'!
addToCart: aSmallInteger ofBook: aString 
	self shouldBeImplemented.! !

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/16/2020 19:07:01'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/16/2020 19:07:02'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books quantities'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/16/2020 19:06:59' prior: 50867854!
addToCart: aQuantity ofBook: anISBN 
	books := anISBN.
	quantities := aQuantity! !

!testRun: #CarritoTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:07:05'!
FAILURE!
!ShoppingCart methodsFor: 'accessing' stamp: 'LH 11/16/2020 19:08:51' prior: 50867826!
listCart
	|bookList|
	
	bookList := OrderedCollection new.
	
	books isNil ifFalse:[bookList add: books. bookList add: quantities.].
	
	^ bookList.! !

!testRun: #CarritoTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:09:13'!
PASSED!

!testRun: #CarritoTest #test01ANewCartIsEmpty stamp: 'LH 11/16/2020 19:09:13'!
PASSED!

!testRun: #CarritoTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:09:13'!
PASSED!

!testRun: #CarritoTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:09:13'!
PASSED!
!CarritoTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:10:37' prior: 50867801!
test03ManyBooksCanBeAddedToTheCart
	|aCart bookList|
	
	aCart := ShoppingCart new.
	bookList := OrderedCollection new.
	
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	bookList add: '0-7645-2641-3'.
	bookList add: 1.
	aCart addToCart: 1 ofBook: '0-7645-2641-4'.
	bookList add: '0-7645-2641-4'.
	bookList add: 2.
	
	self assert: aCart listCart equals: bookList.   ! !

!testRun: #CarritoTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:10:44'!
FAILURE!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/16/2020 19:11:54' prior: 50867875!
addToCart: aQuantity ofBook: anISBN 
	books add: anISBN.
	books add: aQuantity.! !
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/16/2020 19:12:44' overrides: 16896425!
initialize

	books := OrderedCollection new.! !

Object subclass: #ShoppingCart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/16/2020 19:12:52'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCart methodsFor: 'accessing' stamp: 'LH 11/16/2020 19:13:07' prior: 50867884!
listCart

	^ books copy.! !

!classRenamed: #CarritoTest as: #ShoppingCartTest stamp: 'LH 11/16/2020 19:13:21'!
Smalltalk renameClassNamed: #CarritoTest as: #ShoppingCartTest!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:13:28'!
FAILURE!
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:14:03' prior: 50867904!
test03ManyBooksCanBeAddedToTheCart
	|aCart bookList|
	
	aCart := ShoppingCart new.
	bookList := OrderedCollection new.
	
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	bookList add: '0-7645-2641-3'.
	bookList add: 1.
	aCart addToCart: 1 ofBook: '0-7645-2641-4'.
	bookList add: '0-7645-2641-4'.
	bookList add: 1.
	
	self assert: aCart listCart equals: bookList.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:14:10' prior: 50867957!
test03ManyBooksCanBeAddedToTheCart
	|aCart bookList|
	
	aCart := ShoppingCart new.
	bookList := OrderedCollection new.
	
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	bookList add: '0-7645-2641-3'.
	bookList add: 1.
	aCart addToCart: 1 ofBook: '0-7645-2641-4'.
	bookList add: '0-7645-2641-4'.
	bookList add: 1.
	
	self assert: bookList listCart equals: aCart.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:14:42' prior: 50867842!
test02ABookCanBeAddedToTheCart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	
	self assert: (OrderedCollection with:'0-7645-2641-3' with: 1) listCart equals: aCart.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:15:01' prior: 50867813!
test01ANewCartIsEmpty
	|aCart|
	
	aCart := ShoppingCart new.
	
	self assert: OrderedCollection new listCart equals: aCart.! !

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:15:12'!
ERROR!
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:15:49' prior: 50867997!
test01ANewCartIsEmpty
	|aCart|
	
	aCart := ShoppingCart new.
	
	self assert: OrderedCollection new equals: aCart listCart.! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:15:57' prior: 50867987!
test02ABookCanBeAddedToTheCart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	
	self assert: (OrderedCollection with:'0-7645-2641-3' with: 1) equals: aCart listCart.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:16:09' prior: 50867972!
test03ManyBooksCanBeAddedToTheCart
	|aCart bookList|
	
	aCart := ShoppingCart new.
	bookList := OrderedCollection new.
	
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	bookList add: '0-7645-2641-3'.
	bookList add: 1.
	aCart addToCart: 1 ofBook: '0-7645-2641-4'.
	bookList add: '0-7645-2641-4'.
	bookList add: 1.
	
	self assert: bookList equals: aCart listCart.   ! !

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:16:11'!
PASSED!

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/16/2020 19:16:11'!
PASSED!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:16:11'!
PASSED!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:16:11'!
PASSED!

Object subclass: #ShoppingCartBook
	instanceVariableNames: 'isbn quantity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #ShoppingCartBook category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/16/2020 19:18:57'!
Object subclass: #ShoppingCartBook
	instanceVariableNames: 'isbn quantity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCartBook class methodsFor: 'instance creation' stamp: 'LH 11/16/2020 19:20:38'!
withISBN: anISBN andQuantity: aQuantity

	^self basicNew initializeWith: anISBN and: aQuantity.! !
!ShoppingCartBook methodsFor: 'initialization' stamp: 'LH 11/16/2020 19:21:31'!
with: anISBN and: aQuantity

	isbn := anISBN.
	quantity := aQuantity.! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/16/2020 19:22:16' prior: 50867922!
addToCart: aQuantity ofBook: anISBN 
	books add: (ShoppingCartBook withISBN: anISBN andQuantity: aQuantity).! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/16/2020 19:22:45' prior: 50868077!
addToCart: aQuantity ofBook: anISBN 
	^ books add: (ShoppingCartBook withISBN: anISBN andQuantity: aQuantity).! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/16/2020 19:22:47' prior: 50868084!
addToCart: aQuantity ofBook: anISBN 

	^ books add: (ShoppingCartBook withISBN: anISBN andQuantity: aQuantity).! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:23:42' prior: 50868015!
test02ABookCanBeAddedToTheCart
	|aCart aSCBook|
	
	aCart := ShoppingCart new.
	aSCBook := aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	
	self assert: (OrderedCollection with:aSCBook) equals: aCart listCart.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:25:27' prior: 50868025!
test03ManyBooksCanBeAddedToTheCart
	|aCart bookList|
	
	aCart := ShoppingCart new.
	bookList := OrderedCollection new.
	
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	bookList add: '0-7645-2641-3'.
	bookList add: 1.
	aCart addToCart: 1 ofBook: '0-7645-2641-4'.
	bookList add: '0-7645-2641-4'.
	bookList add: 1.
	
	self assert: bookList equals: aCart listCart.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:26:05' prior: 50868098!
test02ABookCanBeAddedToTheCart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	
	self assert: (OrderedCollection with:'0-7645-2641-3' with: 1) equals: aCart listCart.   ! !
!ShoppingCart methodsFor: 'accessing' stamp: 'LH 11/16/2020 19:28:29' prior: 50867945!
listCart
	|bookList|
	bookList := OrderedCollection new.
	books do:[:aBook | 
				bookList add: aBook isbn.
				bookList add: aBook quantity.].
	^ bookList.! !
!ShoppingCart methodsFor: 'accessing' stamp: 'LH 11/16/2020 19:29:08' prior: 50868133!
listCart
	|bookList|
	bookList := OrderedCollection new.
	books do:[:aBook | aBook addToList: bookList.].
	^ bookList.! !
!ShoppingCartBook methodsFor: 'adding to a list' stamp: 'LH 11/16/2020 19:30:01'!
addToList: aListOfBooks

	aListOfBooks add: isbn.
	aListOfBooks add: quantity.! !

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/16/2020 19:30:08'!
PASSED!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:30:08'!
ERROR!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:30:08'!
ERROR!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:30:19'!
ERROR!
!ShoppingCartBook methodsFor: 'initialization' stamp: 'LH 11/16/2020 19:30:51'!
initializeWith: anISBN and: aQuantity

	isbn := anISBN.
	quantity := aQuantity.! !

!methodRemoval: ShoppingCartBook #with:and: stamp: 'LH 11/16/2020 19:30:51'!
with: anISBN and: aQuantity

	isbn := anISBN.
	quantity := aQuantity.!

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/16/2020 19:30:55'!
PASSED!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:30:55'!
PASSED!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:30:55'!
PASSED!
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:35:01'!
test04CanAddMoreThanOneFromTheSameBook
	|aCart bookList|
	
	aCart := ShoppingCart new.
	bookList := OrderedCollection new.
	
	aCart addToCart: 2 ofBook: '0-7645-2641-3'.
	bookList add: '0-7645-2641-3'.
	bookList add: 2.
	
	self assert: bookList equals: aCart listCart.   ! !

!testRun: #ShoppingCartTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/16/2020 19:35:03'!
PASSED!

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/16/2020 19:35:03'!
PASSED!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:35:03'!
PASSED!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:35:03'!
PASSED!

!testRun: #ShoppingCartTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/16/2020 19:35:03'!
PASSED!

----SNAPSHOT----(16 November 2020 19:42:40) CuisUniversity-4384.image priorSource: 17155564!
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/16/2020 19:43:11' prior: 50867928 overrides: 16896425!
initialize

	books := Bag new.! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/16/2020 19:43:50' prior: 50868091!
addToCart: aQuantity ofBook: anISBN 

	^ books add: anISBN withOccurrences: aQuantity.! !
!ShoppingCart methodsFor: 'accessing' stamp: 'LH 11/16/2020 19:44:07' prior: 50868141!
listCart
	
	^books copy.! !

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/16/2020 19:44:15'!
FAILURE!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:44:15'!
FAILURE!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:44:15'!
FAILURE!

!testRun: #ShoppingCartTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/16/2020 19:44:15'!
FAILURE!
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:44:26' prior: 50868008!
test01ANewCartIsEmpty
	|aCart|
	
	aCart := ShoppingCart new.
	
	self assert: Bag new equals: aCart listCart.! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:45:37' prior: 50868123!
test02ABookCanBeAddedToTheCart
	|aCart bookBag|
	
	aCart := ShoppingCart new.
	bookBag := Bag new.
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	bookBag add: '0-7645-2641-3'.
	
	self assert: bookBag equals: aCart listCart.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:46:19' prior: 50868108!
test03ManyBooksCanBeAddedToTheCart
	|aCart bookBag|
	
	aCart := ShoppingCart new.
	bookBag := Bag new.
	
	aCart addToCart: 1 ofBook: '0-7645-2641-3'.
	bookBag add: '0-7645-2641-3'.
	
	aCart addToCart: 1 ofBook: '0-7645-2641-4'.
	bookBag add: '0-7645-2641-4'.
	
	self assert: bookBag equals: aCart listCart.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/16/2020 19:46:58' prior: 50868186!
test04CanAddMoreThanOneFromTheSameBook
	|aCart bookBag|
	
	aCart := ShoppingCart new.
	bookBag := Bag new.
	
	aCart addToCart: 2 ofBook: '0-7645-2641-3'.
	bookBag add: '0-7645-2641-3' withOccurrences:2.
	
	self assert: bookBag equals: aCart listCart.   ! !

!testRun: #ShoppingCartTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/16/2020 19:46:59'!
PASSED!

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/16/2020 19:46:59'!
PASSED!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:46:59'!
PASSED!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/16/2020 19:46:59'!
PASSED!

!testRun: #ShoppingCartTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/16/2020 19:46:59'!
PASSED!

----SNAPSHOT----(16 November 2020 19:47:05) CuisUniversity-4384.image priorSource: 17170011!

----QUIT----(16 November 2020 19:52:48) CuisUniversity-4384.image priorSource: 17172873!

----STARTUP---- (17 November 2020 11:24:56) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64\CuisUniversity-4384.image!

!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/17/2020 11:36:15' prior: 50868245!
test01ANewCartIsEmpty
	|aShop aCatalog|
	aCatalog := Dictionary newFromPairs: #('admin', 'password').
	aShop := ShoppingCart withCatalog: OrderedCollection new andUsers: aCatalog.
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	self assert: Bag new equals: (aShop listCart: 1).! !

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:36:28'!
ERROR!
!ShoppingCart class methodsFor: 'instance creation' stamp: 'LH 11/17/2020 11:36:39'!
withCatalog: anOrderedCollection andUsers: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalog: anOrderedCollection andUsers: aDictionary ! !
!ShoppingCart class methodsFor: 'instance creation' stamp: 'LH 11/17/2020 11:36:57' prior: 50868328!
withCatalog: anOrderedCollection andUsers: aDictionary 

	^self new initializeWithCatalog: anOrderedCollection andUsers: aDictionary. ! !

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:37:00'!
ERROR!

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/17/2020 11:37:10'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books orderedCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/17/2020 11:37:11'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books orderedCollection dictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/17/2020 11:37:11'!
initializeWithCatalog: anOrderedCollection andUsers: aDictionary 
	self shouldBeImplemented.
	orderedCollection := anOrderedCollection.
	dictionary := aDictionary.! !
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/17/2020 11:37:23' prior: 50868366!
initializeWithCatalog: anOrderedCollection andUsers: aDictionary 

	orderedCollection := anOrderedCollection.
	dictionary := aDictionary.! !

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/17/2020 11:37:31'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books catalog dictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'LH 11/17/2020 11:37:31' prior: 50868375!
initializeWithCatalog: anOrderedCollection andUsers: aDictionary 

	catalog := anOrderedCollection.
	dictionary := aDictionary.! !

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/17/2020 11:37:41'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books catalog usersAndPasswords'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'LH 11/17/2020 11:37:41' prior: 50868391!
initializeWithCatalog: anOrderedCollection andUsers: aDictionary 

	catalog := anOrderedCollection.
	usersAndPasswords := aDictionary.! !
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/17/2020 11:38:14' prior: 50868407!
initializeWithCatalog: aCatalog andUsers: aDictionaryOfUsersAndPasswords

	catalog := aCatalog.
	usersAndPasswords := aDictionaryOfUsersAndPasswords.! !

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:38:17'!
ERROR!
!ShoppingCart methodsFor: 'Carts' stamp: 'LH 11/17/2020 11:38:37'!
createCartFor: aString withPassword: aString2 
	self shouldBeImplemented.! !

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/17/2020 11:40:00'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books catalog usersAndPasswords carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCart methodsFor: 'Carts' stamp: 'LH 11/17/2020 11:39:58' prior: 50868425!
createCartFor: anUser withPassword: aPassword 
	"creates a new cart for a valid user"
	
	carts add: Bag new.! !

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:40:02'!
ERROR!
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/17/2020 11:40:30' prior: 50868415!
initializeWithCatalog: aCatalog andUsers: aDictionaryOfUsersAndPasswords

	catalog := aCatalog.
	usersAndPasswords := aDictionaryOfUsersAndPasswords.
	carts := OrderedCollection new.! !

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:40:40'!
ERROR!
!ShoppingCart methodsFor: 'Carts' stamp: 'LH 11/17/2020 11:40:56'!
listCart: aSmallInteger 
	self shouldBeImplemented.! !
!ShoppingCart methodsFor: 'Carts' stamp: 'LH 11/17/2020 11:41:17' prior: 50868460!
listCart: aCartID 
	^carts at: aCartID! !
!ShoppingCart methodsFor: 'Carts' stamp: 'LH 11/17/2020 11:41:35' prior: 50868465!
listCart: aCartID 
	"returns the cart's contentes as a Bag"

	^carts at: aCartID! !

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:41:38'!
PASSED!

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:41:38'!
PASSED!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:41:38'!
PASSED!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:41:38'!
PASSED!

!testRun: #ShoppingCartTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/17/2020 11:41:38'!
PASSED!
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/17/2020 11:42:00' prior: 50868252!
test02ABookCanBeAddedToTheCart
	|aShop bookBag|
	
	aShop := ShoppingCart new.
	bookBag := Bag new.
	aShop addToCart: 1 ofBook: '0-7645-2641-3'.
	bookBag add: '0-7645-2641-3'.
	
	self assert: bookBag equals: aShop listCart.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/17/2020 11:43:43' prior: 50868491!
test02ABookCanBeAddedToTheCart
	|aShop bookBag aDictionaryOfUsers|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aShop := ShoppingCart withCatalog: OrderedCollection new andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	aShop addToCart: 1 ofBook: '0-7645-2641-3'.
	bookBag add: '0-7645-2641-3'.
	
	self assert: bookBag equals: aShop listCart.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/17/2020 11:45:04' prior: 50868502!
test02ABookCanBeAddedToTheCart
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3'.
	aShop := ShoppingCart withCatalog: aCatalog new andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	aShop createCartFor: 'admin' withPassword: 'password'. 
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 1.
	bookBag add: '0-7645-2641-3'.
	
	self assert: bookBag equals: aShop listCart.   ! !
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/17/2020 11:45:32' prior: 50868517!
test02ABookCanBeAddedToTheCart
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3'.
	aShop := ShoppingCart withCatalog: aCatalog new andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 1.
	bookBag add: '0-7645-2641-3'.
	
	self assert: bookBag equals: (aShop listCart: 1).   ! !

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:45:35'!
ERROR!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:46:01'!
ERROR!
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/17/2020 11:46:16' prior: 50868536!
test02ABookCanBeAddedToTheCart
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3'.
	aShop := ShoppingCart withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 1.
	bookBag add: '0-7645-2641-3'.
	
	self assert: bookBag equals: (aShop listCart: 1).   ! !

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:46:17'!
ERROR!
!ShoppingCart methodsFor: 'Carts' stamp: 'LH 11/17/2020 11:46:27'!
addToCart: aSmallInteger theBook: aString times: aSmallInteger3 
	self shouldBeImplemented.! !
!ShoppingCart methodsFor: 'Carts' stamp: 'LH 11/17/2020 11:48:02' prior: 50868583!
addToCart: aCartID theBook: anISBN times: aQuantity 
	
	(carts at:1) add: anISBN withOccurrences: aQuantity.! !

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/17/2020 11:48:03'!
PASSED!

----SNAPSHOT----(17 November 2020 11:48:10) CuisUniversity-4384.image priorSource: 17172967!
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/17/2020 11:49:35' prior: 50868263!
test03ManyBooksCanBeAddedToTheCart
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	aShop := ShoppingCart withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 1.
	bookBag add: '0-7645-2641-3'.
	aShop addToCart: 1 theBook: '0-7645-2641-4' times: 1.
	bookBag add: '0-7645-2641-4'.
	
	self assert: bookBag equals: (aShop listCart: 1).   
	! !

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:49:57'!
PASSED!

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:49:57'!
PASSED!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:49:57'!
PASSED!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:49:57'!
PASSED!

!testRun: #ShoppingCartTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/17/2020 11:49:57'!
PASSED!
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/17/2020 11:51:35' prior: 50868276!
test04CanAddMoreThanOneFromTheSameBook
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3'.
	aShop := ShoppingCart withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 2.
	bookBag add: '0-7645-2641-3' withOccurrences: 2.
	
	self assert: bookBag equals: (aShop listCart: 1).   
	
	
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 1.
	bookBag add: '0-7645-2641-3'.
	
	self assert: bookBag equals: (aShop listCart: 1).! !

!testRun: #ShoppingCartTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/17/2020 11:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/17/2020 11:51:36'!
PASSED!
!ShoppingCartTest methodsFor: 'tests carrito' stamp: 'LH 11/17/2020 11:51:58' prior: 50868654!
test04CanAddMoreThanOneFromTheSameBook
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3'.
	aShop := ShoppingCart withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 2.
	bookBag add: '0-7645-2641-3' withOccurrences: 2.
	
	self assert: bookBag equals: (aShop listCart: 1).   ! !

!methodRemoval: ShoppingCart #listCart stamp: 'LH 11/17/2020 11:57:09'!
listCart
	
	^books copy.!

!methodRemoval: ShoppingCart #initialize stamp: 'LH 11/17/2020 11:57:16'!
initialize

	books := Bag new.!

!methodRemoval: ShoppingCart #addToCart:ofBook: stamp: 'LH 11/17/2020 11:57:22'!
addToCart: aQuantity ofBook: anISBN 

	^ books add: anISBN withOccurrences: aQuantity.!

!classRenamed: #ShoppingCart as: #TusLibrosShop stamp: 'LH 11/17/2020 11:57:38'!
Smalltalk renameClassNamed: #ShoppingCart as: #TusLibrosShop!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'LH 11/17/2020 11:57:38' prior: 50868695!
test04CanAddMoreThanOneFromTheSameBook
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3'.
	aShop := TusLibrosShop withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 2.
	bookBag add: '0-7645-2641-3' withOccurrences: 2.
	
	self assert: bookBag equals: (aShop listCart: 1).   ! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'LH 11/17/2020 11:57:38' prior: 50868615!
test03ManyBooksCanBeAddedToTheCart
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	aShop := TusLibrosShop withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 1.
	bookBag add: '0-7645-2641-3'.
	aShop addToCart: 1 theBook: '0-7645-2641-4' times: 1.
	bookBag add: '0-7645-2641-4'.
	
	self assert: bookBag equals: (aShop listCart: 1).   
	! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'LH 11/17/2020 11:57:38' prior: 50868313!
test01ANewCartIsEmpty
	|aShop aCatalog|
	aCatalog := Dictionary newFromPairs: #('admin', 'password').
	aShop := TusLibrosShop withCatalog: OrderedCollection new andUsers: aCatalog.
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	self assert: Bag new equals: (aShop listCart: 1).! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'LH 11/17/2020 11:57:38' prior: 50868562!
test02ABookCanBeAddedToTheCart
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3'.
	aShop := TusLibrosShop withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 1.
	bookBag add: '0-7645-2641-3'.
	
	self assert: bookBag equals: (aShop listCart: 1).   ! !

!classRenamed: #ShoppingCartTest as: #TusLibrosShopTest stamp: 'LH 11/17/2020 11:57:51'!
Smalltalk renameClassNamed: #ShoppingCartTest as: #TusLibrosShopTest!

!classRemoval: #ShoppingCartBook stamp: 'LH 11/17/2020 11:57:58'!
Object subclass: #ShoppingCartBook
	instanceVariableNames: 'isbn quantity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/17/2020 11:58:01'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/17/2020 11:58:03'!
PASSED!

!testRun: #TusLibrosShopTest #test01ANewCartIsEmpty stamp: 'LH 11/17/2020 11:58:03'!
PASSED!

!testRun: #TusLibrosShopTest #test02ABookCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:58:04'!
PASSED!

!testRun: #TusLibrosShopTest #test03ManyBooksCanBeAddedToTheCart stamp: 'LH 11/17/2020 11:58:04'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneFromTheSameBook stamp: 'LH 11/17/2020 11:58:04'!
PASSED!

----SNAPSHOT----(17 November 2020 11:58:08) CuisUniversity-4384.image priorSource: 17182736!

----QUIT----(17 November 2020 11:58:45) CuisUniversity-4384.image priorSource: 17190007!

----STARTUP---- (18 November 2020 16:17:47) as /Users/ilanolkies/uba/ingsoft1/macos64/CuisUniversity-4384.image!


!classRemoval: #TusLibrosShop stamp: 'IO 11/18/2020 16:17:57'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'books catalog usersAndPasswords carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #TusLibrosShopTest stamp: 'IO 11/18/2020 16:17:57'!
TestCase subclass: #TusLibrosShopTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

----End fileIn of /Users/ilanolkies/uba/ingsoft1/macos64/Ejercicio-20-Tus-Libros.st----!
!TusLibrosShopTest methodsFor: 'tests carrito' stamp: 'IO 11/18/2020 16:18:15' prior: 50867953!
test01ANewCartIsEmpty
	| aShop aCatalog |
	aCatalog := Dictionary newFromPairs: #('admin', 'password').
	aShop := TusLibrosShop withCatalog: OrderedCollection new andUsers: aCatalog.
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	self assert: Bag new equals: (aShop listCart: 1).! !

!classRenamed: #TusLibrosShop as: #TusLibrosShop2 stamp: 'IO 11/18/2020 16:19:49'!
Smalltalk renameClassNamed: #TusLibrosShop as: #TusLibrosShop2!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:19:49' prior: 50867965!
test02ABookCanBeAddedToTheCart
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3'.
	aShop := TusLibrosShop2 withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 1.
	bookBag add: '0-7645-2641-3'.
	
	self assert: bookBag equals: (aShop listCart: 1).   ! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:19:49' prior: 50867984!
test03ManyBooksCanBeAddedToTheCart
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	aShop := TusLibrosShop2 withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 1.
	bookBag add: '0-7645-2641-3'.
	aShop addToCart: 1 theBook: '0-7645-2641-4' times: 1.
	bookBag add: '0-7645-2641-4'.
	
	self assert: bookBag equals: (aShop listCart: 1).   
	! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:19:49' prior: 50868085!
test01ANewCartIsEmpty
	| aShop aCatalog |
	aCatalog := Dictionary newFromPairs: #('admin', 'password').
	aShop := TusLibrosShop2 withCatalog: OrderedCollection new andUsers: aCatalog.
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	self assert: Bag new equals: (aShop listCart: 1).! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:19:49' prior: 50868006!
test04CanAddMoreThanOneFromTheSameBook
	|aShop bookBag aDictionaryOfUsers aCatalog|
	
	aDictionaryOfUsers := Dictionary newFromPairs: #('admin', 'password').
	aCatalog := OrderedCollection with: '0-7645-2641-3'.
	aShop := TusLibrosShop2 withCatalog: aCatalog andUsers: aDictionaryOfUsers.
	bookBag := Bag new.
	
	aShop createCartFor: 'admin' withPassword: 'password'. 
	
	aShop addToCart: 1 theBook: '0-7645-2641-3' times: 2.
	bookBag add: '0-7645-2641-3' withOccurrences: 2.
	
	self assert: bookBag equals: (aShop listCart: 1).   ! !

!classRenamed: #TusLibrosShopTest as: #TusLibrosShop2Test stamp: 'IO 11/18/2020 16:19:55'!
Smalltalk renameClassNamed: #TusLibrosShopTest as: #TusLibrosShop2Test!

TestCase subclass: #TusLibrosShopTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosShopTest category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:20:11'!
TestCase subclass: #TusLibrosShopTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:24:20'!
Object subclass: #TusLibrosShop
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShopTest methodsFor: 'no messages' stamp: 'IO 11/18/2020 16:24:11'!
test01

	| tusLibros users catalogue |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:24:33'!
ERROR!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:27:07' prior: 50868203!
test01

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId size).

	! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:27:11'!
ERROR!
!TusLibrosShop class methodsFor: 'instance creation' stamp: 'IO 11/18/2020 16:27:18'!
fromCatalogue: anOrderedCollection users: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFromCatalogue: anOrderedCollection users: aDictionary ! !
!TusLibrosShop class methodsFor: 'instance creation' stamp: 'IO 11/18/2020 16:27:21' prior: 50868233!
fromCatalogue: anOrderedCollection users: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"

	^self new initializeFromCatalogue: anOrderedCollection users: aDictionary ! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:27:22'!
ERROR!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:27:36'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'orderedCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:27:36'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'orderedCollection dictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 16:27:36'!
initializeFromCatalogue: anOrderedCollection users: aDictionary 
	self shouldBeImplemented.
	orderedCollection := anOrderedCollection.
	dictionary := aDictionary.! !
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 16:28:03' prior: 50868272!
initializeFromCatalogue: aCatalogue users: users 
	! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:28:05'!
ERROR!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:28:05'!
ERROR!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:28:09'!
ERROR!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:28:22'!
newCartForUser: aString Password: aString2 
	self shouldBeImplemented.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:28:25' prior: 50868293!
newCartForUser: aString Password: aString2 
! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:28:27'!
ERROR!
!TusLibrosShop methodsFor: 'error handling' stamp: 'IO 11/18/2020 16:28:30' overrides: 16881409!
error: aString 
	self shouldBeImplemented.! !

!methodRemoval: TusLibrosShop #error: stamp: 'IO 11/18/2020 16:28:51'!
error: aString 
	self shouldBeImplemented.!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:28:53'!
ERROR!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:28:53'!
ERROR!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:29:34'!
ERROR!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:29:34'!
ERROR!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:29:57' prior: 50868216!
test01

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: ((tusLibros listCart: cartId) size).

	! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:29:59'!
ERROR!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:30:08'!
listCart: aTusLibrosShop 
	self shouldBeImplemented.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:30:18' prior: 50868339!
listCart: aTusLibrosShop 
	^OrderedCollection new.! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:30:20'!
PASSED!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:30:20'!
PASSED!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:30:22'!
PASSED!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:30:22'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:30:27' prior: 50868323!
test01

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.

	! !

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:30:28'!
PASSED!

!testRun: #TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:30:28'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:30:34' prior: 50868359!
test01

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:30:45'!
test01NewCartIsEmtpy

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:30:55'!
test01NewCartIsEmpty

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !

!methodRemoval: TusLibrosShopTest #test01NewCartIsEmtpy stamp: 'IO 11/18/2020 16:30:55'!
test01NewCartIsEmtpy

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
!

!methodRemoval: TusLibrosShopTest #test01 stamp: 'IO 11/18/2020 16:30:57'!
test01

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:31:27'!
test02CanAddAproductToCart

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: ''.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:31:53' prior: 50868450!
test02CanAddAproductToCart

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:31:59' prior: 50868408!
test01NewCartIsEmpty

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'..
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:32:06' prior: 50868481!
test01NewCartIsEmpty

	| tusLibros users catalogue cartId |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'..
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:32:40'!
newTusLibros

	| tusLibros users catalogue |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'..
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.

	^tusLibros.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:33:06' prior: 50868497!
test01NewCartIsEmpty

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:33:20' prior: 50868465!
test02CanAddAproductToCart

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:34:21'!
test02CanAddABookProductToCart

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '' bookQuantity: 1.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !

!methodRemoval: TusLibrosShopTest #test02CanAddAproductToCart stamp: 'IO 11/18/2020 16:34:26'!
test02CanAddAproductToCart

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:34:39' prior: 50868545!
test02CanAddABookProductToCart

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:34:40'!
ERROR!
!TusLibrosShop methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:34:47'!
addToCart: aTusLibrosShop booksIsbn: aString bookQuantity: aSmallInteger 
	self shouldBeImplemented.! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:36:14' prior: 50868567!
test02CanAddABookProductToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag.
	self assert: cart equals: (tusLibros listCart: cartId).
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:36:44' prior: 50868589!
test02CanAddABookProductToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:36:49' prior: 50868602!
test02CanAddABookProductToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:36:50'!
ERROR!
!TusLibrosShop methodsFor: 'error handling' stamp: 'IO 11/18/2020 16:37:01' overrides: 16881409!
error: aString 
	self shouldBeImplemented.! !

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:37:29'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'orderedCollection dictionary hasTheBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'error handling' stamp: 'IO 11/18/2020 16:37:26' prior: 50868633 overrides: 16881409!
error: aString 
	hasTheBook := true.
! !

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:37:33'!
ERROR!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:37:43' prior: 50868616!
test02CanAddABookProductToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:37:44'!
FAILURE!

!methodRemoval: TusLibrosShop #error: stamp: 'IO 11/18/2020 16:38:02'!
error: aString 
	hasTheBook := true.
!
!TusLibrosShop methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:38:15' prior: 50868582!
addToCart: aTusLibrosShop booksIsbn: aString bookQuantity: aSmallInteger 
	hasTheBook := true.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:38:51' prior: 50868344!
listCart: aTusLibrosShop 
	(hasTheBook) ifTrue: [^Bag new with: '']
	^OrderedCollection new.! !
!TusLibrosShop methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:39:06' prior: 50868676!
addToCart: aTusLibrosShop booksIsbn: aString bookQuantity: aSmallInteger 
	hasTheBook := aString.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:39:26' prior: 50868682!
listCart: aTusLibrosShop 
	(hasTheBook notNil) ifTrue: [^Bag new with: hasTheBook]
	^OrderedCollection new.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:39:28' prior: 50868695!
listCart: aTusLibrosShop 
	(hasTheBook notNil) ifTrue: [^Bag new with: hasTheBook].
	^OrderedCollection new.! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:39:29'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:39:29'!
ERROR!

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:39:29'!
ERROR!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:39:38' prior: 50868702!
listCart: aTusLibrosShop 
	(hasTheBook notNil) ifTrue: [^Bag new add: hasTheBook].
	^OrderedCollection new.! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:39:38'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:39:38'!
FAILURE!

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:39:38'!
FAILURE!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:40:03' prior: 50868718!
listCart: aTusLibrosShop 
	(hasTheBook notNil) ifTrue: [^Bag with: hasTheBook].
	^OrderedCollection new.! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:40:04'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:40:04'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:40:07'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:40:07'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:40:24'!
test03CanAddDifferentBooksToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:40:33'!
test02CanAddABookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!methodRemoval: TusLibrosShopTest #test02CanAddABookProductToCart stamp: 'IO 11/18/2020 16:40:33'!
test02CanAddABookProductToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:40:42' prior: 50868513!
newTusLibros

	| tusLibros users catalogue |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	users := Dictionary newFromPairs: #('admin', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.

	^tusLibros.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:41:41' prior: 50868753!
test03CanAddDifferentBooksToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 1.

	cart := Bag new.
	cart add: '0-7645-2641-3'.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:41:44' prior: 50868807!
test03CanAddDifferentBooksToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 1.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 1.

	cart := Bag new.
	cart add: '0-7645-2641-3'.
	cart add: '0-7645-2641-4'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:41:45'!
FAILURE!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:43:08'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'orderedCollection dictionary hasTheBook books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:43:20' prior: 50868689!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity 
	books add: isbn.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:43:37' prior: 50868734!
listCart: aTusLibrosShop 
	^books copy.! !
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 16:43:57' prior: 50868281!
initializeFromCatalogue: aCatalogue users: users 
	books := Bag new.
! !

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:44:07'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:44:07'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:44:07'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:44:07'!
PASSED!

Object subclass: #TusLibrosShop
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:44:18'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:44:20'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:44:20'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:44:20'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:45:29'!
test03CanAddMoreThanOneBookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 2.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 3.
	cart add: '0-7645-2641-4' withOccurrences: 2.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!testRun: #TusLibrosShopTest #test03CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:45:30'!
FAILURE!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:45:52' prior: 50868855!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity 
	books add: isbn withOccurrences: quantity.! !

!testRun: #TusLibrosShop2Test #test01ANewCartIsEmpty stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShop2Test #test02ABookCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShop2Test #test03ManyBooksCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShop2Test #test04CanAddMoreThanOneFromTheSameBook stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:45:54'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:45:58'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:45:58'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:45:58'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:45:58'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:46:33'!
test04CanAddMoreThanOneBookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 2.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 3.
	cart add: '0-7645-2641-4' withOccurrences: 2.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!methodRemoval: TusLibrosShopTest #test03CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:46:33'!
test03CanAddMoreThanOneBookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 2.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 3.
	cart add: '0-7645-2641-4' withOccurrences: 2.

	self assert: cart equals: (tusLibros listCart: cartId).

!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:47:40'!
test05CanAddMoreThanOneCart

	| tusLibros cartId cartId2 cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	cartId2 := tusLibros newCartForUser: 'admin2' Password: 'password'.

	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 2.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 3.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 5.
	cart add: '0-7645-2641-4' withOccurrences: 3.

	self assert: cart equals: (tusLibros listCart: cartId2).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:48:22' prior: 50868795!
newTusLibros

	| tusLibros users catalogue |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	users := Dictionary newFromPairs: #('admin', 'password', 'admin2', 'password').
	tusLibros := TusLibrosShop fromCatalogue: catalogue users: users.

	^tusLibros.
! !

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:48:25'!
FAILURE!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:48:59'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'books carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 16:48:58' prior: 50868866!
initializeFromCatalogue: aCatalogue users: users 
	books := Bag new.
	carts := OrderedCollection new.
! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:49:20' prior: 50868298!
newCartForUser: aString Password: aString2 
	carts add: Bag new.
! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:49:31' prior: 50868861!
listCart: cartId 
	^books copy.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:49:39' prior: 50868928!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity
	books add: isbn withOccurrences: quantity.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:50:13' prior: 50869075!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:50:18' prior: 50869081!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:50:43' prior: 50869071!
listCart: cartId 
	^carts at: cartId copy.! !

!testRun: #TusLibrosShop2Test #test01ANewCartIsEmpty stamp: 'IO 11/18/2020 16:50:44'!
PASSED!

!testRun: #TusLibrosShop2Test #test02ABookCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:50:44'!
PASSED!

!testRun: #TusLibrosShop2Test #test03ManyBooksCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:50:44'!
PASSED!

!testRun: #TusLibrosShop2Test #test04CanAddMoreThanOneFromTheSameBook stamp: 'IO 11/18/2020 16:50:44'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:50:44'!
ERROR!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:50:44'!
ERROR!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:50:44'!
ERROR!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:50:44'!
ERROR!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:50:44'!
ERROR!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:50:56' prior: 50869066!
newCartForUser: aString Password: aString2 
	carts add: Bag new.
	^carts size - 1.
! !

!testRun: #TusLibrosShop2Test #test01ANewCartIsEmpty stamp: 'IO 11/18/2020 16:50:57'!
PASSED!

!testRun: #TusLibrosShop2Test #test02ABookCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:50:57'!
PASSED!

!testRun: #TusLibrosShop2Test #test03ManyBooksCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:50:57'!
PASSED!

!testRun: #TusLibrosShop2Test #test04CanAddMoreThanOneFromTheSameBook stamp: 'IO 11/18/2020 16:50:57'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:50:57'!
ERROR!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:50:57'!
ERROR!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:50:57'!
ERROR!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:50:57'!
ERROR!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:50:57'!
ERROR!

!testRun: #TusLibrosShop2Test #test01ANewCartIsEmpty stamp: 'IO 11/18/2020 16:51:03'!
PASSED!

!testRun: #TusLibrosShop2Test #test02ABookCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:51:03'!
PASSED!

!testRun: #TusLibrosShop2Test #test03ManyBooksCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:51:03'!
PASSED!

!testRun: #TusLibrosShop2Test #test04CanAddMoreThanOneFromTheSameBook stamp: 'IO 11/18/2020 16:51:03'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:51:03'!
ERROR!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:51:03'!
ERROR!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:51:03'!
ERROR!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:51:03'!
ERROR!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:51:03'!
ERROR!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:51:32' prior: 50869095!
listCart: cartId 
	^(carts at: cartId) copy.! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:51:35'!
ERROR!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:51:40'!
ERROR!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:51:40'!
ERROR!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:51:40'!
ERROR!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:51:40'!
ERROR!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:51:40'!
ERROR!

carts at: 0.!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 16:52:22' prior: 50869128!
newCartForUser: aString Password: aString2 
	carts add: Bag new.
	^carts size.
! !

!testRun: #TusLibrosShop2Test #test01ANewCartIsEmpty stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShop2Test #test02ABookCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShop2Test #test03ManyBooksCanBeAddedToTheCart stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShop2Test #test04CanAddMoreThanOneFromTheSameBook stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:52:23'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:52:23'!
FAILURE!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:52:23'!
FAILURE!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:52:40' prior: 50869010!
test05CanAddMoreThanOneCart

	| tusLibros cartId cartId2 cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	cartId2 := tusLibros newCartForUser: 'admin2' Password: 'password'.

	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 2.
	
	tusLibros addToCart: cartId2 booksIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId2 booksIsbn: '0-7645-2641-4' bookQuantity: 3.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 5.
	cart add: '0-7645-2641-4' withOccurrences: 3.

	self assert: cart equals: (tusLibros listCart: cartId2).

! !

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:52:41'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:52:41'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:52:41'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:52:41'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:52:41'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:52:41'!
PASSED!

Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 16:53:10'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 16:53:18' prior: 50869060!
initializeFromCatalogue: aCatalogue users: users 

	carts := OrderedCollection new.
! !

!classRemoval: #TusLibrosShop2Test stamp: 'IO 11/18/2020 16:54:49'!
TestCase subclass: #TusLibrosShop2Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #TusLibrosShop2 stamp: 'IO 11/18/2020 16:54:52'!
Object subclass: #TusLibrosShop2
	instanceVariableNames: 'books catalog usersAndPasswords carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 16:59:03'!
test05AClientInitialyHasNowPurchases

	| tusLibros cartId purchases |

	tusLibros := self newTusLibros.
	
	purchases := Bag new.

	self assert: purchases equals: (tusLibros listPurchases: cartId).
	self assert: 0 equals: (tusLibros listPurchases: cartId) size.

! !

!testRun: #TusLibrosShopTest #test05AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 16:59:10'!
ERROR!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 16:59:22'!
listPurchases: anUndefinedObject 
	self shouldBeImplemented.! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 16:59:28' prior: 50869343!
listPurchases: anUndefinedObject 
	^Bag new.! !

!testRun: #TusLibrosShopTest #test05AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 16:59:31'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:59:31'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:59:31'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:59:31'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:59:31'!
PASSED!

!testRun: #TusLibrosShopTest #test05AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 16:59:31'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:59:31'!
PASSED!

!testRun: #TusLibrosShopTest #test05AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 16:59:33'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 16:59:33'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 16:59:33'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 16:59:33'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 16:59:33'!
PASSED!

!testRun: #TusLibrosShopTest #test05AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 16:59:33'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 16:59:33'!
PASSED!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:00:13'!
listPurchases 
	^Bag new.! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:00:32'!
listPurchasesFor: aClient password: password
	^Bag new.! !

!methodRemoval: TusLibrosShop #listPurchases stamp: 'IO 11/18/2020 17:00:34'!
listPurchases 
	^Bag new.!

!methodRemoval: TusLibrosShop #listPurchases: stamp: 'IO 11/18/2020 17:00:37'!
listPurchases: anUndefinedObject 
	^Bag new.!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:00:52'!
test06AClientInitialyHasNowPurchases

	| tusLibros cartId purchases |

	tusLibros := self newTusLibros.
	
	purchases := Bag new.

	self assert: purchases equals: (tusLibros listPurchases: cartId).
	self assert: 0 equals: (tusLibros listPurchases: cartId) size.

! !

!methodRemoval: TusLibrosShopTest #test05AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:00:52'!
test05AClientInitialyHasNowPurchases

	| tusLibros cartId purchases |

	tusLibros := self newTusLibros.
	
	purchases := Bag new.

	self assert: purchases equals: (tusLibros listPurchases: cartId).
	self assert: 0 equals: (tusLibros listPurchases: cartId) size.

!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:02:24' prior: 50869413!
test06AClientInitialyHasNowPurchases

	| tusLibros purchases |

	tusLibros := self newTusLibros.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	self assert: (Bag new) equals: purchases.
	self assert: 0 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:02:28'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:02:28'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:02:28'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:02:28'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:02:28'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:02:28'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:02:28'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:02:41'!
test07AClientCanCheckoutACart

	| tusLibros purchases |

	tusLibros := self newTusLibros.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	self assert: (Bag new) equals: purchases.
	self assert: 0 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:03:38' prior: 50869471!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '' bookQuantity: 2.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	self assert: (Bag new) equals: purchases.
	self assert: 0 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:04:57' prior: 50869483!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrencies: 2.

	self assert: (Bag new) equals: purchases.
	self assert: 0 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:05:07' prior: 50869499!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: (Bag new) equals: purchases.
	self assert: 0 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:05:16' prior: 50869519!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: (Bag new) equals: purchases.
	self assert: 2 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:05:19'!
FAILURE!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:05:32' prior: 50869539!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: expectedPurchases equals: purchases.
	self assert: 2 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:05:32'!
FAILURE!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:07:45' prior: 50869562!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: expectedPurchases equals: purchases.
	self assert: 2 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:07:47'!
ERROR!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:07:59'!
checkoutCart: aSmallInteger ccn: aString cced: aString3 cco: aString4 
	self shouldBeImplemented.! !

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:08:35'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts checkout'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:08:43' prior: 50869610!
checkoutCart: aSmallInteger ccn: aString cced: aString3 cco: aString4 
	checkout := carts at: aSmallInteger.
! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:09:10' prior: 50869625!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	checkout := carts at: cartId.
! !

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:09:15'!
FAILURE!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:09:33'!
FAILURE!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:10:01' prior: 50869401!
listPurchasesFor: aClient password: password
	(checkout notNil) ifTrue: checkout copy.
	^Bag new.! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:10:02'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:10:02'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:10:02'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:10:02'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:10:02'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:10:02'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:10:02'!
FAILURE!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:10:02'!
FAILURE!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:10:13' prior: 50869632!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	checkout := carts at: cartId copy.
! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:10:13'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:10:13'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:10:13'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:10:13'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:10:13'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:10:13'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:10:13'!
FAILURE!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:10:13'!
FAILURE!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:10:45' prior: 50869585!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: expectedPurchases equals: purchases.
	self assert: 2 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:10:46'!
FAILURE!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:11:23' prior: 50869644!
listPurchasesFor: aClient password: password
	(checkout notNil) ifTrue: [^checkout copy].
	^Bag new.! !

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:11:24'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:11:24'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:11:24'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:11:24'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:11:24'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:11:24'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:11:24'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:11:24'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:12:59'!
test08AClientCanCheckoutManyTimes

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 7.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 10 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:13:01'!
FAILURE!
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 17:15:06' prior: 50869309!
initializeFromCatalogue: aCatalogue users: users 

	carts := OrderedCollection new.
	checkout := Bag new.
! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:15:34' prior: 50869676!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	checkout addAll: (carts at: cartId).
! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:15:40'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:15:45'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:15:45'!
PASSED!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:16:09'!
test09ManyClientsCanCheckout

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForUser: 'admin2' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 7.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 10 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:16:19' prior: 50869869!
test09ManyClientsCanCheckout

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForUser: 'admin2' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 5.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 8 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:16:32'!
FAILURE!

Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts cartClients checkout'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:17:42'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts cartClients checkout'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:18:25' prior: 50869214!
newCartForUser: user Password: password 
	carts add: Bag new.
	cartClients add: user.
	^carts size.
! !
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 17:18:54' prior: 50869802!
initializeFromCatalogue: aCatalogue users: users 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	checkout := Dictionary new.
! !

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:19:12'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts cartClients checkout checkouts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:19:10' prior: 50869733!
listPurchasesFor: aClient password: password
	
	^checkouts! !
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 17:19:16' prior: 50869960!
initializeFromCatalogue: aCatalogue users: users 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	checkouts := Dictionary new.
! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:19:33' prior: 50869977!
listPurchasesFor: user password: password
	
	^checkouts at: user.! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:19:38' prior: 50869990!
listPurchasesFor: user password: password
	
	^checkouts at: user copy.! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:20:07' prior: 50869809!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	
! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:22:35' prior: 50870001!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| clientId  |
	clientId := cartClients at: cartId.
	checkout := checkouts at: clientId.
	
! !

Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts cartClients checkouts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:22:41'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts cartClients checkouts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:24:05' prior: 50870006!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := checkouts at: clientId.
	checkout addAll: cart.

	
! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:24:07'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:24:07'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:24:07'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:24:07'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:24:07'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:24:07'!
ERROR!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:24:07'!
ERROR!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:24:07'!
ERROR!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:24:07'!
ERROR!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:24:15'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:24:15'!
ERROR!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:24:15'!
ERROR!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:24:15'!
ERROR!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:24:15'!
ERROR!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:24:29'!
ERROR!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:24:43'!
ERROR!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:25:11'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:25:11'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:25:11'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:25:11'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:25:11'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:25:11'!
ERROR!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:25:11'!
ERROR!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:25:11'!
ERROR!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:25:11'!
ERROR!

checkouts at: 'asd'.!

checkouts!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:27:12' prior: 50869995!
listPurchasesFor: user password: password
	
	^checkouts at: user ifAbsent: (Bag new) copy.! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:27:21'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:27:21'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:27:21'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:27:21'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:27:21'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:27:21'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:27:21'!
ERROR!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:27:21'!
ERROR!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:27:21'!
ERROR!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:27:48' prior: 50870131!
listPurchasesFor: user password: password
	
	^checkouts at: user ifAbsent: [^Bag new] copy.! !

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:27:51'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:27:53'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:27:53'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:27:53'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:27:53'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:27:53'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:27:53'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:27:53'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:27:53'!
ERROR!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:27:53'!
ERROR!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:27:53'!
ERROR!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:28:05'!
ERROR!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:28:09'!
ERROR!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:28:09'!
ERROR!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:29:00'!
ERROR!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:30:03' prior: 50870028!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := checkouts at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.

	
! !

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:30:05'!
FAILURE!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:30:48' prior: 50870220!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := checkouts at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	checkouts at: clientId put: checkout.

	
! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:31:05'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:31:05'!
FAILURE!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:31:05'!
FAILURE!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:31:14'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:31:14'!
FAILURE!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:31:14'!
FAILURE!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:31:39' prior: 50869903!
test09ManyClientsCanCheckout

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForUser: 'admin2' Password: 'password'.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId booksIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin2' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 5.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 8 equals: purchases size.

! !

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:31:41'!
PASSED!

----SNAPSHOT----(18 November 2020 17:35:01) CuisUniversity-4384.image priorSource: 17160590!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:39:34'!
PASSED!

!classDefinition: #TusLibrosShop category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:39:42'!
Object subclass: #TusLibrosShop
	instanceVariableNames: 'carts cartClients purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosShop methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:39:42' prior: 50870234!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := purchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	purchases at: clientId put: checkout.

	
! !
!TusLibrosShop methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:39:42' prior: 50869982!
initializeFromCatalogue: aCatalogue users: users 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	purchases := Dictionary new.
! !
!TusLibrosShop methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:39:42' prior: 50870166!
listPurchasesFor: user password: password
	
	^purchases at: user ifAbsent: [^Bag new] copy.! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:39:45'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:39:45'!
PASSED!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:40:14'!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.! !

!methodRemoval: TusLibrosShop #addToCart:booksIsbn:bookQuantity: stamp: 'IO 11/18/2020 17:40:14'!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:40:17'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:40:17'!
ERROR!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:40:17'!
ERROR!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:40:17'!
ERROR!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:40:17'!
ERROR!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:40:17'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:40:17'!
ERROR!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:40:17'!
ERROR!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:40:17'!
ERROR!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:40:25'!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.! !

!methodRemoval: TusLibrosShop #addToCart:bookIsbn:bookQuantity: stamp: 'IO 11/18/2020 17:40:25'!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:40:30'!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:40:30' prior: 50868767!
test02CanAddABookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:40:31' prior: 50868825!
test03CanAddDifferentBooksToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 1.

	cart := Bag new.
	cart add: '0-7645-2641-3'.
	cart add: '0-7645-2641-4'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:40:31' prior: 50869252!
test05CanAddMoreThanOneCart

	| tusLibros cartId cartId2 cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	cartId2 := tusLibros newCartForUser: 'admin2' Password: 'password'.

	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 2.
	
	tusLibros addToCart: cartId2 bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId2 bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 5.
	cart add: '0-7645-2641-4' withOccurrences: 3.

	self assert: cart equals: (tusLibros listCart: cartId2).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:40:31' prior: 50869708!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: expectedPurchases equals: purchases.
	self assert: 2 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:40:31' prior: 50869765!
test08AClientCanCheckoutManyTimes

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 7.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 10 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:40:31' prior: 50870310!
test09ManyClientsCanCheckout

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForUser: 'admin2' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin2' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 5.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 8 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:40:31' prior: 50868973!
test04CanAddMoreThanOneBookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForUser: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 2.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 3.
	cart add: '0-7645-2641-4' withOccurrences: 2.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!methodRemoval: TusLibrosShop #addToCart:booksIsbn:bookQuantity: stamp: 'IO 11/18/2020 17:40:31'!
addToCart: cartId booksIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:40:33'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:40:33'!
PASSED!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:40:38' prior: 50869191!
listCart: cartId 
	^(carts at: cartId) copy.
! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:40:42' prior: 50870738!
listCart: cartId 
	^carts at: cartId copy.
! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:40:42'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:40:42'!
PASSED!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:40:56' prior: 50869953!
newCartForUser: user Password: password
	carts add: Bag new.
	cartClients add: user.
	^carts size.
! !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:40:57'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:40:57'!
PASSED!
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:41:29'!
newCartForClientId: user Password: password
	carts add: Bag new.
	cartClients add: user.
	^carts size.
! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50870650!
test09ManyClientsCanCheckout

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForClientId: 'admin2' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin2' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 5.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 8 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50870593!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: expectedPurchases equals: purchases.
	self assert: 2 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50870616!
test08AClientCanCheckoutManyTimes

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 7.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 10 equals: purchases size.

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50870684!
test04CanAddMoreThanOneBookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 2.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 3.
	cart add: '0-7645-2641-4' withOccurrences: 2.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50870567!
test05CanAddMoreThanOneCart

	| tusLibros cartId cartId2 cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	cartId2 := tusLibros newCartForClientId: 'admin2' Password: 'password'.

	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 2.
	
	tusLibros addToCart: cartId2 bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId2 bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 5.
	cart add: '0-7645-2641-4' withOccurrences: 3.

	self assert: cart equals: (tusLibros listCart: cartId2).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50870535!
test02CanAddABookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50870549!
test03CanAddDifferentBooksToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 1.

	cart := Bag new.
	cart add: '0-7645-2641-3'.
	cart add: '0-7645-2641-4'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:41:29' prior: 50868525!
test01NewCartIsEmpty

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !

!methodRemoval: TusLibrosShop #newCartForUser:Password: stamp: 'IO 11/18/2020 17:41:29'!
newCartForUser: user Password: password
	carts add: Bag new.
	cartClients add: user.
	^carts size.
!

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:41:31'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:45:47'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:45:47'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:45:47'!
PASSED!
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:46:13' prior: 50870416!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := purchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	purchases at: clientId put: checkout.
! !
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 17:48:46'!
initializeWithCatalogue: aCatalogue withUsers: users 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	purchases := Dictionary new.
! !
!TusLibrosShop class methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:48:46' prior: 50868244!
fromCatalogue: anOrderedCollection users: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"

	^self new initializeWithCatalogue: anOrderedCollection withUsers: aDictionary ! !

!methodRemoval: TusLibrosShop #initializeFromCatalogue:users: stamp: 'IO 11/18/2020 17:48:46'!
initializeFromCatalogue: aCatalogue users: users 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	purchases := Dictionary new.
!
!TusLibrosShop class methodsFor: 'instance creation' stamp: 'IO 11/18/2020 17:49:02'!
withCatalogue: anOrderedCollection withClients: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"

	^self new initializeWithCatalogue: anOrderedCollection withUsers: aDictionary ! !
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:49:02' prior: 50869036!
newTusLibros

	| tusLibros users catalogue |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	users := Dictionary newFromPairs: #('admin', 'password', 'admin2', 'password').
	tusLibros := TusLibrosShop withCatalogue: catalogue withClients: users.

	^tusLibros.
! !

!methodRemoval: TusLibrosShop class #fromCatalogue:users: stamp: 'IO 11/18/2020 17:49:02'!
fromCatalogue: anOrderedCollection users: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"

	^self new initializeWithCatalogue: anOrderedCollection withUsers: aDictionary !

!testRun: #TusLibrosShopTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:49:04'!
PASSED!

!testRun: #TusLibrosShopTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:49:04'!
PASSED!
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 17:49:17'!
initializeWithCatalogue: aCatalogue withClients: users 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	purchases := Dictionary new.
! !
!TusLibrosShop class methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:49:17' prior: 50871077!
withCatalogue: anOrderedCollection withClients: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"

	^self new initializeWithCatalogue: anOrderedCollection withClients: aDictionary ! !

!methodRemoval: TusLibrosShop #initializeWithCatalogue:withUsers: stamp: 'IO 11/18/2020 17:49:17'!
initializeWithCatalogue: aCatalogue withUsers: users 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	purchases := Dictionary new.
!
!TusLibrosShop methodsFor: 'initialization' stamp: 'IO 11/18/2020 17:49:48' prior: 50871137!
initializeWithCatalogue: aCatalogue withClients: clients 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	purchases := Dictionary new.
! !
!TusLibrosShop class methodsFor: 'instance creation' stamp: 'IO 11/18/2020 17:50:12' prior: 50871146!
withCatalogue: aCatalogue withClients: clients 

	^self new initializeWithCatalogue: aCatalogue withClients: clients.
 ! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:50:27' prior: 50870436!
listPurchasesFor: user password: password
	
	^purchases at: user ifAbsent: [^Bag new] copy.
! !
!TusLibrosShop methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:51:06' prior: 50871180!
listPurchasesFor: clientId password: password
	
	^purchases at: clientId ifAbsent: [^Bag new] copy.
! !
!TusLibrosShop methodsFor: 'cart' stamp: 'IO 11/18/2020 17:51:16' prior: 50870810!
newCartForClientId: clientId Password: password
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:52:51'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #TusLibros stamp: 'IO 11/18/2020 17:52:54'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRenamed: #TusLibrosShop as: #TusLibros stamp: 'IO 11/18/2020 17:52:57'!
Smalltalk renameClassNamed: #TusLibrosShop as: #TusLibros!
!TusLibrosShopTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:52:57' prior: 50871087!
newTusLibros

	| tusLibros users catalogue |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	users := Dictionary newFromPairs: #('admin', 'password', 'admin2', 'password').
	tusLibros := TusLibros withCatalogue: catalogue withClients: users.

	^tusLibros.
! !

!classRenamed: #TusLibrosShopTest as: #TusLibrosTest stamp: 'IO 11/18/2020 17:53:03'!
Smalltalk renameClassNamed: #TusLibrosShopTest as: #TusLibrosTest!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:53:05'!
PASSED!

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:53:38'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientPurchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:53:38' prior: 50871039!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientPurchases at: clientId put: checkout.
! !
!TusLibros methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:53:38' prior: 50871164!
initializeWithCatalogue: aCatalogue withClients: clients 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:53:38' prior: 50871186!
listPurchasesFor: clientId password: password
	
	^clientPurchases at: clientId ifAbsent: [^Bag new] copy.
! !

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:53:52'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:53:52' prior: 50871277!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !
!TusLibros methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:53:52' prior: 50871289!
initializeWithCatalogue: aCatalogue withClients: clients 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 17:53:52' prior: 50871298!
listPurchasesFor: clientId password: password
	
	^clientsPurchases at: clientId ifAbsent: [^Bag new] copy.
! !

Object subclass: #TusLibrosClientPurchases
	instanceVariableNames: 'purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosClientPurchases category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 17:54:13'!
Object subclass: #TusLibrosClientPurchases
	instanceVariableNames: 'purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:55:12' prior: 50871313!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [TusLibrosClientPurchases new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:55:24' prior: 50871354!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [TusLibrosClientPurchases new].
	checkout addCart: cart.
	clientsPurchases at: clientId put: checkout.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:55:29' prior: 50871367!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [TusLibrosClientPurchases new].
	checkout addCart: cart.
! !
!TusLibrosClientPurchases methodsFor: 'no messages' stamp: 'IO 11/18/2020 17:55:56'!
addCart: aCart
	purchases addAll: aCart.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:56:39' prior: 50871334!
listPurchasesFor: clientId password: password
	
	^clientsPurchases at: clientId ifAbsent: [^TusLibrosClientPurchases new] copy.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:57:06' prior: 50871380!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [TusLibrosClientPurchases new].
	checkout addCart: cart.
	clientsPurchases at: clientId put: checkout.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:58:23' prior: 50871396!
listPurchasesFor: clientId password: password
	
	
	^clientsPurchases at: clientId ifAbsent: [^Bag new] copy.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:58:27' prior: 50871403!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addCart: cart.
	clientsPurchases at: clientId put: checkout.
! !

!classRemoval: #TusLibrosClientPurchases stamp: 'IO 11/18/2020 17:58:30'!
Object subclass: #TusLibrosClientPurchases
	instanceVariableNames: 'purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:58:31'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:58:31'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:58:31'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:58:31'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:58:31'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:58:31'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:58:31'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:58:31'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:58:31'!
ERROR!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:58:41' prior: 50871423!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout add: cart.
	clientsPurchases at: clientId put: checkout.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:58:42'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:58:42'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:58:42'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:58:42'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:58:42'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:58:42'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:58:42'!
FAILURE!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:58:42'!
FAILURE!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:58:42'!
FAILURE!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 17:58:46' prior: 50871470!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 17:58:47'!
PASSED!

Object subclass: #TusLibrosClientCarts
	instanceVariableNames: 'clientId carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosClientCarts category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 18:00:25'!
Object subclass: #TusLibrosClientCarts
	instanceVariableNames: 'clientId carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:00:51' prior: 50871192!
newCartForClientId: clientId Password: password
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases clientsCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 18:01:01'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases clientsCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:01:35' prior: 50871562!
newCartForClientId: clientId Password: password
	carts add: Bag new.
	cartClients add: clientId.
	clientsCarts add: TusLibrosClientCarts new.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:01:40'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:01:40'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:01:51'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:01:51'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:01:56'!
ERROR!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 18:02:44' prior: 50871325!
initializeWithCatalogue: aCatalogue withClients: clients 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsCarts := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:02:45'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:02:45'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:02:59' prior: 50870527!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity
	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:04:22' prior: 50871686!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart clientCart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
	
	clientCart add: isbn withOccurrences: quantity.! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:04:38' prior: 50871693!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart clientCart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
	
	clientCart := clientsCarts at: cartId.
	clientCart add: isbn withOccurrences: quantity.! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:04:39'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:04:39'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:04:39'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:04:39'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:04:39'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:04:39'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:04:39'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:04:39'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:04:39'!
ERROR!
!TusLibrosClientCarts methodsFor: 'nil' stamp: 'IO 11/18/2020 18:04:49'!
add: isbn withOccurrences: quantity.
	! !

!classDefinition: #TusLibrosClientCarts category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 18:05:13'!
Object subclass: #TusLibrosClientCarts
	instanceVariableNames: 'clientId carts bag'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:05:39' prior: 50871702!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart clientCart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
	! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:05:41' prior: 50871753!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:05:50' prior: 50871583!
newCartForClientId: clientId Password: password
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 18:05:55'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:05:57'!
PASSED!

!classRemoval: #TusLibrosClientCarts stamp: 'IO 11/18/2020 18:06:00'!
Object subclass: #TusLibrosClientCarts
	instanceVariableNames: 'clientId carts bag'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:06:01'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:06:01'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 18:06:07' prior: 50871649!
initializeWithCatalogue: aCatalogue withClients: clients 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.

	clientsPurchases := Dictionary new.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:06:08'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:06:08'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 18:06:10' prior: 50871851!
initializeWithCatalogue: aCatalogue withClients: clients 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibrosTest methodsFor: 'cart' stamp: 'IO 11/18/2020 18:08:38'!
test10ClientIdExists

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin3' Password: 'password'.
	
	self should: [] raise: Error withMessageText: TusLibros inexistentClient.
! !
!TusLibrosTest methodsFor: 'cart' stamp: 'IO 11/18/2020 18:08:58' prior: 50871895!
test10ClientIdExists

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin3' Password: 'password'.]
		raise: Error
		withMessageText: TusLibros inexistentClient.
! !

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:09:01'!
ERROR!
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:09:23'!
inexistentClient
	self shouldBeImplemented.! !
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:09:39' prior: 50871917!
inexistentClient
	^'Client id not existent'.
! !

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:09:42'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:10:06' prior: 50871768!
newCartForClientId: clientId Password: password
	
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !
!TusLibros class methodsFor: 'instance creation' stamp: 'IO 11/18/2020 18:10:56' prior: 50871173!
withCatalogue: aCatalogue withClients: aClientList 

	^self new initializeWithCatalogue: aCatalogue withClients: aClientList.
 ! !
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 18:11:07' prior: 50871887!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 18:11:16'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases clients'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 18:11:14' prior: 50871943!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	clients := aClientList.

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:12:20' prior: 50871929!
newCartForClientId: clientId Password: password
	(clients ) ifTrue: [^self error: TusLibros].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:12:32'!
inexistentClientErrorMessage
	^'Client id not existent'.
! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 18:12:32' prior: 50871905!
test10ClientIdExists

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin3' Password: 'password'.]
		raise: Error
		withMessageText: TusLibros inexistentClientErrorMessage.
! !

!methodRemoval: TusLibros class #inexistentClient stamp: 'IO 11/18/2020 18:12:32'!
inexistentClient
	^'Client id not existent'.
!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:12:43' prior: 50871970!
newCartForClientId: clientId Password: password
	(clients ) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:13:51' prior: 50871997!
newCartForClientId: clientId Password: password
	(clients includes: clientId negated) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:13:53'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:13:53'!
ERROR!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:13:53'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:14:10' prior: 50872006!
newCartForClientId: clientId Password: password
	(clients includesKey: clientId negated) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:14:11'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:14:11'!
ERROR!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:14:11'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:14:26' prior: 50872046!
newCartForClientId: clientId Password: password
	((clients includesKey: clientId) negated) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:14:27'!
ERROR!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:14:37' prior: 50872086!
newCartForClientId: clientId Password: password
	((clients includesKey: clientId) not) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:14:38'!
PASSED!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:14:38'!
PASSED!
!TusLibrosTest methodsFor: 'newCart validations' stamp: 'IO 11/18/2020 18:15:37'!
test11ClientPasswordMatches

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin' Password: 'password2'.]
		raise: Error
		withMessageText: TusLibros invalidPasswordErrorMessage.
! !

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:15:39'!
ERROR!
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:15:51'!
invalidPasswordErrorMessage
	self shouldBeImplemented.! !
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:16:09' prior: 50872152!
invalidPasswordErrorMessage
	^'Invalid password'.
! !

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:16:14'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:17:28' prior: 50872099!
newCartForClientId: clientId Password: password
	((clients includesKey: clientId) not) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	((clients at: clientId) equals: password not) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:17:31'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:17:31'!
ERROR!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:17:31'!
PASSED!

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:17:31'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:18:21' prior: 50872165!
newCartForClientId: clientId Password: password
	((clients includesKey: clientId) not) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	(((clients at: clientId) equals: password) not) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:18:23'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:18:23'!
ERROR!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:18:23'!
PASSED!

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:18:23'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:18:37' prior: 50872211!
newCartForClientId: clientId Password: password
	((clients includesKey: clientId) not) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	(((clients at: clientId) = password) not) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:18:38'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:18:38'!
ERROR!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:18:38'!
PASSED!

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:18:38'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:18:44' prior: 50872257!
newCartForClientId: clientId Password: password
	((clients includesKey: clientId) not) ifTrue: [^self error: TusLibros inexistentClientErrorMessage].
	(((clients at: clientId) = password) not) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:18:45'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:18:45'!
ERROR!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:18:45'!
PASSED!

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:18:45'!
PASSED!

clients at: clientId!

clients at: 1!

clients at: 'admin'!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:19:38'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:19:38'!
ERROR!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:19:38'!
PASSED!

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:19:38'!
PASSED!

users!

users at: 'admin'!
!TusLibrosTest methodsFor: 'valid instances' stamp: 'IO 11/18/2020 18:20:03' prior: 50871224!
newTusLibros

	| tusLibros users catalogue |
	
	catalogue := OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4'.
	users := Dictionary newFromPairs: #('admin' 'password' 'admin2' 'password').
	tusLibros := TusLibros withCatalogue: catalogue withClients: users.

	^tusLibros.
! !

users at: 'admin'!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:20:17'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:20:20'!
PASSED!

!testRun: #TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:20:20'!
PASSED!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:21:14'!
test11CreateCartClientPasswordMatches

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin' Password: 'password2'.]
		raise: Error
		withMessageText: TusLibros invalidPasswordErrorMessage.
! !

!methodRemoval: TusLibrosTest #test11ClientPasswordMatches stamp: 'IO 11/18/2020 18:21:14'!
test11ClientPasswordMatches

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin' Password: 'password2'.]
		raise: Error
		withMessageText: TusLibros invalidPasswordErrorMessage.
!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:21:20'!
test10CreateCartClientIdExists

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin3' Password: 'password'.]
		raise: Error
		withMessageText: TusLibros inexistentClientErrorMessage.
! !

!methodRemoval: TusLibrosTest #test10ClientIdExists stamp: 'IO 11/18/2020 18:21:20'!
test10ClientIdExists

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin3' Password: 'password'.]
		raise: Error
		withMessageText: TusLibros inexistentClientErrorMessage.
!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:21:50' prior: 50872303!
newCartForClientId: clientId Password: password

	(((clients at: clientId ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password) not) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:21:51'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:21:51'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:22:41' prior: 50872476!
newCartForClientId: clientId Password: password
	(
		(
			(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password
			) not
	) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:22:42'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:22:42'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:22:51' prior: 50872522!
newCartForClientId: clientId Password: password
	(
		(
			(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password) not
	) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:22:57' prior: 50872568!
newCartForClientId: clientId Password: password
	(
		((clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password) not
	) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:22:58'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:22:58'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:23:07' prior: 50872580!
newCartForClientId: clientId Password: password
	(
		(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password not
	) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:23:08'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:23:08'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:23:08'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:23:08'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:23:11' prior: 50872626!
newCartForClientId: clientId Password: password
	(
		((clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password) not
	) ifTrue: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:23:12'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:23:12'!
PASSED!
!TusLibrosTest methodsFor: 'cart' stamp: 'IO 11/18/2020 18:25:02'!
test12AddToCartHasValidCartId

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := 1.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:25:21'!
ERROR!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:26:04' prior: 50872718!
test12AddToCartHasValidCartId

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros addToCart: 1 bookIsbn: '0-7645-2641-3' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:26:08'!
ERROR!
!TusLibros class methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 18:26:16'!
invalidCartIdErrorMessage
	self shouldBeImplemented.! !
!TusLibros class methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 18:26:25' prior: 50872747!
invalidCartIdErrorMessage
	'Invalid cart id'.! !

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:26:27'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:27:10' prior: 50871761!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage ].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:27:12' prior: 50872760!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:27:13'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:27:13'!
PASSED!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:28:32'!
test13AddToCartHasValidISBN

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [ | cartId |tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:28:59' prior: 50872817!
test13AddToCartHasValidISBN

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:29:00'!
FAILURE!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:29:12' prior: 50872828!
test13AddToCartHasValidISBN

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: 'bad isbn' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:29:13'!
FAILURE!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:29:17' prior: 50872844!
test13AddToCartHasValidISBN

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: 'bad isbn' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.

! !

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 18:29:35'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases clients catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 18:29:32' prior: 50871961!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := aClientList.

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:30:22' prior: 50872770!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage].
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbn].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !
!TusLibros class methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 18:30:40'!
invalidIsbn
	^'Isbn not in catalogue'.
! !
!TusLibros class methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 18:30:44'!
invalidIsbnErrorMessage
	^'Isbn not in catalogue'.
! !

!methodRemoval: TusLibros class #invalidIsbn stamp: 'IO 11/18/2020 18:30:47'!
invalidIsbn
	^'Isbn not in catalogue'.
!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:30:58' prior: 50872892!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage].
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:31:04' prior: 50872860!
test13AddToCartHasValidISBN

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: 'bad isbn' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidIsbnErrorMessage.

! !

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:31:04'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:31:05'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:31:05'!
PASSED!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:31:23'!
test14AddToCartHasValidQuantity

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: 'bad isbn' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidIsbnErrorMessage.

! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:31:51' prior: 50872985!
test14AddToCartHasValidQuantity

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 0.]
		raise: Error
		withMessageText: TusLibros invalidQuantityErrorMessage.

! !

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:31:53'!
ERROR!
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:32:01'!
invalidQuantityErrorMessage
	self shouldBeImplemented.! !
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:32:12' prior: 50873014!
invalidQuantityErrorMessage
	^'Quantity added must be more than 0'.! !

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:32:15'!
FAILURE!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:32:19'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:32:49' prior: 50872916!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage].
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(quantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:32:50'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:32:50'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:33:10' prior: 50873030!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage].
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(quantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:33:11'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:33:11'!
PASSED!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:33:54'!
test15ListCartHasValidCartId

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros listCart: 1]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:33:55'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:34:12' prior: 50870743!
listCart: cartId 
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage].
	^carts at: cartId copy.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:34:12'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:34:12'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:34:38'!
errorInvalidCartId
	^self error: TusLibros invalidCartIdErrorMessage.! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:35:02' prior: 50873088!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	(cartId > carts size) ifTrue: [^self errorInvalidCartId].
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(quantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:35:10' prior: 50873158!
listCart: cartId 
	(cartId > carts size) ifTrue: [^self errorInvalidCartId].
	^carts at: cartId copy.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:35:10'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:35:10'!
PASSED!
!TusLibros methodsFor: 'validations' stamp: 'IO 11/18/2020 18:35:31'!
validateCartId
	^self error: TusLibros invalidCartIdErrorMessage.! !
!TusLibros methodsFor: 'validations' stamp: 'IO 11/18/2020 18:35:51'!
validateCartId: cartId
	(cartId > carts size) ifTrue: [^self error: TusLibros invalidCartIdErrorMessage].! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:36:07' prior: 50873216!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |
	self validateCartId: cartId.
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(quantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].
	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:36:13' prior: 50873230!
listCart: cartId 
	self validateCartId: cartId.
	^carts at: cartId copy.
! !

!methodRemoval: TusLibros #errorInvalidCartId stamp: 'IO 11/18/2020 18:36:17'!
errorInvalidCartId
	^self error: TusLibros invalidCartIdErrorMessage.!

!methodRemoval: TusLibros #validateCartId stamp: 'IO 11/18/2020 18:36:18'!
validateCartId
	^self error: TusLibros invalidCartIdErrorMessage.!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:36:20'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:36:20'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:38:14' prior: 50872672!
newCartForClientId: clientId Password: password
	(
		((clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password)
	) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:38:15'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:38:15'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:38:20' prior: 50873367!
newCartForClientId: clientId Password: password
	(
		(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password
	) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:38:21'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:38:21'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:38:26' prior: 50873425!
newCartForClientId: clientId Password: password
	(
		(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password
	) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].
	
	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:41:52'!
test17ChackoutHasValidCartId

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros listCart: 1]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:41:55'!
test16ChackoutHasValidCartId

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros listCart: 1]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !

!methodRemoval: TusLibrosTest #test17ChackoutHasValidCartId stamp: 'IO 11/18/2020 18:41:58'!
test17ChackoutHasValidCartId

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros listCart: 1]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:42:02'!
test16CheckoutHasValidCartId

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros listCart: 1]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !

!methodRemoval: TusLibrosTest #test16ChackoutHasValidCartId stamp: 'IO 11/18/2020 18:42:02'!
test16ChackoutHasValidCartId

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros listCart: 1]
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:43:21' prior: 50873522!
test16CheckoutHasValidCartId

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	self should: [tusLibros checkoutCart: 3 ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 18:43:22'!
FAILURE!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:44:02' prior: 50871509!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	self validateCartId: cartId.
	cart := carts at: cartId.
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:44:06'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 18:44:06'!
PASSED!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:48:22'!
test17CheckoutHasCartWithBooks

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.

	self should: [tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros emptyCartErrorMessage.


! !

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 18:48:25'!
ERROR!
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:48:33'!
emptyCartErrorMessage
	self shouldBeImplemented.! !
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:48:48' prior: 50873643!
emptyCartErrorMessage
	'The cart cannot be empty'.! !

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 18:48:49'!
FAILURE!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:49:29' prior: 50873560!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |
	self validateCartId: cartId.
	cart := carts at: cartId.
	(cart size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].
	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 18:49:30'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 18:51:18'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:53:15' prior: 50873293!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |

	self validateCartId: cartId.
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(quantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].

	cart := carts at: cartId.
	cart add: isbn withOccurrences: quantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:53:22' prior: 50873306!
listCart: cartId

	self validateCartId: cartId.

	^carts at: cartId copy.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 18:53:27' prior: 50873483!
newCartForClientId: clientId Password: password
	(
		(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password
	) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].

	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:53:34' prior: 50873656!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |

	self validateCartId: cartId.
	cart := carts at: cartId.
	(cart size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].

	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:53:38' prior: 50871416!
listPurchasesFor: clientId password: password
	
	^clientsPurchases at: clientId ifAbsent: [^Bag new] copy.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:53:38' prior: 50873772!
listPurchasesFor: clientId password: password

	^clientsPurchases at: clientId ifAbsent: [^Bag new] copy.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:53:55' prior: 50873757!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |

	self validateCartId: cartId.
	cart := carts at: cartId.
	(cart size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].
	self validateCcn: ccn.

	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !
!TusLibros methodsFor: 'validations' stamp: 'IO 11/18/2020 18:54:07'!
validateCcn: ccn
	! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:54:43'!
test18CheckoutHasValidCcn

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	self should: [tusLibros checkoutCart: cartId ccn: '5500 0000 000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros emptyCartErrorMessage.


! !

!testRun: #TusLibrosTest #test18CheckoutHasValidCcn stamp: 'IO 11/18/2020 18:54:46'!
FAILURE!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:54:58' prior: 50873804!
test18CheckoutHasValidCcn

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	self should: [tusLibros checkoutCart: cartId ccn: '5500 0000 000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros invalidCcnErrorMessage.


! !

!testRun: #TusLibrosTest #test18CheckoutHasValidCcn stamp: 'IO 11/18/2020 18:55:00'!
ERROR!
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:55:09'!
invalidCcnErrorMessage
	self shouldBeImplemented.! !
!TusLibros class methodsFor: 'error messages' stamp: 'IO 11/18/2020 18:55:17' prior: 50873844!
invalidCcnErrorMessage
	^'Invalid credit card number'.! !

!testRun: #TusLibrosTest #test18CheckoutHasValidCcn stamp: 'IO 11/18/2020 18:55:20'!
FAILURE!
!TusLibros methodsFor: 'validations' stamp: 'IO 11/18/2020 18:55:54' prior: 50873801!
validateCcn: ccn
	| number |
	number := ccn ! !
!TusLibrosTest methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:56:19' prior: 50870851!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	tusLibros checkoutCart: cartId ccn: 5500000000000004 cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: expectedPurchases equals: purchases.
	self assert: 2 equals: purchases size.

! !
!TusLibrosTest methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:56:28' prior: 50870874!
test08AClientCanCheckoutManyTimes

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: 5500000000000004 cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 7.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 10 equals: purchases size.

! !
!TusLibrosTest methodsFor: 'purchases' stamp: 'IO 11/18/2020 18:56:33' prior: 50870817!
test09ManyClientsCanCheckout

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: 5500000000000004 cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForClientId: 'admin2' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin2' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 5.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 8 equals: purchases size.

! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 18:56:49' prior: 50873824!
test18CheckoutHasValidCcn

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	self should: [tusLibros checkoutCart: cartId ccn: 5500000000000003 cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros invalidCcnErrorMessage.


! !
!TusLibros methodsFor: 'validations' stamp: 'IO 11/18/2020 18:57:10' prior: 50873857!
validateCcn: ccn
	| number |

	"ref: https://www.freeformatter.com/credit-card-number-generator-validator.html"
	number := ccn ! !

!methodRemoval: TusLibrosTest #test18CheckoutHasValidCcn stamp: 'IO 11/18/2020 19:04:18'!
test18CheckoutHasValidCcn

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	self should: [tusLibros checkoutCart: cartId ccn: 5500000000000003 cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros invalidCcnErrorMessage.


!

!methodRemoval: TusLibros #validateCcn: stamp: 'IO 11/18/2020 19:04:44'!
validateCcn: ccn
	| number |

	"ref: https://www.freeformatter.com/credit-card-number-generator-validator.html"
	number := ccn !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 19:04:51' prior: 50873786!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId checkout |

	self validateCartId: cartId.
	cart := carts at: cartId.
	(cart size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].

	clientId := cartClients at: cartId.
	checkout := clientsPurchases at: clientId ifAbsent: [Bag new].
	checkout addAll: cart.
	clientsPurchases at: clientId put: checkout.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 19:04:52'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 19:04:52'!
PASSED!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:06:30'!
test18ListPurchasesHasValidUser

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.

	self should: [tusLibros listPurchasesFor: 'admin3' password: 'password']
		raise: Error
		withMessageText: TusLibros 


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:06:33' prior: 50874066!
test18ListPurchasesHasValidUser

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.

	self should: [tusLibros listPurchasesFor: 'admin3' password: 'password']
		raise: Error
		withMessageText: TusLibros .


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:06:39' prior: 50874079!
test18ListPurchasesHasValidUser

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.

	self should: [tusLibros listPurchasesFor: 'admin3' password: 'password']
		raise: Error
		withMessageText: TusLibros .


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:06:46' prior: 50873625!
test17CheckoutHasCartWithBooks

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.

	self should: [tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros emptyCartErrorMessage.


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:06:50' prior: 50873540!
test16CheckoutHasValidCartId

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	self should: [tusLibros checkoutCart: 3 ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:07:12' prior: 50874093!
test18ListPurchasesHasValidUser

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' Password: 'password'.

	self should: [tusLibros listPurchasesFor: 'admin3' password: 'password']
		raise: Error
		withMessageText: TusLibros inexistentClientErrorMessage.


! !
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:07:20' prior: 50874135!
test18ListPurchasesHasValidUser

	| tusLibros |

	tusLibros := self newTusLibros.

	self should: [tusLibros listPurchasesFor: 'admin3' password: 'password']
		raise: Error
		withMessageText: TusLibros inexistentClientErrorMessage.


! !

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 19:07:23'!
FAILURE!
!TusLibrosTest methodsFor: 'validations' stamp: 'IO 11/18/2020 19:07:55'!
test19ListPurchasesHasMatchingPassword

	| tusLibros |

	tusLibros := self newTusLibros.

	self should: [tusLibros listPurchasesFor: 'admin' password: 'wrong password']
		raise: Error
		withMessageText: TusLibros invalidPasswordErrorMessage.


! !

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:07:57'!
FAILURE!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:07:57'!
FAILURE!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:08:01'!
FAILURE!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 19:08:36'!
validateClientId: clientId withPassword: password
	(
		(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password
	) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 19:08:46'!
newCartForClientId: clientId password: password
	(
		(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password
	) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].

	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50870967!
test03CanAddDifferentBooksToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 1.

	cart := Bag new.
	cart add: '0-7645-2641-3'.
	cart add: '0-7645-2641-4'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50872929!
test13AddToCartHasValidISBN

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: 'bad isbn' bookQuantity: 1.]
		raise: Error
		withMessageText: TusLibros invalidIsbnErrorMessage.

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50873862!
test07AClientCanCheckoutACart

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	tusLibros checkoutCart: cartId ccn: 5500000000000004 cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 2.

	self assert: expectedPurchases equals: purchases.
	self assert: 2 equals: purchases size.

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50874119!
test16CheckoutHasValidCartId

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.

	self should: [tusLibros checkoutCart: 3 ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros invalidCartIdErrorMessage.


! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50873884!
test08AClientCanCheckoutManyTimes

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: 5500000000000004 cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 7.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 10 equals: purchases size.

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50870908!
test04CanAddMoreThanOneBookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 2.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 3.
	cart add: '0-7645-2641-4' withOccurrences: 2.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50873918!
test09ManyClientsCanCheckout

	| tusLibros cartId purchases expectedPurchases |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 2.
	tusLibros checkoutCart: cartId ccn: 5500000000000004 cced: '20/2025' cco: 'Juan'.
	
	cartId := tusLibros newCartForClientId: 'admin2' password: 'password'.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan'.

	purchases := tusLibros listPurchasesFor: 'admin2' password: 'password'.

	expectedPurchases := Bag new.
	expectedPurchases add: '0-7645-2641-3' withOccurrences: 5.
	expectedPurchases add: '0-7645-2641-4' withOccurrences: 3.

	self assert: expectedPurchases equals: purchases.
	self assert: 8 equals: purchases size.

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50870953!
test02CanAddABookToCart

	| tusLibros cartId cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 1.
	
	cart := Bag new.
	cart add: '0-7645-2641-3'.

	self assert: cart equals: (tusLibros listCart: cartId).

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50872456!
test10CreateCartClientIdExists

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin3' password: 'password'.]
		raise: Error
		withMessageText: TusLibros inexistentClientErrorMessage.
! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50872435!
test11CreateCartClientPasswordMatches

	| tusLibros |

	tusLibros := self newTusLibros.
	
	self should: [tusLibros newCartForClientId: 'admin' password: 'password2'.]
		raise: Error
		withMessageText: TusLibros invalidPasswordErrorMessage.
! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50872998!
test14AddToCartHasValidQuantity

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	
	self should: [ tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 0.]
		raise: Error
		withMessageText: TusLibros invalidQuantityErrorMessage.

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50870985!
test01NewCartIsEmpty

	| tusLibros cartId |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	
	self assert: 0 equals: (tusLibros listCart: cartId) size.
! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50870927!
test05CanAddMoreThanOneCart

	| tusLibros cartId cartId2 cart |

	tusLibros := self newTusLibros.

	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.
	cartId2 := tusLibros newCartForClientId: 'admin2' password: 'password'.

	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-3' bookQuantity: 3.
	tusLibros addToCart: cartId bookIsbn: '0-7645-2641-4' bookQuantity: 2.
	
	tusLibros addToCart: cartId2 bookIsbn: '0-7645-2641-3' bookQuantity: 5.
	tusLibros addToCart: cartId2 bookIsbn: '0-7645-2641-4' bookQuantity: 3.

	cart := Bag new.
	cart add: '0-7645-2641-3' withOccurrences: 5.
	cart add: '0-7645-2641-4' withOccurrences: 3.

	self assert: cart equals: (tusLibros listCart: cartId2).

! !
!TusLibrosTest methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:08:46' prior: 50874105!
test17CheckoutHasCartWithBooks

	| tusLibros cartId |

	tusLibros := self newTusLibros.
	
	cartId := tusLibros newCartForClientId: 'admin' password: 'password'.

	self should: [tusLibros checkoutCart: cartId ccn: '5500 0000 0000 0004' cced: '20/2025' cco: 'Juan']
		raise: Error
		withMessageText: TusLibros emptyCartErrorMessage.


! !

!methodRemoval: TusLibros #newCartForClientId:Password: stamp: 'IO 11/18/2020 19:08:46'!
newCartForClientId: clientId Password: password
	(
		(clients at: clientId
				ifAbsent: [^self error: TusLibros inexistentClientErrorMessage]) = password
	) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].

	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 19:09:01' prior: 50874191!
newCartForClientId: clientId password: password
	self validateClientId: clientId withPassword: password.

	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 19:09:02'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 19:09:02'!
FAILURE!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:09:02'!
FAILURE!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 19:09:13' prior: 50873779!
listPurchasesFor: clientId password: password
	self validateClientId: clientId withPassword: password.

	^clientsPurchases at: clientId ifAbsent: [^Bag new] copy.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:09:14'!
PASSED!

----SNAPSHOT----(18 November 2020 19:13:42) CuisUniversity-4384.image priorSource: 17239174!

----QUIT----(18 November 2020 19:15:14) CuisUniversity-4384.image priorSource: 17374527!

----STARTUP---- (18 November 2020 19:47:07) as /Users/ilanolkies/uba/ingsoft1/macos64/CuisUniversity-4384.image!


!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:47:30'!
PASSED!

Object subclass: #TusLibrosClient
	instanceVariableNames: 'password purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosClient category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 19:48:02'!
Object subclass: #TusLibrosClient
	instanceVariableNames: 'password purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosClient class methodsFor: 'no messages' stamp: 'IO 11/18/2020 19:48:45'!
with: password

	^self basicNew with: password.! !
!TusLibrosClient methodsFor: 'nil' stamp: 'IO 11/18/2020 19:49:20'!
with: aPassword

	password := aPassword
! !
!TusLibrosClient methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:49:32' prior: 50874691!
with: aPassword

	password := aPassword.
	purchases := Bag new.

! !
!TusLibrosClient methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:49:55'!
checkout: aCart
	purchases addAll: aCart.
! !
!TusLibrosClient methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:51:01'!
validatePassword: aPassword
	(password = aPassword) ifFalse: [^self error: TusLibros invalidPasswordErrorMessage].
! !
!TusLibrosClient methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:51:17'!
purchases
	^purchases copy.! !
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 19:52:18' prior: 50872882!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := aClientList.
	
	clients keysDo: [ :key |  ].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 19:53:16' prior: 50874717!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	
	aClientList keysDo: [ :clientId | clients add: (TusLibrosClient for: (aClientList at: clientId))].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'validations' stamp: 'IO 11/18/2020 19:54:48' prior: 50874181!
validateClientId: clientId withPassword: password
	(clients at: clientId ifAbsent: [
		^self error: TusLibros inexistentClientErrorMessage]) validatePassword: password.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 19:54:49'!
ERROR!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 19:54:50'!
ERROR!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 19:54:50'!
ERROR!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 19:54:50'!
ERROR!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 19:54:50'!
ERROR!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:54:50'!
ERROR!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 19:56:52' prior: 50874538!
listPurchasesFor: clientId password: password
	self validateClientId: clientId withPassword: password.

	^clientsPurchases at: clientId purchases.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 19:57:29' prior: 50873999!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart clientId |

	self validateCartId: cartId.
	cart := carts at: cartId.
	(cart size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].

	clientId := cartClients at: cartId.
	(clients at: clientId) checkout: cart.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:57:31'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:57:39'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:57:43'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:57:43'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:57:56'!
ERROR!

aClientList at: clientId!
!TusLibrosClient class methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 19:59:00'!
for: aPassword

	^self basicNew with: aPassword.! !

!methodRemoval: TusLibrosClient class #with: stamp: 'IO 11/18/2020 19:59:06'!
with: password

	^self basicNew with: password.!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 19:59:14'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 19:59:41'!
ERROR!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:01:22' prior: 50874728!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	"(TusLibrosClient for: (aClientList at: clientId))"
	aClientList keysDo: [ :clientId | clients ].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:01:56' prior: 50874968!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.
	""
	aClientList keysDo: [ :clientId | clients ].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:02:01'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:02:01'!
FAILURE!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:02:01'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:02:01'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:02:01'!
ERROR!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:02:01'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:02:01'!
FAILURE!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:02:05' prior: 50874981!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.
	"(TusLibrosClient for: (aClientList at: clientId))"
	aClientList keysDo: [ :clientId | clients ].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:04:38' prior: 50875051!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.
	"(TusLibrosClient for: (aClientList at: clientId))"
	aClientList keysDo: [ :clientId | clients associationAt: Association].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:05:13' prior: 50875065!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.
	"(TusLibrosClient for: (aClientList at: clientId))"
	aClientList keysDo: [ :clientId | clients associationAt: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:05:14'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:05:17'!
ERROR!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:05:47'!
ERROR!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:06:01' prior: 50875079!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.
	"(TusLibrosClient for: (aClientList at: clientId))"
	aClientList keysDo: [ :clientId | clients add: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.
	clientsPurchases := Dictionary new.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:06:02'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:06:02'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:06:02'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:06:02'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:06:02'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:06:10'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:06:10'!
ERROR!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:07:09' prior: 50874808!
listPurchasesFor: clientId password: password
	self validateClientId: clientId withPassword: password.

	^clientsPurchases value: clientId purchases.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:07:11'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:07:11'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:07:11'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:07:11'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:07:11'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:07:23'!
ERROR!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:07:34' prior: 50875296!
listPurchasesFor: clientId password: password
	self validateClientId: clientId withPassword: password.

	^(clientsPurchases value: clientId) purchases.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:07:35'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:07:35'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:07:35'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:07:35'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:07:35'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:07:35'!
PASSED!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:07:59' prior: 50875366!
listPurchasesFor: clientId password: password
	self validateClientId: clientId withPassword: password.

	^(clients value: clientId) purchases.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:08:00'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:08:00'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:08:00'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:08:00'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:08:00'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:08:00'!
PASSED!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:08:12' prior: 50875433!
listPurchasesFor: clientId password: password
	self validateClientId: clientId withPassword: password.

	^(clients at: clientId) purchases.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:08:13'!
PASSED!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:08:16'!
PASSED!

Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clients catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibros category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 20:08:24'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clients catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:08:27'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:08:27'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:08:55' prior: 50875215!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.
	"(TusLibrosClient for: (aClientList at: clientId))"
	aClientList keysDo: [ :clientId | clients add: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.

! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:08:56'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:08:56'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:08:56'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:08:57'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:08:57'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:08:59' prior: 50875697!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.

	aClientList keysDo: [ :clientId | clients add: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.

! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:09:00'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:09:00'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:09:15' prior: 50875771!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.

	aClientList keysDo: [ :clientId | clients add: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].

	carts := OrderedCollection new.


! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:09:16'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:09:16'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:09:16'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:09:16'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:09:16'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:09:16'!
ERROR!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:09:16'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:09:16'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:09:19' prior: 50875843!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.

	aClientList keysDo: [ :clientId | clients add: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].

	carts := OrderedCollection new.
	cartClients := OrderedCollection new.

! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:09:35' prior: 50874471!
newCartForClientId: clientId password: password
	self validateClientId: clientId withPassword: password.

	carts add: Bag new.

	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:09:35'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:09:35'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:09:35'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:09:35'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:09:35'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:09:38' prior: 50875927!
newCartForClientId: clientId password: password
	self validateClientId: clientId withPassword: password.

	carts add: Bag new.
	cartClients add: clientId.
	^carts size.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:10:05'!
PASSED!

Object subclass: #TusLibrosCarts
	instanceVariableNames: 'clientId books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #TusLibrosCarts category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/18/2020 20:11:32'!
Object subclass: #TusLibrosCarts
	instanceVariableNames: 'clientId books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibrosCarts class methodsFor: 'no messages' stamp: 'IO 11/18/2020 20:12:18'!
for: clientId
	^self basicNew initializeFor: clientId.! !
!TusLibrosCarts methodsFor: 'no messages' stamp: 'IO 11/18/2020 20:12:38'!
initializeFor: aClientId
	clientId := aClientId.
	books := Bag new.! !
!TusLibrosCarts methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 20:13:34'!
add: aBook withQuantity: aQuantity
	books add: aBook withOcurrences: aQuantity.
! !
!TusLibrosCarts methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 20:13:51' prior: 50876083!
add: aBook withQuantity: aQuantity
	books add: aBook withOccurrences: aQuantity.
! !
!TusLibrosCarts methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 20:14:51'!
books
	^books copy.! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:16:13'!
checkout: aCart for: clientId
	(clients at: clientId) checkout: aCart.
! !
!TusLibrosCarts methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 20:17:14'!
checkoutOn: aTusLibros
	aTusLibros checkout: self purchases for: clientId.
! !

!classRenamed: #TusLibrosCarts as: #TusLibrosCart stamp: 'IO 11/18/2020 20:17:47'!
Smalltalk renameClassNamed: #TusLibrosCarts as: #TusLibrosCart!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:18:24' prior: 50875993!
newCartForClientId: clientId password: password
	self validateClientId: clientId withPassword: password.

	carts add: (TusLibrosCart for: clientId).
	^carts size.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:18:43' prior: 50873726!
addToCart: cartId bookIsbn: isbn bookQuantity: quantity

	| cart |

	self validateCartId: cartId.
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(quantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].

	cart := carts at: cartId.
	cart add: isbn withQuantity: quantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:18:52' prior: 50876121!
addToCart: cartId bookIsbn: isbn bookQuantity: aQuantity

	| cart |

	self validateCartId: cartId.
	(catalogue includes: isbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(aQuantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].

	cart := carts at: cartId.
	cart add: isbn withQuantity: aQuantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:18:58' prior: 50876134!
addToCart: cartId bookIsbn: anIsbn bookQuantity: aQuantity

	| cart |

	self validateCartId: cartId.
	(catalogue includes: anIsbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(aQuantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].

	cart := carts at: cartId.
	cart add: anIsbn withQuantity: aQuantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:19:03' prior: 50876148!
addToCart: aCartId bookIsbn: anIsbn bookQuantity: aQuantity

	| cart |

	self validateCartId: aCartId.
	(catalogue includes: anIsbn) ifFalse: [^self error: TusLibros invalidIsbnErrorMessage].
	(aQuantity < 1) ifTrue: [^self error: TusLibros invalidQuantityErrorMessage].

	cart := carts at: aCartId.
	cart add: anIsbn withQuantity: aQuantity.
! !
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:19:39' prior: 50873740!
listCart: cartId

	self validateCartId: cartId.

	^carts at: cartId books.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:20:09' prior: 50874816!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart |

	self validateCartId: cartId.
	cart := carts at: cartId.
	(cart size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].
	
	cart checkoutOn: self.

! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:20:18'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:20:18'!
FAILURE!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:20:18'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:20:18'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:20:43' prior: 50876176!
listCart: cartId

	self validateCartId: cartId.

	^(carts at: cartId) books.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:20:44'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:20:44'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:20:44'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:20:44'!
FAILURE!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:20:44'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:20:57'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:21:01'!
ERROR!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:21:01'!
ERROR!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:21:40' prior: 50876182!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 
	| cart |

	self validateCartId: cartId.
	cart := carts at: cartId.
	cart checkoutOn: self.

! !
!TusLibrosCart methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 20:21:50' prior: 50876103!
checkoutOn: aTusLibros
	(books size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].
	aTusLibros checkout: self purchases for: clientId.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:21:51'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:21:51'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:21:51'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:21:51'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:22:12'!
ERROR!
!TusLibrosCart methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 20:22:23' prior: 50876331!
checkoutOn: aTusLibros
	(books size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].
	aTusLibros checkout: books purchases for: clientId.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:22:24'!
ERROR!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:22:24'!
ERROR!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:22:24'!
ERROR!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:22:24'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:22:24'!
PASSED!
!TusLibrosCart methodsFor: 'as yet unclassified' stamp: 'IO 11/18/2020 20:22:43' prior: 50876401!
checkoutOn: aTusLibros
	(books size = 0) ifTrue: [self error: TusLibros emptyCartErrorMessage].
	aTusLibros checkout: self books for: clientId.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:22:47'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:22:47'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:23:09' prior: 50875914!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.
	clients := Dictionary new.

	aClientList keysDo: [ :clientId | clients add: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].

	carts := OrderedCollection new.


! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:23:10'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:23:10'!
PASSED!
!TusLibros methodsFor: 'initialization' stamp: 'IO 11/18/2020 20:23:29' prior: 50876535!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.

	carts := OrderedCollection new.

	clients := Dictionary new.
	aClientList keysDo: [ :clientId | clients add: (
		Association key: clientId value: (TusLibrosClient for: (aClientList at: clientId)))].
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:23:32'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:23:32'!
PASSED!
!TusLibros methodsFor: 'cart' stamp: 'IO 11/18/2020 20:23:40' prior: 50876113!
newCartForClientId: clientId password: password

	self validateClientId: clientId withPassword: password.

	carts add: (TusLibrosCart for: clientId).
	^carts size.
! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:25:23' prior: 50876323!
checkoutCart: cartId ccn: ccn cced: cced cco: cco 

	self validateCartId: cartId.

	(carts at: cartId) checkoutOn: self.

! !
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:25:24' prior: 50876685!
checkoutCart: cartId ccn: ccn cced: cced cco: cco

	self validateCartId: cartId.

	(carts at: cartId) checkoutOn: self.

! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:25:25'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:25:25'!
PASSED!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:25:29' prior: 50876098!
checkout: aCart for: clientId

	(clients at: clientId) checkout: aCart.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:25:30'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:25:30'!
PASSED!
!TusLibros methodsFor: 'purchases' stamp: 'IO 11/18/2020 20:25:36' prior: 50875499!
listPurchasesFor: clientId password: password

	self validateClientId: clientId withPassword: password.

	^(clients at: clientId) purchases.
! !

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'IO 11/18/2020 20:25:37'!
PASSED!

----SNAPSHOT----(18 November 2020 20:26:25) CuisUniversity-4384.image priorSource: 17374621!

----STARTUP---- (19 November 2020 12:05:05) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64\CuisUniversity-4384.image!


!classRemoval: #TusLibros stamp: 'LH 11/19/2020 12:05:10'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clientsPurchases clients catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #TusLibrosTest stamp: 'LH 11/19/2020 12:05:11'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64\Ejercicio-20-Tus-Libros.st----!

!testRun: #TusLibrosTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test02CanAddABookToCart stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test03CanAddDifferentBooksToCart stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test04CanAddMoreThanOneBookToCart stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test05CanAddMoreThanOneCart stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test06AClientInitialyHasNowPurchases stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test07AClientCanCheckoutACart stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test08AClientCanCheckoutManyTimes stamp: 'LH 11/19/2020 12:15:33'!
PASSED!

!testRun: #TusLibrosTest #test09ManyClientsCanCheckout stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test10CreateCartClientIdExists stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test11CreateCartClientPasswordMatches stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test12AddToCartHasValidCartId stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test13AddToCartHasValidISBN stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test14AddToCartHasValidQuantity stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test15ListCartHasValidCartId stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test16CheckoutHasValidCartId stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test17CheckoutHasCartWithBooks stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test18ListPurchasesHasValidUser stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

!testRun: #TusLibrosTest #test19ListPurchasesHasMatchingPassword stamp: 'LH 11/19/2020 12:15:34'!
PASSED!

----QUIT----(19 November 2020 12:16:51) CuisUniversity-4384.image priorSource: 17205931!

----STARTUP---- (19 November 2020 17:44:28) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros malo\CuisUniversity-4384.image!


TestCase subclass: #ShoppingCartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #ShoppingCartTest category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/19/2020 17:45:01'!
TestCase subclass: #ShoppingCartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/19/2020 17:46:43'!
Object subclass: #ShoppingCart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCartTest methodsFor: 'no messages' stamp: 'LH 11/19/2020 17:46:38'!
test01NewCartIsEmpty
	|aCart|
	
	aCart := ShoppingCart new.
	
	self assert: aCart listCart size equals: 0.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 17:46:47'!
ERROR!
!ShoppingCart methodsFor: 'accesing' stamp: 'LH 11/19/2020 17:47:03'!
listCart
	self shouldBeImplemented.! !
!ShoppingCart methodsFor: 'accesing' stamp: 'LH 11/19/2020 17:47:14' prior: 50870021!
listCart
	^OrderedCollection new.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 17:47:16'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 17:47:16'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 17:49:04'!
test02CanAddABookToACart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart add: ''.
	
	self assert: aCart listCart size equals: 0.! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 17:49:41' prior: 50870035!
test02CanAddABookToACart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart add: ''.
	
	self assert: aCart listCart size equals: 1.
	self assert: (aCart listCart includes: '').! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 17:50:09' prior: 50870043!
test02CanAddABookToACart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart add: '0-7645-2641-3'.
	
	self assert: aCart listCart size equals: 1.
	self assert: (aCart listCart includes: '0-7645-2641-3').! !

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 17:50:45'!
ERROR!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 17:50:58'!
add: aString 
	self shouldBeImplemented.! !

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/19/2020 17:51:22'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 17:51:21' prior: 50870064!
add: anISBN 

	books add: anISBN.! !

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 17:51:31'!
ERROR!
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/19/2020 17:52:21' overrides: 16896425!
initialize

	books := OrderedCollection new.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 17:52:25'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 17:52:25'!
FAILURE!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 17:52:25'!
FAILURE!
!ShoppingCart methodsFor: 'accessing' stamp: 'LH 11/19/2020 17:53:12' prior: 50870025!
listCart
	^books copy.! !

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 17:53:13'!
PASSED!
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 17:53:27' prior: 50870012!
test01NewCartIsEmpty
	|aCart|
	
	aCart := ShoppingCart new.
	
	self assert: 0 equals: aCart listCart size.! !
!ShoppingCartTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 17:53:37' prior: 50870052!
test02CanAddABookToACart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart add: '0-7645-2641-3'.
	
	self assert: 1 equals: aCart listCart size.
	self assert: (aCart listCart includes: '0-7645-2641-3').! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 17:54:33'!
test02CanAddManyBooksToACart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart add: '0-7645-2641-3'.
	aCart add: '0-7645-2641-4'.
	
	self assert: 2 equals: aCart listCart size.
	self assert: (aCart listCart includes: '0-7645-2641-3').
	self assert: (aCart listCart includes: '0-7645-2641-4').! !

!testRun: #ShoppingCartTest #test02CanAddManyBooksToACart stamp: 'LH 11/19/2020 17:54:35'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 17:54:35'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 17:54:35'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddManyBooksToACart stamp: 'LH 11/19/2020 17:54:35'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 17:54:41'!
test03CanAddManyBooksToACart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart add: '0-7645-2641-3'.
	aCart add: '0-7645-2641-4'.
	
	self assert: 2 equals: aCart listCart size.
	self assert: (aCart listCart includes: '0-7645-2641-3').
	self assert: (aCart listCart includes: '0-7645-2641-4').! !

!methodRemoval: ShoppingCartTest #test02CanAddManyBooksToACart stamp: 'LH 11/19/2020 17:54:41'!
test02CanAddManyBooksToACart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart add: '0-7645-2641-3'.
	aCart add: '0-7645-2641-4'.
	
	self assert: 2 equals: aCart listCart size.
	self assert: (aCart listCart includes: '0-7645-2641-3').
	self assert: (aCart listCart includes: '0-7645-2641-4').!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 17:55:50'!
test04CanMoreFromTheSameBookToACart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart add: '0-7645-2641-3' withQuantity: 2.
	
	self assert: 2 equals: aCart listCart size.
	
	aCart add: '0-7645-2641-3'.
	
	self assert: 3 equals: aCart listCart size.! !

!testRun: #ShoppingCartTest #test04CanMoreFromTheSameBookToACart stamp: 'LH 11/19/2020 17:55:56'!
ERROR!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 17:56:04'!
add: aString withQuantity: aSmallInteger 
	self shouldBeImplemented.! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 17:56:37' prior: 50870183!
add: aString withQuantity: aSmallInteger 
	1 to: aSmallInteger do: [books add: aString]! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 17:56:44' prior: 50870188!
add: anISBN withQuantity: aSmallInteger 
	1 to: aSmallInteger do: [books add: anISBN]! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 17:56:50' prior: 50870194!
add: anISBN withQuantity: aQuantity 
	1 to: aQuantity do: [books add: anISBN]! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 17:56:54' prior: 50870200!
add: anISBN withQuantity: aQuantity 

	1 to: aQuantity do: [books add: anISBN]! !

!testRun: #ShoppingCartTest #test04CanMoreFromTheSameBookToACart stamp: 'LH 11/19/2020 17:56:55'!
ERROR!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 17:57:34' prior: 50870206!
add: anISBN withQuantity: aQuantity 

	1 to: aQuantity do: [:index | books add: anISBN]! !

!testRun: #ShoppingCartTest #test04CanMoreFromTheSameBookToACart stamp: 'LH 11/19/2020 17:57:35'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 17:57:35'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 17:57:35'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 17:57:36'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreFromTheSameBookToACart stamp: 'LH 11/19/2020 17:57:36'!
PASSED!
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/19/2020 17:57:48' prior: 50870084 overrides: 16896425!
initialize

	books := Bag new.! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 17:58:29' prior: 50870215!
add: anISBN withQuantity: aQuantity 

	books add: anISBN withOccurences: aQuantity.! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 17:58:47' prior: 50870242!
add: anISBN withQuantity: aQuantity 

	books add: anISBN withOccurrences: aQuantity.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 17:58:48'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 17:58:48'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 17:58:48'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreFromTheSameBookToACart stamp: 'LH 11/19/2020 17:58:48'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 17:59:15'!
test04CanMoreThanOneFromTheSameBookToACart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart add: '0-7645-2641-3' withQuantity: 2.
	
	self assert: 2 equals: aCart listCart size.
	
	aCart add: '0-7645-2641-3'.
	
	self assert: 3 equals: aCart listCart size.! !

!methodRemoval: ShoppingCartTest #test04CanMoreFromTheSameBookToACart stamp: 'LH 11/19/2020 17:59:15'!
test04CanMoreFromTheSameBookToACart
	|aCart|
	
	aCart := ShoppingCart new.
	aCart add: '0-7645-2641-3' withQuantity: 2.
	
	self assert: 2 equals: aCart listCart size.
	
	aCart add: '0-7645-2641-3'.
	
	self assert: 3 equals: aCart listCart size.!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:03:52'!
test05CanNotAddABookWithInvalidISBN
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	
	self should: [aCart add: '0-7645-2641-3']
		raise: Error
		withMessageText: ShoppingCart invalidISBNErrorMessage.
	
! !

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:03:56'!
ERROR!
!ShoppingCart class methodsFor: 'instance creation' stamp: 'LH 11/19/2020 18:04:06'!
withCatalogue: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalogue: anOrderedCollection ! !
!ShoppingCart class methodsFor: 'instance creation' stamp: 'LH 11/19/2020 18:04:15' prior: 50870302!
withCatalogue: anOrderedCollection 

	^self new initializeWithCatalogue: anOrderedCollection ! !

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:04:17'!
ERROR!

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/19/2020 18:04:27'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books orderedCollection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/19/2020 18:04:27'!
initializeWithCatalogue: anOrderedCollection 
	self shouldBeImplemented.
	orderedCollection := anOrderedCollection.! !
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/19/2020 18:04:42' prior: 50870330!
initializeWithCatalogue: aCatalgue 

	orderedCollection := aCatalgue.! !

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/19/2020 18:04:48'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books catalgue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 18:04:49' prior: 50870337!
initializeWithCatalogue: aCatalgue 

	catalgue := aCatalgue.! !

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:04:51'!
ERROR!
!ShoppingCart class methodsFor: 'Error Description' stamp: 'LH 11/19/2020 18:05:04'!
invalidISBNErrorMessage
	self shouldBeImplemented.! !
!ShoppingCart class methodsFor: 'Error Description' stamp: 'LH 11/19/2020 18:05:22' prior: 50870359!
invalidISBNErrorMessage
	^'ISBN is no in the Catalogue'! !

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:05:23'!
FAILURE!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 18:06:37' prior: 50870076!
add: anISBN 
	
	(catalgue includes: anISBN) ifFalse:[^self error: ShoppingCart invalidISBNErrorMessage].
	
	books add: anISBN.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 18:06:38'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 18:06:38'!
ERROR!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 18:06:38'!
ERROR!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/19/2020 18:06:38'!
ERROR!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:06:38'!
FAILURE!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:06:58' prior: 50870105!
test01NewCartIsEmpty
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	
	self assert: 0 equals: aCart listCart size.! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:07:02' prior: 50870112!
test02CanAddABookToACart
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	
	self assert: 1 equals: aCart listCart size.
	self assert: (aCart listCart includes: '0-7645-2641-3').! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:07:05' prior: 50870145!
test03CanAddManyBooksToACart
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	aCart add: '0-7645-2641-4'.
	
	self assert: 2 equals: aCart listCart size.
	self assert: (aCart listCart includes: '0-7645-2641-3').
	self assert: (aCart listCart includes: '0-7645-2641-4').! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:07:10' prior: 50870266!
test04CanMoreThanOneFromTheSameBookToACart
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	
	self assert: 2 equals: aCart listCart size.
	
	aCart add: '0-7645-2641-3'.
	
	self assert: 3 equals: aCart listCart size.! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:07:21' prior: 50870414!
test03CanAddManyBooksToACart
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3'.
	aCart add: '0-7645-2641-4'.
	
	self assert: 2 equals: aCart listCart size.
	self assert: (aCart listCart includes: '0-7645-2641-3').
	self assert: (aCart listCart includes: '0-7645-2641-4').! !

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:07:24'!
FAILURE!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:07:24'!
FAILURE!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:07:47' prior: 50870288!
test05CanNotAddABookWithInvalidISBN
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection new).
	
	self should: [aCart add: '0-7645-2641-3']
		raise: Error
		withMessageText: ShoppingCart invalidISBNErrorMessage.
	
! !

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:07:48'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:07:51'!
PASSED!

----SNAPSHOT----(19 November 2020 18:08:34) CuisUniversity-4384.image priorSource: 17226676!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:11:25'!
test06CanNotAdd0Books
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	
	self should: [aCart add: '0-7645-2641-3' withQuantity: 0]
		raise: Error
		withMessageText: ShoppingCart invalidQuantityErrorMessage.
	
! !

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 18:11:27'!
ERROR!
!ShoppingCart class methodsFor: 'Error Description' stamp: 'LH 11/19/2020 18:11:39'!
invalidQuantityErrorMessage
	self shouldBeImplemented.! !
!ShoppingCart class methodsFor: 'Error Description' stamp: 'LH 11/19/2020 18:12:19' prior: 50870496!
invalidQuantityErrorMessage
	^'Should only add a positive whole number of books'! !

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 18:12:20'!
FAILURE!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 18:13:20' prior: 50870248!
add: anISBN withQuantity: aQuantity 
	
	aQuantity = 0 ifTrue:[^self error: ShoppingCart invalidQuantityErrorMessage ].
	
	books add: anISBN withOccurrences: aQuantity.! !

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 18:13:22'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 18:13:22'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 18:13:22'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 18:13:22'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/19/2020 18:13:22'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:13:22'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 18:13:22'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:13:34'!
test07CanNotAddMinusBooks
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	
	self should: [aCart add: '0-7645-2641-3' withQuantity: -1]
		raise: Error
		withMessageText: ShoppingCart invalidQuantityErrorMessage.
	
! !

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/19/2020 18:13:36'!
FAILURE!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 18:13:48' prior: 50870510!
add: anISBN withQuantity: aQuantity 
	
	aQuantity <= 0 ifTrue:[^self error: ShoppingCart invalidQuantityErrorMessage ].
	
	books add: anISBN withOccurrences: aQuantity.! !

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/19/2020 18:13:49'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 18:13:49'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 18:13:49'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 18:13:49'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/19/2020 18:13:49'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:13:49'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 18:13:49'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/19/2020 18:13:50'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:14:06'!
test07CanNotAddNotWholeBooks
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	
	self should: [aCart add: '0-7645-2641-3' withQuantity: 1.5]
		raise: Error
		withMessageText: ShoppingCart invalidQuantityErrorMessage.
	
! !

1,5!

1.5!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/19/2020 18:14:40'!
test08CanNotAddNotWholeBooks
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	
	self should: [aCart add: '0-7645-2641-3' withQuantity: 1.5]
		raise: Error
		withMessageText: ShoppingCart invalidQuantityErrorMessage.
	
! !

!methodRemoval: ShoppingCartTest #test07CanNotAddNotWholeBooks stamp: 'LH 11/19/2020 18:14:40'!
test07CanNotAddNotWholeBooks
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	
	self should: [aCart add: '0-7645-2641-3' withQuantity: 1.5]
		raise: Error
		withMessageText: ShoppingCart invalidQuantityErrorMessage.
	
!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/19/2020 18:14:48'!
FAILURE!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 18:15:42' prior: 50870554!
add: anISBN withQuantity: aQuantity 
	
	aQuantity isInteger ifFalse:[^self error: ShoppingCart invalidQuantityErrorMessage ].
	
	books add: anISBN withOccurrences: aQuantity.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 18:15:43'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 18:15:43'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 18:15:43'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/19/2020 18:15:43'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:15:43'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 18:15:43'!
FAILURE!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/19/2020 18:15:43'!
FAILURE!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/19/2020 18:15:43'!
PASSED!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 18:16:35' prior: 50870624!
add: anISBN withQuantity: aQuantity 
	
	(aQuantity isInteger or: aQuantity > 0) ifFalse:[^self error: ShoppingCart invalidQuantityErrorMessage ].
	
	books add: anISBN withOccurrences: aQuantity.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 18:16:36'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 18:16:36'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 18:16:36'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/19/2020 18:16:36'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:16:36'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 18:16:36'!
FAILURE!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/19/2020 18:16:36'!
FAILURE!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/19/2020 18:16:36'!
FAILURE!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/19/2020 18:16:50' prior: 50870658!
add: anISBN withQuantity: aQuantity 
	
	(aQuantity isInteger and: aQuantity > 0) ifFalse:[^self error: ShoppingCart invalidQuantityErrorMessage ].
	
	books add: anISBN withOccurrences: aQuantity.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 18:16:51'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 18:16:51'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 18:16:51'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/19/2020 18:16:51'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:16:51'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 18:16:51'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/19/2020 18:16:51'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/19/2020 18:16:51'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/19/2020 18:16:54'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 18:16:54'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 18:16:54'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 18:16:54'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/19/2020 18:16:54'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:16:54'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 18:16:54'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/19/2020 18:16:54'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/19/2020 18:16:54'!
PASSED!

!classRemoval: #TusLibrosTest stamp: 'LH 11/19/2020 18:17:34'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'cart' stamp: 'LH 11/19/2020 18:18:04' prior: 50869733!
newCartForClientId: clientId password: password

	self validateClientId: clientId withPassword: password.

	
	^carts size.
! !

!classRemoval: #TusLibrosCart stamp: 'LH 11/19/2020 18:18:09'!
Object subclass: #TusLibrosCart
	instanceVariableNames: 'clientId books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!TusLibros methodsFor: 'initialization' stamp: 'LH 11/19/2020 18:18:22' prior: 50869702!
initializeWithCatalogue: aCatalogue withClients: aClientList 

	catalogue := aCatalogue.

	carts := OrderedCollection new.

	clients := Dictionary new.! !

!classRemoval: #TusLibrosClient stamp: 'LH 11/19/2020 18:18:27'!
Object subclass: #TusLibrosClient
	instanceVariableNames: 'password purchases'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #TusLibros stamp: 'LH 11/19/2020 18:18:31'!
Object subclass: #TusLibros
	instanceVariableNames: 'carts cartClients clients catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 18:18:35'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 18:18:35'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 18:18:35'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/19/2020 18:18:35'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 18:18:35'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 18:18:35'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/19/2020 18:18:35'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/19/2020 18:18:36'!
PASSED!

----SNAPSHOT----(19 November 2020 18:18:55) CuisUniversity-4384.image priorSource: 17242494!

TestCase subclass: #ShoppingCashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #ShoppingCashierTest category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/19/2020 18:34:32'!
TestCase subclass: #ShoppingCashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCashierTest methodsFor: 'no messages' stamp: 'LH 11/19/2020 18:34:50'!
test01AnEmptyCartCannotBeCheckedOut! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 18:48:22' prior: 50870838!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart|! !

!classDefinition: #ShoppingCashier category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/19/2020 18:53:36'!
Object subclass: #ShoppingCashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 18:53:31' prior: 50870843!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart|
	
	aCart := ShoppingCart with: OrderedCollection new.
	
	aCashier := ShoppingCashier new.
	
	self should: [aCashier checkOut: aCart withCardNumber: 0 ExpirationDate: Date today andCardOwner: 'Juan Pablo']
		raise: Error
		withMessageText: ShoppingCashier invalidCartErrorMessage.! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 18:53:46'!
ERROR!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 18:54:00' prior: 50870856!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: OrderedCollection new.
	
	aCashier := ShoppingCashier new.
	
	self should: [aCashier checkOut: aCart withCardNumber: 0 ExpirationDate: Date today andCardOwner: 'Juan Pablo']
		raise: Error
		withMessageText: ShoppingCashier invalidCartErrorMessage.! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 18:54:01'!
ERROR!
!ShoppingCashier class methodsFor: 'error Description' stamp: 'LH 11/19/2020 18:54:15'!
invalidCartErrorMessage
	self shouldBeImplemented.! !
!ShoppingCashier class methodsFor: 'error Description' stamp: 'LH 11/19/2020 18:54:33' prior: 50870891!
invalidCartErrorMessage
	^'The Cart Has no Books'! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 18:54:34'!
FAILURE!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 18:56:18'!
checkOut: aShoppingCart withCardNumber: aSmallInteger ExpirationDate: aDate andCardOwner: aString 
	self shouldBeImplemented.! !
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 18:57:50' prior: 50870904!
checkOut: aShoppingCart withCardNumber: aSmallInteger ExpirationDate: aDate andCardOwner: aString 

	^self error: ShoppingCashier invalidCartErrorMessage.! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 18:57:51'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 18:57:53'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 18:57:53'!
PASSED!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 19:05:40'!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '').
	aCart add: ''.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('' 100)) .
	
	self assert: 100 equals: (aCashier checkOut: aCart withCardNumber: 0 ExpirationDate: Date yesterday andCardOwner: 'Juan Pablo').! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 19:06:01' prior: 50870929!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('' 100)) .
	
	self assert: 100 equals: (aCashier checkOut: aCart withCardNumber: 0 ExpirationDate: Date yesterday andCardOwner: 'Juan Pablo').! !
!ShoppingCart methodsFor: 'initialization' stamp: 'LH 11/19/2020 19:06:56' prior: 50870351!
initializeWithCatalogue: aCatalgue 

	catalgue := aCatalgue.
	books := Bag new.! !

!methodRemoval: ShoppingCart #initialize stamp: 'LH 11/19/2020 19:07:00'!
initialize

	books := Bag new.!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 19:07:02'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 19:07:02'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 19:07:02'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/19/2020 19:07:02'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 19:07:02'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 19:07:02'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/19/2020 19:07:02'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/19/2020 19:07:02'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:08:11'!
ERROR!
!ShoppingCashier class methodsFor: 'instance creation' stamp: 'LH 11/19/2020 19:08:17'!
withPriceCatalogue: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithPriceCatalogue: aDictionary ! !
!ShoppingCashier class methodsFor: 'instance creation' stamp: 'LH 11/19/2020 19:08:45' prior: 50870998!
withPriceCatalogue: aPriceCatalogue 

	^self new initializeWithPriceCatalogue: aPriceCatalogue ! !

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:08:45'!
ERROR!

!classDefinition: #ShoppingCashier category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/19/2020 19:09:12'!
Object subclass: #ShoppingCashier
	instanceVariableNames: 'priceCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCashier methodsFor: 'initialization' stamp: 'LH 11/19/2020 19:09:12'!
initializeWithPriceCatalogue: aPriceCatalogue 
	self shouldBeImplemented.
	priceCatalogue := aPriceCatalogue.! !
!ShoppingCashier methodsFor: 'initialization' stamp: 'LH 11/19/2020 19:09:18' prior: 50871026!
initializeWithPriceCatalogue: aPriceCatalogue 

	priceCatalogue := aPriceCatalogue.! !

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:09:20'!
ERROR!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 19:15:11' prior: 50870911!
checkOut: aShoppingCart withCardNumber: aSmallInteger ExpirationDate: aDate andCardOwner: aString 

	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	^100.! !

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:15:14'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 19:15:14'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:15:14'!
PASSED!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 19:18:19' prior: 50870874!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: OrderedCollection new.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary new).
	
	self should: [aCashier checkOut: aCart withCardNumber: 0 ExpirationDate: Date today andCardOwner: 'Juan Pablo']
		raise: Error
		withMessageText: ShoppingCashier invalidCartErrorMessage.! !

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:18:23'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:18:28'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 19:18:29'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:18:29'!
PASSED!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 19:19:25'!
test03ACartWithManyBooksWillCheckOutCorrectly
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: ''.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('' 100 '' 100)) .
	
	self assert: 300 equals: (aCashier checkOut: aCart withCardNumber: 0 ExpirationDate: Date yesterday andCardOwner: 'Juan Pablo').! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 19:19:56' prior: 50871093!
test03ACartWithManyBooksWillCheckOutCorrectly
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)) .
	
	self assert: 300 equals: (aCashier checkOut: aCart withCardNumber: 0 ExpirationDate: Date yesterday andCardOwner: 'Juan Pablo').! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 19:20:00' prior: 50870944!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self assert: 100 equals: (aCashier checkOut: aCart withCardNumber: 0 ExpirationDate: Date yesterday andCardOwner: 'Juan Pablo').! !

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:20:09'!
FAILURE!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 19:28:18' prior: 50871043!
checkOut: aShoppingCart withCardNumber: aSmallInteger ExpirationDate: aDate andCardOwner: aString 
	|aSumOfPrices|
	
	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	
	aSumOfPrices := 0.
	aShoppingCart listCart do:[:anISBN | aSumOfPrices := aSumOfPrices + (priceCatalogue at: anISBN)].
	^aSumOfPrices.! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 19:28:19'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:28:20'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:28:20'!
PASSED!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 19:31:37' prior: 50871150!
checkOut: aShoppingCart withCardNumber: aSmallInteger ExpirationDate: aDate andCardOwner: aString 
	|aSumOfPrices|
	
	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	
	^ aShoppingCart listCart inject: 0 into: [:anISBN | priceCatalogue at: anISBN].
	
	"aSumOfPrices := 0.
	aShoppingCart listCart do:[:anISBN | aSumOfPrices := aSumOfPrices + (priceCatalogue at: anISBN)].
	^aSumOfPrices."! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 19:31:41'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:31:41'!
ERROR!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:31:41'!
ERROR!

----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros malo\Packages\TerseGuide.pck.st----!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:33:03'!
ERROR!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 19:34:39' prior: 50871175!
checkOut: aShoppingCart withCardNumber: aSmallInteger ExpirationDate: aDate andCardOwner: aString 
	|aSumOfPrices|
	
	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].
	
	"aSumOfPrices := 0.
	aShoppingCart listCart do:[:anISBN | aSumOfPrices := aSumOfPrices + (priceCatalogue at: anISBN)].
	^aSumOfPrices."! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 19:34:42'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:34:42'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:34:42'!
PASSED!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 19:34:54' prior: 50874143!
checkOut: aShoppingCart withCardNumber: aSmallInteger ExpirationDate: aDate andCardOwner: aString 

	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 19:34:55'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:34:55'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:34:55'!
PASSED!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 19:40:54' prior: 50871064!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: OrderedCollection new.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary new).
	
	self should: [aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: Date yesterday andCardOwner: 'Juan Pablo']
		raise: Error
		withMessageText: ShoppingCashier invalidCartErrorMessage.! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 19:41:05' prior: 50871130!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self assert: 100 equals: (aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: Date yesterday andCardOwner: 'Juan Pablo').! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 19:41:09' prior: 50871111!
test03ACartWithManyBooksWillCheckOutCorrectly
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)) .
	
	self assert: 300 equals: (aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: Date yesterday andCardOwner: 'Juan Pablo').! !

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:41:10'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 19:41:10'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:41:11'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:41:11'!
PASSED!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 19:42:40' prior: 50874171!
checkOut: aShoppingCart withCardNumber: aCreditCardNumber ExpirationDate: anExpirationDate andCardOwner: aName 

	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].! !

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:42:47'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 19:42:47'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:42:47'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 19:42:47'!
PASSED!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 19:47:02'!
test04TheCardShouldNotBeExpired
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self should: (aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: Date tomorrow andCardOwner: 'Juan Pablo')
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.! !

Date today month!

Month today!

Month newFrom: Date today!

(Month newFrom: Date today) next!

(Month newFrom: Date today)!

Month!

Month!

(Month newFrom: Date today)!

(Month newFrom: Date today + 1 month)!

(Month newFrom: Date today + 2 months)!

(Month newFrom: Date today	) next !

(Month newFrom: Date today	) !

 Date today	next!

Date today + 31 months!

Date today + 31 days!

Date today + Date today daysInMonth!

Date today + Date today daysInMonth!

Date today + Date today daysInMonth!

Date today + (Date today daysInMonth)!

Date today + 31 days !

Date today daysInMonth!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:14:33' prior: 50874290!
test04TheCardShouldNotBeExpired
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self should: (aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: (Date today + (Date today daysInMonth days) ) andCardOwner: 'Juan Pablo')
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.
		! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:15:02'!
invalidDate

	^Date today + (Date today daysInMonth days)
		! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:15:10'!
validDate

	^Date today - (Date today daysInMonth days)
		! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:16:08' prior: 50874346!
invalidDate

	^Date today + (Date today daysInMonth days) month
		! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:16:22' prior: 50874351!
validDate

	^Date today - (Date today daysInMonth days) month
		! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:16:34' prior: 50874195!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: OrderedCollection new.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary new).
	
	self should: [aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: self validDate andCardOwner: 'Juan Pablo']
		raise: Error
		withMessageText: ShoppingCashier invalidCartErrorMessage.! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:16:42' prior: 50874211!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self assert: 100 equals: (aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: self validDate andCardOwner: 'Juan Pablo').! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:16:46' prior: 50874228!
test03ACartWithManyBooksWillCheckOutCorrectly
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)) .
	
	self assert: 300 equals: (aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: self validDate andCardOwner: 'Juan Pablo').! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:16:53' prior: 50874327!
test04TheCardShouldNotBeExpired
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self should: (aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: self validDate andCardOwner: 'Juan Pablo')
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.
		! !

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/19/2020 20:51:32'!
ERROR!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:51:57' prior: 50874363!
validDate

	^(Date today - (Date today daysInMonth days)) month
		! !

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/19/2020 20:51:58'!
ERROR!
!ShoppingCashier class methodsFor: 'error Description' stamp: 'LH 11/19/2020 20:52:18'!
invalidCreditCard
	self shouldBeImplemented.! !
!ShoppingCashier class methodsFor: 'error Description' stamp: 'LH 11/19/2020 20:52:32' prior: 50874453!
invalidCreditCard
	^'invalid credit card information'! !

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/19/2020 20:52:34'!
FAILURE!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:53:01' prior: 50874422!
test04TheCardShouldNotBeExpired
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self should: (aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: self invalidDate andCardOwner: 'Juan Pablo')
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.
		! !

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/19/2020 20:53:03'!
ERROR!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:53:13' prior: 50874357!
invalidDate

	^(Date today + (Date today daysInMonth days)) month
		! !

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/19/2020 20:53:15'!
FAILURE!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 20:53:31' prior: 50874467!
test04TheCardShouldNotBeExpired
	|aCashier aCart|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self should:[ (aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: self invalidDate andCardOwner: 'Juan Pablo')]
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.
		! !

anExpirationDate <= Date today month!

Date today month < anExpirationDate!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 21:00:09' prior: 50874262!
checkOut: aShoppingCart withCardNumber: aCreditCardNumber ExpirationDate: anExpirationDate andCardOwner: aName 

	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	 (anExpirationDate to: Date today month )< 0 ifTrue: [^self error: ShoppingCashier invalidCreditCard ].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/19/2020 21:00:10'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/19/2020 21:00:10'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/19/2020 21:00:10'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/19/2020 21:00:10'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/19/2020 21:00:10'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/19/2020 21:00:10'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/19/2020 21:00:10'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/19/2020 21:00:10'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 21:00:10'!
PASSED!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 21:04:58' prior: 50874519!
checkOut: aShoppingCart withCardNumber: aCreditCardNumber ExpirationDate: anExpirationDate andCardOwner: aName 

	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	 (anExpirationDate yearNumber <= Date today yearNumber or: anExpirationDate monthIndex <= Date today monthIndex)
			 ifTrue: [^self error: ShoppingCashier invalidCreditCard ].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].! !

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/19/2020 21:04:59'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/19/2020 21:04:59'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/19/2020 21:04:59'!
ERROR!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 21:04:59'!
ERROR!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/19/2020 21:04:59'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 21:05:06'!
ERROR!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/19/2020 21:14:20' prior: 50874564!
checkOut: aShoppingCart withCardNumber: aCreditCardNumber ExpirationDate: anExpirationDate andCardOwner: aName 

	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	
	(anExpirationDate yearNumber < Date today yearNumber)
			ifTrue:[ ^self error: ShoppingCashier invalidCreditCard].  
	(anExpirationDate yearNumber = Date today yearNumber and: anExpirationDate monthIndex <= Date today monthIndex) 
			ifTrue: [^self error: ShoppingCashier invalidCreditCard ].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].! !

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 21:14:21'!
ERROR!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 21:14:39'!
FAILURE!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 21:15:08' prior: 50874444!
validDate

	^(Date today + (Date today daysInMonth days)) month
		! !

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/19/2020 21:15:10'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/19/2020 21:15:19'!
FAILURE!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/19/2020 21:15:19'!
FAILURE!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/19/2020 21:15:37' prior: 50874489!
invalidDate

	^(Date today - (Date today daysInMonth days)) month
		! !

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/19/2020 21:15:38'!
PASSED!

----QUIT----(19 November 2020 21:17:03) CuisUniversity-4384.image priorSource: 17253487!

----STARTUP---- (21 November 2020 17:18:55) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!


TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #CreditCardTest category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/21/2020 17:20:27'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #CreditCard category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/21/2020 17:26:03'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:25:59'!
test01ACreditCardCanBeNotExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today + Date today daysInMonth months) month belongingTo: 'Juan Pablo'.
	
	self deny: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:26:09'!
ERROR!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:26:23' prior: 50874685!
test01ACreditCardCanBeNotExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today + Date today daysInMonth days) month belongingTo: 'Juan Pablo'.
	
	self deny: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:26:24'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 17:26:31'!
withNumber: aString expirationDate: aMonth belongingTo: aString3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: aString expirationDate: aMonth belongingTo: aString3 ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 17:27:22' prior: 50874713!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:27:23'!
ERROR!

!classDefinition: #CreditCard category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/21/2020 17:27:49'!
Object subclass: #CreditCard
	instanceVariableNames: 'cCNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #CreditCard category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/21/2020 17:27:49'!
Object subclass: #CreditCard
	instanceVariableNames: 'cCNumber expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #CreditCard category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/21/2020 17:27:49'!
Object subclass: #CreditCard
	instanceVariableNames: 'cCNumber expirationDate name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!CreditCard methodsFor: 'initialization' stamp: 'LH 11/21/2020 17:27:49'!
initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	self shouldBeImplemented.
	cCNumber := aCCNumber.
	expirationDate := anExpirationDate.
	name := aName.! !
!CreditCard methodsFor: 'initialization' stamp: 'LH 11/21/2020 17:28:03' prior: 50874760!
initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	cCNumber := aCCNumber.
	expirationDate := anExpirationDate.
	name := aName.! !

!classDefinition: #CreditCard category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/21/2020 17:28:10'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber expirationDate name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'LH 11/21/2020 17:28:10' prior: 50874769!
initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	creditCardNumber := aCCNumber.
	expirationDate := anExpirationDate.
	name := aName.! !

!classDefinition: #CreditCard category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/21/2020 17:28:28'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber expirationDate nameOfOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'LH 11/21/2020 17:28:28' prior: 50874786!
initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	creditCardNumber := aCCNumber.
	expirationDate := anExpirationDate.
	nameOfOwner := aName.! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:28:34'!
ERROR!
!CreditCard methodsFor: 'testing' stamp: 'LH 11/21/2020 17:28:45'!
isExpired
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'testing' stamp: 'LH 11/21/2020 17:29:02' prior: 50874815!
isExpired
	^false.! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:29:05'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:29:05'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:30:37'!
test02ACreditCardWithExpirationDatingThisMonthIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: Date today month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthIsExpired stamp: 'LH 11/21/2020 17:30:38'!
FAILURE!

aCreditCard isExpired!
!CreditCard methodsFor: 'testing' stamp: 'LH 11/21/2020 17:32:10' prior: 50874819!
isExpired

	^expirationDate = Date today month.! !

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthIsExpired stamp: 'LH 11/21/2020 17:32:14'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:32:14'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthIsExpired stamp: 'LH 11/21/2020 17:32:14'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:32:23'!
test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: Date today month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !

!methodRemoval: CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthIsExpired stamp: 'LH 11/21/2020 17:32:23'!
test02ACreditCardWithExpirationDatingThisMonthIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: Date today month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:32:55'!
test03ACreditCardWithExpirationDatingaPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: Date today month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:34:01' prior: 50874880!
test03ACreditCardWithExpirationDatingaPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today - Date today daysInMonth days) month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingaPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:34:02'!
FAILURE!
!CreditCard methodsFor: 'testing' stamp: 'LH 11/21/2020 17:34:38' prior: 50874844!
isExpired

	^expirationDate monthIndex <= Date today monthIndex.! !

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingaPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:34:39'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:34:39'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 17:34:39'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingaPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:34:39'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:35:41'!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today - Date today daysInMonth days) month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !

!methodRemoval: CreditCardTest #test03ACreditCardWithExpirationDatingaPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:35:42'!
test03ACreditCardWithExpirationDatingaPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today - Date today daysInMonth days) month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:36:45'!
test04ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today - 365 days) month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:36:51'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:36:51'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 17:36:51'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:36:51'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:36:51'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:37:32' prior: 50874951!
test04ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today - 365 days + Date today daysInMonth days) month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:37:33'!
FAILURE!

expirationDate!

Date today!
!CreditCard methodsFor: 'testing' stamp: 'LH 11/21/2020 17:38:59' prior: 50874907!
isExpired

	^(expirationDate monthIndex <= Date today monthIndex) or: expirationDate year < Date today year.! !

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:40:10'!
ERROR!
!CreditCard methodsFor: 'testing' stamp: 'LH 11/21/2020 17:40:34' prior: 50874998!
isExpired

	^(expirationDate monthIndex <= Date today monthIndex) or: expirationDate yearNumber < Date today yearNumber.! !

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:40:35'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:40:35'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 17:40:35'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:40:35'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:40:35'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:42:54'!
test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today + 365 days) month belongingTo: 'Juan Pablo'.
	
	self deny: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 17:42:56'!
FAILURE!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 17:43:18'!
FAILURE!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 17:43:18'!
FAILURE!
!CreditCard methodsFor: 'testing' stamp: 'LH 11/21/2020 17:44:50' prior: 50875008!
isExpired

	^((expirationDate monthIndex <= Date today monthIndex) and: expirationDate yearNumber = Date today yearNumber) or: expirationDate yearNumber < Date today yearNumber.! !

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 17:44:52'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:44:58'!
test05ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today - 365 days + Date today daysInMonth days) month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !

!methodRemoval: CreditCardTest #test04ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:44:58'!
test04ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today - 365 days + Date today daysInMonth days) month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:45:02'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:45:04'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:45:04'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 17:45:04'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:45:04'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 17:45:04'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:45:04'!
PASSED!
!CreditCard methodsFor: 'testing' stamp: 'LH 11/21/2020 17:51:47' prior: 50875057!
isExpired
	|expirationDateYear currentMonth currentYear|
	
	expirationDateYear := expirationDate yearNumber.
	currentMonth := Date today monthIndex.
	currentYear := Date today yearNumber.
	
	
	^	(expirationDate monthIndex <= currentMonth 
			and: expirationDateYear = currentYear)
			
		or: expirationDateYear < currentYear.! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:51:48'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 17:51:48'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:51:48'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 17:51:48'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:51:48'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:51:51'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 17:51:51'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:51:51'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 17:51:51'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:51:51'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:53:12'!
daysThisMonth

	^Date today daysInMonth days.
	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:53:47' prior: 50874699!
test01ACreditCardCanBeNotExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today + self daysThisMonth) month belongingTo: 'Juan Pablo'.
	
	self deny: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:54:20' prior: 50874927!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today - self daysThisMonth) month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:54:22'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:54:22'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 17:54:22'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:54:22'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 17:54:22'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:54:22'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:54:46' prior: 50875069!
test05ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today - 365 days + self daysThisMonth) month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:55:28'!
daysInYear
	
	^365 days 

	! !

----SNAPSHOT----(21 November 2020 17:55:31) CuisUniversity-4384.image priorSource: 17376241!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 17:55:33'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 17:55:33'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 17:55:33'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 17:55:33'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 17:55:33'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:55:43' prior: 50875034!
test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today + self daysInYear) month belongingTo: 'Juan Pablo'.
	
	self deny: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 17:55:53' prior: 50875223!
test05ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: (Date today - self daysInYear + self daysThisMonth) month belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:02:06'!
test06CreditCarNumberCantHaveAnythingBut16Digits
	
	self should: [CreditCard     withNumber: '0000000000000000' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:02:24' prior: 50874859!
test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard     withNumber: '0000000000000000' 
							expirationDate: Date today month 
							belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:02:45' prior: 50875188!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard     withNumber: '0000000000000000' 
							expirationDate: (Date today - self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:02:58' prior: 50875260!
test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired
	|aCreditCard|
	
	aCreditCard := CreditCard     withNumber: '0000000000000000' 
							expirationDate: (Date today + self daysInYear) month 
							belongingTo: 'Juan Pablo'.
	
	self deny: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:03:10' prior: 50875271!
test05ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := CreditCard     withNumber: '0000000000000000' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:03:16' prior: 50875282!
test06CreditCarNumberCantHaveAnythingBut16Digits
	
	self should: [CreditCard         withNumber: '0000000000000000' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	! !

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Digits stamp: 'LH 11/21/2020 18:03:17'!
ERROR!
!CreditCard class methodsFor: 'error description' stamp: 'LH 11/21/2020 18:03:32'!
invalidCreditCardNumber
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error description' stamp: 'LH 11/21/2020 18:05:13' prior: 50875358!
invalidCreditCardNumber
	^'CreditCard number can only have exactly 16 numbers and nothing else'! !

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Digits stamp: 'LH 11/21/2020 18:05:18'!
FAILURE!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Digits stamp: 'LH 11/21/2020 18:07:08'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 18:09:39' prior: 50874724!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	aCCNumber size = 16 ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Digits stamp: 'LH 11/21/2020 18:09:40'!
FAILURE!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:10:02' prior: 50875342!
test06CreditCarNumberCantHaveAnythingBut16Digits
	
	self should: [CreditCard         withNumber: '00000000000000000' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
		
	self should: [CreditCard         withNumber: '000000000000000' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	! !

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Digits stamp: 'LH 11/21/2020 18:10:03'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:10:03'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:10:03'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:10:03'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:10:04'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:10:04'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Digits stamp: 'LH 11/21/2020 18:10:04'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:10:34'!
test06CreditCarNumberCantHaveAnythingBut16Symbols
	
	self should: [CreditCard         withNumber: '00000000000000000' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
		
	self should: [CreditCard         withNumber: '000000000000000' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	! !

!methodRemoval: CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Digits stamp: 'LH 11/21/2020 18:10:34'!
test06CreditCarNumberCantHaveAnythingBut16Digits
	
	self should: [CreditCard         withNumber: '00000000000000000' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
		
	self should: [CreditCard         withNumber: '000000000000000' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:11:55'!
test07CreditCarNumberCantHaveAnythingButNumbers
	
	self should: [CreditCard         withNumber: '000000000000000O' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	! !

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:11:57'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 18:17:29' prior: 50875377!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	aCCNumber size = 16 ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	(aCCNumber allSatisfy: [:aDigit | aDigit isDigit]) ifFalse:[^self error: CreditCard invalidCreditCardNumber].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:17:31'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:17:31'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:17:31'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:17:31'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:17:31'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:17:31'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:17:31'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:17:31'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:20:19'!
test08TheNameOfACreditCardOwnerCanNotBeBlank
	
	self should: [CreditCard         withNumber: '000000000000000O' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: ''.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	! !

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:20:22'!
ERROR!
!CreditCard class methodsFor: 'error description' stamp: 'LH 11/21/2020 18:20:33'!
invalidCreditCardOwnerName
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error description' stamp: 'LH 11/21/2020 18:20:48' prior: 50875559!
invalidCreditCardOwnerName
	^'Invalid Owner Name'! !

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:20:50'!
FAILURE!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:21:18' prior: 50875543!
test08TheNameOfACreditCardOwnerCanNotBeBlank
	
	self should: [CreditCard         withNumber: '0000000000000000' 
							expirationDate: (Date today - self daysInYear + self daysThisMonth) month 
							belongingTo: ''.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	! !

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:21:18'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 18:22:21' prior: 50875498!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [:aDigit | aDigit isDigit]) ifFalse:[^self error: CreditCard invalidCreditCardNumber].
	aCCNumber size = 16 ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName ].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 18:22:59' prior: 50875589!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [:aDigit | aDigit isDigit]) ifFalse:[^self error: CreditCard invalidCreditCardNumber].
	aCCNumber size = 16 ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:23:17'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:23:17'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:23:17'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:23:17'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:23:17'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:23:18'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:23:18'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:23:18'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:23:18'!
PASSED!
!CreditCard methodsFor: 'testing' stamp: 'LH 11/21/2020 18:24:29' prior: 50875121!
isExpired
	"returns if this credit card is expired"
	|expirationDateYear currentMonth currentYear|
	
	expirationDateYear := expirationDate yearNumber.
	currentMonth := Date today monthIndex.
	currentYear := Date today yearNumber.
	
	
	^	(expirationDate monthIndex <= currentMonth 
			and: expirationDateYear = currentYear)
			
		or: expirationDateYear < currentYear.! !
!CreditCard class methodsFor: 'error description' stamp: 'LH 11/21/2020 18:25:03' prior: 50875564!
invalidCreditCardOwnerName
	^'The Name of the Owner can not be blank'! !
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 18:28:55'!
invalidCreditCardError
	
	^self error: CreditCard invalidCreditCardNumber

! !
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 18:29:19' prior: 50875607!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [:aDigit | aDigit isDigit]) ifFalse:[^self error: CreditCard invalidCreditCardNumber].
	aCCNumber size = 16 ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!methodRemoval: CreditCard class #invalidCreditCardError stamp: 'LH 11/21/2020 18:29:21'!
invalidCreditCardError
	
	^self error: CreditCard invalidCreditCardNumber

!
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 18:31:06'!
throwCardNumberErrorIfTheNextBlockIsFalse: aBlock
	
	aBlock value ifFalse:[^self error: CreditCard invalidCreditCardNumber].
	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 18:32:00' prior: 50875684!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber allSatisfy: [:aDigit | aDigit isDigit]].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	(aCCNumber allSatisfy: [:aDigit | aDigit isDigit]) ifFalse:[^self error: CreditCard invalidCreditCardNumber].
	aCCNumber size = 16 ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:32:02'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:32:02'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:32:02'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:32:02'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:32:02'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:32:02'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:32:02'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:32:02'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'LH 11/21/2020 18:32:06' prior: 50875714!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber allSatisfy: [:aDigit | aDigit isDigit]].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:32:08'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:32:08'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:32:08'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:32:08'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:32:08'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:32:08'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:32:08'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:32:08'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:32:38' prior: 50875178!
test01ACreditCardCanBeNotExpired
	|aCreditCard|
	
	aCreditCard := CreditCard     withNumber: '0000000000000000' 
							expirationDate: (Date today + self daysThisMonth) month 
							belongingTo: 'Juan Pablo'.
	
	self deny: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:34:04'!
standardCreditCardWithTheExpirationDate: anExpirationDate
	
	 ^CreditCard  withNumber: '0000000000000000' 
				expirationDate: anExpirationDate 
				belongingTo: 'Juan Pablo'.
	


	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:34:39' prior: 50875814!
test01ACreditCardCanBeNotExpired
	|aCreditCard|
	
	aCreditCard := self standardCreditCardWithTheExpirationDate: (Date today + self daysThisMonth) month.
	
	self deny: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:34:40'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:34:40'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:34:40'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:34:41'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:34:41'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:34:41'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:34:41'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:34:41'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:34:41'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:34:58' prior: 50875295!
test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired
	|aCreditCard|
	
	aCreditCard := self standardCreditCardWithTheExpirationDate: Date today month.
	
	self assert: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:35:00'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:35:00'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:35:00'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:35:00'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:35:00'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:35:00'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:35:00'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:35:00'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:35:00'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:35:16' prior: 50875306!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := self standardCreditCardWithTheExpirationDate: (Date today - self daysThisMonth) month.
	
	self assert: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:35:20'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:35:20'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:35:20'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:35:20'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:35:20'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:35:20'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:35:20'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:35:20'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:35:20'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:35:35' prior: 50875318!
test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired
	|aCreditCard|
	
	aCreditCard := self standardCreditCardWithTheExpirationDate: (Date today + self daysInYear) month .
	
	self deny: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:35:38'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:35:38'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:35:38'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:35:38'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:35:38'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:35:38'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:35:38'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:35:38'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:35:38'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:35:55' prior: 50875330!
test05ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := self standardCreditCardWithTheExpirationDate: (Date today - self daysInYear + self daysThisMonth) month.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:39:36'!
assertInvalidCardNumberErrorWithNumber: aCCNumber 
	
	self should: [CreditCard         withNumber: aCCNumber
							expirationDate: Date today month 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	! !
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:40:19' prior: 50875439!
test06CreditCarNumberCantHaveAnythingBut16Symbols
	
	self assertInvalidCardNumberErrorWithNumber: '00000000000000000'.
	self assertInvalidCardNumberErrorWithNumber: '000000000000000'.
	! !

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:40:20'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:40:20'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:40:20'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:40:20'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:40:20'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:40:20'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:40:20'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:40:20'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:40:20'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'LH 11/21/2020 18:40:48' prior: 50875481!
test07CreditCarNumberCantHaveAnythingButNumbers
	
	self assertInvalidCardNumberErrorWithNumber: '000000000000000O'.
	
	! !

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:40:51'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:40:51'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:40:51'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:40:51'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:40:51'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:40:51'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:40:51'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:40:51'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:40:51'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/21/2020 18:41:47'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/21/2020 18:41:47'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/21/2020 18:41:47'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/21/2020 18:41:47'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/21/2020 18:41:47'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/21/2020 18:41:47'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/21/2020 18:41:47'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/21/2020 18:41:47'!
PASSED!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/21/2020 18:42:58'!
checkOut: aShoppingCart withCreditCard: aCreditCard

	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	
	aCreditCard isExpired ifTrue:[ ^self error: ShoppingCashier invalidCreditCard].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/21/2020 18:45:09' prior: 50874369!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: OrderedCollection new.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'. 
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary new).
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ShoppingCashier invalidCartErrorMessage.! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/21/2020 18:45:11'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/21/2020 18:45:11'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/21/2020 18:45:11'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/21/2020 18:45:11'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/21/2020 18:45:11'!
PASSED!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/21/2020 18:45:51' prior: 50874385!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self assert: 100 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard).! !

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/21/2020 18:45:52'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/21/2020 18:45:52'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/21/2020 18:45:52'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/21/2020 18:45:52'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/21/2020 18:45:52'!
PASSED!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/21/2020 18:46:28' prior: 50874402!
test03ACartWithManyBooksWillCheckOutCorrectly
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)) .
	
	self assert: 300 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard).! !

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/21/2020 18:46:29'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/21/2020 18:46:29'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/21/2020 18:46:29'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/21/2020 18:46:29'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/21/2020 18:46:29'!
PASSED!
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/21/2020 18:47:02' prior: 50874498!
test04TheCardShouldNotBeExpired
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self invalidDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self should:[ (aCashier checkOut: aCart withCardNumber: '0000000000000000' ExpirationDate: self invalidDate andCardOwner: 'Juan Pablo')]
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.
		! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/21/2020 18:47:36' prior: 50876273!
test04TheCardShouldNotBeExpired
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self invalidDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self should:[ aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.
		! !

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/21/2020 18:47:37'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/21/2020 18:47:38'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/21/2020 18:47:38'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/21/2020 18:47:38'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/21/2020 18:47:38'!
PASSED!

----SNAPSHOT----(21 November 2020 18:49:11) CuisUniversity-4384.image priorSource: 17394782!

----STARTUP---- (22 November 2020 16:22:59) as /Users/ilanolkies/uba/ingsoft1/macos64/CuisUniversity-4384.image!


----End fileIn of /Users/ilanolkies/uba/ingsoft1/ingeSoft-2020-2c/20-TusLibros-2/Ejercicio-20-Tus-Libros-2.st----!
!CreditCard methodsFor: 'testing' stamp: 'IO 11/22/2020 16:26:31' prior: 50877288!
isExpired
	"returns if this credit card is expired"
	|expirationDateYear currentMonth currentYear|
	
	expirationDateYear := expirationDate yearNumber.
	currentMonth := Date today monthIndex.
	currentYear := Date today yearNumber.
	
	
	^(
		expirationDate monthIndex <= currentMonth  and: expirationDateYear = currentYear)	
		or: expirationDateYear < currentYear.! !
!CreditCard methodsFor: 'initialization' stamp: 'IO 11/22/2020 16:26:39' prior: 50877280!
initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	creditCardNumber := aCCNumber.
	expirationDate := anExpirationDate.
	nameOfOwner := aName.
! !
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:28:19' prior: 50877318!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	((aCCNumber allSatisfy: [:aDigit | aDigit isDigit]) or: aCCNumber size = 16)
		self error: CreditCard invalidCreditCardNumber.
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber allSatisfy: [:aDigit | aDigit isDigit]].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:28:21'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:28:21'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:28:21'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:28:21'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:28:21'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:28:21'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:28:21'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:28:21'!
FAILURE!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:28:21'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:28:21'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:28:21'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:28:21'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:28:21'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:28:21'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:28:21'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:28:21'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 16:28:21'!
ERROR!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:28:21'!
ERROR!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:28:21'!
ERROR!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 16:28:21'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:28:26' prior: 50877514!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber allSatisfy: [:aDigit | aDigit isDigit]].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:28:27'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 16:28:27'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:28:44' prior: 50877604!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit]) or: aCCNumber size = 16)
		self error: CreditCard invalidCreditCardNumber.
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber allSatisfy: [:aDigit | aDigit isDigit]].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:29:08' prior: 50877690!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit]) and: aCCNumber size = 16)
		ifFalse:	 (self error: CreditCard invalidCreditCardNumber).
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber allSatisfy: [:aDigit | aDigit isDigit]].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:29:09'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:29:09'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:29:09'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:29:09'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:29:09'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:29:09'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:29:09'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:29:09'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:29:13' prior: 50877711!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit]) or: aCCNumber size = 16)
		ifFalse:	 (self error: CreditCard invalidCreditCardNumber).
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber allSatisfy: [:aDigit | aDigit isDigit]].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:29:13'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:29:13'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:29:13'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:29:13'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:29:13'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:29:13'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:29:13'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:29:13'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:29:19' prior: 50877763!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit]) or: aCCNumber size = 16)
		ifTrue:	 (self error: CreditCard invalidCreditCardNumber).
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber allSatisfy: [:aDigit | aDigit isDigit]].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:29:20'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:29:20'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:29:20'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:29:20'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:29:20'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:29:20'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:29:20'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:29:20'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:29:40' prior: 50877815!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit])
		ifFalse:	 (self error: CreditCard invalidCreditCardNumber).
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber allSatisfy: [:aDigit | aDigit isDigit]].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:29:41'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:29:41'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:29:41'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:29:41'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:29:41'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:29:41'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:29:41'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:29:41'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:29:46' prior: 50877867!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	


	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber allSatisfy: [:aDigit | aDigit isDigit]].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:29:46'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:29:46'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:29:46'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:29:46'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:29:46'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:29:46'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:29:46'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:29:46'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:29:48'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:29:48'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:29:48'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:29:48'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:29:48'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:29:48'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:29:48'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:29:48'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:30:33' prior: 50877918!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [:aDigit | aDigit isDigit]) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	self throwCardNumberErrorIfTheNextBlockIsFalse: [].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:30:34'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:30:34'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:30:34'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:30:34'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:30:34'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:30:34'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:30:34'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:30:34'!
FAILURE!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:30:43'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:30:43'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:30:43'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:30:43'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:30:43'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:30:43'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:30:43'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:30:43'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:30:51' prior: 50877996!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [:aDigit | aDigit isDigit]) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	self throwCardNumberErrorIfTheNextBlockIsFalse: [].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:31:07' prior: 50878076!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit]) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	self throwCardNumberErrorIfTheNextBlockIsFalse: [].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:31:08' prior: 50878095!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	self throwCardNumberErrorIfTheNextBlockIsFalse: [].
	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:31:09'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:31:09'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:31:09'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:31:09'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:31:09'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:31:09'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:31:09'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:31:09'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:31:20' prior: 50878114!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) ifFalse: [^self error: CreditCard invalidCreditCardNumber].


	self throwCardNumberErrorIfTheNextBlockIsFalse: [aCCNumber size = 16].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:31:20'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:31:20'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:31:20'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:31:20'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:31:20'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:31:20'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:31:20'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:31:20'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:31:45' prior: 50878163!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and: (aCCNumber size = 16)) ifFalse: [^self error: CreditCard invalidCreditCardNumber].


	self throwCardNumberErrorIfTheNextBlockIsFalse: [].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:31:46'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:31:46'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:31:46'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:31:46'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:31:46'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:31:46'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:31:46'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:31:46'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:31:50' prior: 50878211!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) or: (aCCNumber size = 16)) ifFalse: [^self error: CreditCard invalidCreditCardNumber].


	self throwCardNumberErrorIfTheNextBlockIsFalse: [].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:31:50'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:31:50'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:31:50'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:31:50'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:31:50'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:31:50'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:31:50'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:31:50'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:32:11' prior: 50878259!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	(aCCNumber size = 16) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:32:12'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:32:12'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:32:12'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:32:12'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:32:12'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:32:12'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:32:12'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:32:12'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:32:47' prior: 50878307!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ] not) ifTrue: [^self error: CreditCard invalidCreditCardNumber].

	(aCCNumber size = 16) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:32:48'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:32:48'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:32:48'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:32:48'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:32:48'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:32:48'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:32:48'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:32:48'!
FAILURE!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:32:55'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:32:55'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:32:55'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:32:55'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:32:55'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:32:55'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:32:55'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:32:55'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:33:00' prior: 50878355!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ] negated ) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	(aCCNumber size = 16) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:33:01'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:33:01'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:33:01'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:33:01'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:33:01'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:33:01'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:33:01'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:33:01'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:33:06' prior: 50878434!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ] negated ) ifTrue: [^self error: CreditCard invalidCreditCardNumber].

	(aCCNumber size = 16) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:33:07'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:33:07'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:33:07'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:33:07'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:33:07'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:33:07'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:33:07'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:33:07'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:33:12' prior: 50878482!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	(aCCNumber size = 16) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:33:13'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:33:13'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:33:13'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:33:13'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:33:13'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:33:13'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:33:13'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:33:13'!
PASSED!

true negated !

true not !
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:33:40' prior: 50878530!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ] not) ifTrue: [^self error: CreditCard invalidCreditCardNumber].

	(aCCNumber size = 16) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:33:41'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:33:41'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:33:41'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:33:41'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:33:41'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:33:41'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:33:41'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:33:41'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:33:49' prior: 50878579!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) not) ifTrue: [^self error: CreditCard invalidCreditCardNumber].

	(aCCNumber size = 16) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:33:50'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:33:50'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:33:50'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:33:50'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:33:50'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:33:50'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:33:50'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:33:50'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:34:16' prior: 50878627!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) not) ifTrue: [^self error: CreditCard invalidCreditCardNumber].

	((aCCNumber size = 16) not) ifTrue: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:34:16'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:34:16'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:34:16'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:34:16'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:34:16'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:34:16'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:34:16'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:34:16'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:34:52' prior: 50878675!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) not) or:
		((aCCNumber size = 16) not)
	) ifTrue: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:34:53'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:34:53'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:34:53'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:34:53'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:34:53'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:34:53'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:34:53'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:34:53'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:35:03' prior: 50878723!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ])) and:
		((aCCNumber size = 16)) not
	) ifTrue: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:35:04'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:35:04'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:35:04'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:35:04'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:35:04'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:35:04'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:35:04'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:35:04'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:35:04'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:35:12' prior: 50878770!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ])) and:
		((aCCNumber size = 16))) not
	) ifTrue: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:35:13'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:35:13'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:35:13'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:35:13'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:35:13'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:35:13'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:35:13'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:35:13'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:35:19' prior: 50878821!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ])) and:
		((aCCNumber size = 16)))
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:35:20'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:35:20'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:35:20'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:35:20'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:35:20'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:35:20'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:35:20'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:35:20'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:35:31' prior: 50878868!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		((aCCNumber size = 16)))
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:35:31'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:35:31'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:35:31'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:35:31'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:35:31'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:35:31'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:35:31'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:35:31'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:35:42' prior: 50878915!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		(aCCNumber size = 16))
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:35:43'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:35:43'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:35:43'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:35:43'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:35:43'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:35:43'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:35:43'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:35:43'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:36:06' prior: 50878962!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		((aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16)
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:36:06'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:36:06'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:36:06'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:36:06'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:36:06'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:36:06'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:36:06'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:36:06'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:36:11' prior: 50879009!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].
	
	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:36:12'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:36:12'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:36:12'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:36:12'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:36:12'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:36:12'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:36:12'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:36:12'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:36:26' prior: 50879056!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	aName isEmpty ifTrue:[^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:36:26'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:36:26'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:36:26'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:36:26'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:36:27'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:36:27'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:36:27'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:36:27'!
PASSED!

!methodRemoval: CreditCard class #throwCardNumberErrorIfTheNextBlockIsFalse: stamp: 'IO 11/22/2020 16:36:32'!
throwCardNumberErrorIfTheNextBlockIsFalse: aBlock
	
	aBlock value ifFalse:[^self error: CreditCard invalidCreditCardNumber].
	!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:36:34'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:36:34'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:36:34'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:36:34'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:36:34'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:36:34'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:36:34'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:36:34'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:36:53' prior: 50879103!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	aName isEmpty ifTrue: [^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:36:54'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:36:54'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:36:54'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:36:54'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:36:54'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:36:54'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:36:54'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:36:54'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:37:02' prior: 50879187!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	aName notEmpty ifFalse: [^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName ! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:37:03'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:37:03'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:37:03'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:37:03'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:37:03'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:37:03'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:37:03'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:37:03'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 16:37:07' prior: 50879234!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	aName notEmpty ifFalse: [^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName.
! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:37:07'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:37:07'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:37:07'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:37:07'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:37:07'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:37:07'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:37:07'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:37:07'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 16:37:10'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:38:41'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:38:41'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:38:41'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:38:41'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:38:41'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:38:41'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:38:41'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:38:41'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'IO 11/22/2020 16:41:27'!
validCreditCardWithTheExpirationDate: anExpirationDate
	
	 ^CreditCard  withNumber: '0000000000000000' 
				expirationDate: anExpirationDate 
				belongingTo: 'Juan Pablo'.
	


	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 16:41:27' prior: 50877026!
test05ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (Date today - self daysInYear + self daysThisMonth) month.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 16:41:27' prior: 50877006!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (Date today - self daysThisMonth) month.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 16:41:27' prior: 50877016!
test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (Date today + self daysInYear) month .
	
	self deny: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 16:41:27' prior: 50876988!
test01ACreditCardCanBeNotExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (Date today + self daysThisMonth) month.
	
	self deny: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 16:41:27' prior: 50876997!
test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: Date today month.
	
	self assert: aCreditCard isExpired.

	! !

!methodRemoval: CreditCardTest #standardCreditCardWithTheExpirationDate: stamp: 'IO 11/22/2020 16:41:27'!
standardCreditCardWithTheExpirationDate: anExpirationDate
	
	 ^CreditCard  withNumber: '0000000000000000' 
				expirationDate: anExpirationDate 
				belongingTo: 'Juan Pablo'.
	


	!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 16:41:30'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:43:04'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:43:04'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:43:04'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:43:04'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:43:04'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:43:04'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:43:04'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:43:04'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:43:48'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'IO 11/22/2020 16:43:53' prior: 50879468!
test01ACreditCardCanBeNotExpired

	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (Date today + self daysThisMonth) month.
	
	self deny: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:43:53'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:43:53'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:43:53'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:43:53'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:43:53'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:43:53'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:43:53'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:43:53'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:43:53'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'IO 11/22/2020 16:47:01'!
newShoppingCartWithAProduct
	
	^ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3').
! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'IO 11/22/2020 16:47:09' prior: 50877076!
test01NewCartIsEmpty
	|aCart|
	
	aCart := self newShoppingCartWithAProduct.
	
	self assert: 0 equals: aCart listCart size.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:47:11'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:47:11'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:47:11'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:47:11'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:47:11'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:47:11'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:47:11'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:47:11'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:47:11'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'IO 11/22/2020 16:47:16' prior: 50877084!
test02CanAddABookToACart
	|aCart|
	
	aCart := self newShoppingCartWithAProduct.
	aCart add: '0-7645-2641-3'.
	
	self assert: 1 equals: aCart listCart size.
	self assert: (aCart listCart includes: '0-7645-2641-3').! !

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:47:16'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:47:16'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:47:16'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:47:16'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:47:16'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:47:16'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:47:16'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:47:16'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:47:17'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'IO 11/22/2020 16:47:43' prior: 50877109!
test04CanMoreThanOneFromTheSameBookToACart
	|aCart|
	
	aCart := self newShoppingCartWithAProduct.
	aCart add: '0-7645-2641-3' withQuantity: 2.
	
	self assert: 2 equals: aCart listCart size.
	
	aCart add: '0-7645-2641-3'.
	
	self assert: 3 equals: aCart listCart size.! !

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:47:44'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:47:44'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:47:44'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:47:44'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:47:44'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:47:44'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:47:44'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:47:44'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:47:44'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'IO 11/22/2020 16:47:51' prior: 50877131!
test06CanNotAdd0Books
	|aCart|
	
	aCart := self newShoppingCartWithAProduct.
	
	self should: [aCart add: '0-7645-2641-3' withQuantity: 0]
		raise: Error
		withMessageText: ShoppingCart invalidQuantityErrorMessage.
	
! !

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:47:52'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:47:52'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:47:52'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:47:52'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:47:52'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:47:52'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:47:52'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:47:52'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:47:52'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'IO 11/22/2020 16:47:58' prior: 50877142!
test07CanNotAddMinusBooks
	|aCart|
	
	aCart := self newShoppingCartWithAProduct.
	
	self should: [aCart add: '0-7645-2641-3' withQuantity: -1]
		raise: Error
		withMessageText: ShoppingCart invalidQuantityErrorMessage.
	
! !

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:47:58'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:47:58'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:47:58'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:47:58'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:47:58'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:47:58'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:47:58'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:47:58'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:47:58'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'IO 11/22/2020 16:48:02' prior: 50877153!
test08CanNotAddNotWholeBooks
	|aCart|
	
	aCart := self newShoppingCartWithAProduct.
	
	self should: [aCart add: '0-7645-2641-3' withQuantity: 1.5]
		raise: Error
		withMessageText: ShoppingCart invalidQuantityErrorMessage.
	
! !

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:48:03'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:48:03'!
PASSED!
!ShoppingCart methodsFor: 'accessing' stamp: 'IO 11/22/2020 16:48:37' prior: 50877363!
listCart
	^books.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:48:37'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:48:37'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:48:37'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:48:37'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:48:37'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:48:37'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:48:37'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:48:37'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'IO 11/22/2020 16:50:21'!
test09CannotEditCartList
	| aCart list |
	
	aCart := self newShoppingCartWithAProduct.
	aCart add: '0-7645-2641-3'.
	
	list := aCart listCart.
	
	self assert: 1 equals: aCart listCart size.
	
	self assert: (aCart listCart includes: '0-7645-2641-3').
	self deny: (aCart listCart includes: '0-7645-2641-3').! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'IO 11/22/2020 16:50:53' prior: 50879904!
test09CannotEditCartList
	| aCart list |
	
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3'.

	
	list := aCart listCart.
	list add: '0-7645-2641-4'.

	self assert: 1 equals: aCart listCart size.

	self assert: (aCart listCart includes: '0-7645-2641-3').
	self deny: (aCart listCart includes: '0-7645-2641-4').! !

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 16:50:54'!
FAILURE!
!ShoppingCart methodsFor: 'accessing' stamp: 'IO 11/22/2020 16:51:08' prior: 50879876!
listCart
	^books copy.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:51:09'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:51:09'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:51:09'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:51:09'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:51:09'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:51:09'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:51:09'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:51:09'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 16:51:09'!
PASSED!

!methodRemoval: ShoppingCashier #checkOut:withCardNumber:ExpirationDate:andCardOwner: stamp: 'IO 11/22/2020 16:52:45'!
checkOut: aShoppingCart withCardNumber: aCreditCardNumber ExpirationDate: anExpirationDate andCardOwner: aName 

	aShoppingCart listCart size = 0 ifTrue:[^self error: ShoppingCashier invalidCartErrorMessage].
	
	(anExpirationDate yearNumber < Date today yearNumber)
			ifTrue:[ ^self error: ShoppingCashier invalidCreditCard].  
	(anExpirationDate yearNumber = Date today yearNumber and: anExpirationDate monthIndex <= Date today monthIndex) 
			ifTrue: [^self error: ShoppingCashier invalidCreditCard ].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:53:02'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 16:53:02'!
PASSED!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'IO 11/22/2020 16:54:16' prior: 50877443!
checkOut: aShoppingCart withCreditCard: aCreditCard

	aShoppingCart listCart size = 0 ifTrue: [^self error: ShoppingCashier invalidCartErrorMessage].
	
	aCreditCard isExpired ifTrue:[ ^self error: ShoppingCashier invalidCreditCard].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].! !
!ShoppingCashier methodsFor: 'checkOut' stamp: 'IO 11/22/2020 16:54:22' prior: 50880063!
checkOut: aShoppingCart withCreditCard: aCreditCard

	aShoppingCart listCart size = 0 ifTrue: [^self error: ShoppingCashier invalidCartErrorMessage].
	
	aCreditCard isExpired ifTrue: [^self error: ShoppingCashier invalidCreditCard].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 16:54:23'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:54:23'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 16:54:23'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 16:54:23'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 17:11:21'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 17:11:21'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 17:11:21'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 17:11:21'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 17:11:21'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 17:11:21'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 17:11:21'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 17:11:21'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 17:11:21'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'IO 11/22/2020 17:17:47' prior: 50877051!
test08TheNameOfACreditCardOwnerCanNotBeBlank
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: (Date today - self daysInYear + self daysThisMonth) month
		belongingTo: ''.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	! !

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:17:57'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:17:57'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:17:57'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:17:57'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:17:57'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:17:57'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:17:57'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:17:58'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:17:58'!
PASSED!

'' size!

'Juan Pablo de la Cierra Gigante' size!
!CreditCardTest methodsFor: 'tests' stamp: 'IO 11/22/2020 17:19:56'!
test08TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: (Date today - self daysInYear + self daysThisMonth) month
		belongingTo: 'Juan Pablo de la Cierra Gigante'.] "31 chars"
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	! !

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:19:57'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'IO 11/22/2020 17:20:02'!
test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: (Date today - self daysInYear + self daysThisMonth) month
		belongingTo: 'Juan Pablo de la Cierra Gigante'.] "31 chars"
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	! !

!methodRemoval: CreditCardTest #test08TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:20:02'!
test08TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: (Date today - self daysInYear + self daysThisMonth) month
		belongingTo: 'Juan Pablo de la Cierra Gigante'.] "31 chars"
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:20:03'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 17:20:53' prior: 50879281!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	(aName notEmpty or: (aName size > 30)) ifFalse: [^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName.
! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:20:54'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:20:54'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:20:54'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:20:54'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:20:54'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:20:54'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:20:54'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:20:54'!
PASSED!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:20:54'!
FAILURE!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:20:54'!
FAILURE!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:21:00'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:21:00'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:21:00'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:21:00'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:21:00'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:21:00'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:21:01'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:21:01'!
PASSED!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:21:01'!
FAILURE!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:21:01'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 17:21:50' prior: 50880229!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	(aName notEmpty or: (aName size <= 30)) ifFalse: [^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName.
! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:21:51'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:21:51'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:21:51'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:21:51'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:21:51'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:21:51'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:21:51'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:21:51'!
FAILURE!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:21:51'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 17:21:54' prior: 50880323!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	(aName notEmpty or: (aName size < 30)) ifFalse: [^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName.
! !

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:21:56'!
FAILURE!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:21:59'!
FAILURE!

aName size < 30!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 17:22:36' prior: 50880374!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	(aName notEmpty and: (aName size < 30)) ifFalse: [^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName.
! !

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:22:38'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:22:38'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:22:38'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:22:38'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:22:38'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:22:38'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:22:38'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:22:38'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:22:38'!
PASSED!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:22:38'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:22:41'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:22:41'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:22:41'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:22:41'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:22:41'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:22:41'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:22:41'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:22:41'!
PASSED!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:22:41'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:22:42'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:22:43'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 17:22:43'!
PASSED!
!ShoppingCashier class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 17:23:48'!
withPriceCatalogue: aPriceCatalogue andProcessor: aMerchantProcessor

	^self new initializeWithPriceCatalogue: aPriceCatalogue andProcessor: aMerchantProcessor.! !
!ShoppingCashier class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 17:23:56' prior: 50877480!
withPriceCatalogue: aPriceCatalogue 

	^self new initializeWithPriceCatalogue: aPriceCatalogue ! !

!methodRemoval: ShoppingCashier class #withPriceCatalogue:andProcessor: stamp: 'IO 11/22/2020 17:23:59'!
withPriceCatalogue: aPriceCatalogue andProcessor: aMerchantProcessor

	^self new initializeWithPriceCatalogue: aPriceCatalogue andProcessor: aMerchantProcessor.!

!classDefinition: #DummyMerchantProcessor category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/22/2020 17:25:40'!
Object subclass: #DummyMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCashierTest methodsFor: 'tests' stamp: 'IO 11/22/2020 17:25:35'!
test05ACartShouldFailIfMerchantProcessorFails

	|aCashier aCart aCreditCard aMerchantProcessor|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aMerchantProcessor := DummyMerchantProcessor newWithFailure.

	aCashier := ShoppingCashier
		withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100))
		andMerchantProcessor: aMerchantProcessor.
	
	self assert: 300 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard).! !

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:25:45'!
ERROR!
!DummyMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 17:25:54'!
newWithFailure
	self shouldBeImplemented.! !
!DummyMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 17:26:11' prior: 50880627!
newWithFailure
	self basicNew initializeWithFailure.
! !

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:26:14'!
ERROR!
!DummyMerchantProcessor methodsFor: 'initialization' stamp: 'IO 11/22/2020 17:26:21'!
initializeWithFailure
	self shouldBeImplemented.! !

!classDefinition: #DummyMerchantProcessor category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/22/2020 17:26:28'!
Object subclass: #DummyMerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!DummyMerchantProcessor methodsFor: 'initialization' stamp: 'IO 11/22/2020 17:26:26' prior: 50880641!
initializeWithFailure
	failure := true.! !

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:26:31'!
ERROR!
!ShoppingCashier class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 17:26:38'!
withPriceCatalogue: aDictionary andMerchantProcessor: aClass 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithPriceCatalogue: aDictionary andMerchantProcessor: aClass ! !
!ShoppingCashier class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 17:26:48' prior: 50880663!
withPriceCatalogue: aDictionary andMerchantProcessor: aClass 

	^self new initializeWithPriceCatalogue: aDictionary andMerchantProcessor: aClass ! !

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:27:01'!
ERROR!

!classDefinition: #ShoppingCashier category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/22/2020 17:28:20'!
Object subclass: #ShoppingCashier
	instanceVariableNames: 'priceCatalogue dictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #ShoppingCashier category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/22/2020 17:28:20'!
Object subclass: #ShoppingCashier
	instanceVariableNames: 'priceCatalogue dictionary class'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCashier methodsFor: 'initialization' stamp: 'IO 11/22/2020 17:28:20'!
initializeWithPriceCatalogue: aDictionary andMerchantProcessor: aClass 
	self shouldBeImplemented.
	dictionary := aDictionary.
	class := aClass.! !

!classDefinition: #ShoppingCashier category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/22/2020 17:28:45'!
Object subclass: #ShoppingCashier
	instanceVariableNames: 'priceCatalogue dictionary class merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCashier methodsFor: 'initialization' stamp: 'IO 11/22/2020 17:28:44' prior: 50880703!
initializeWithPriceCatalogue: aDictionary andMerchantProcessor: aMerchantProcessor 

	dictionary := aDictionary.
	merchantProcessor := aMerchantProcessor.! !

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:28:48'!
ERROR!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:29:01'!
ERROR!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:29:24'!
ERROR!
!ShoppingCashier methodsFor: 'initialization' stamp: 'IO 11/22/2020 17:30:08' prior: 50880720!
initializeWithPriceCatalogue: aPriceCatalogue andMerchantProcessor: aMerchantProcessor 

	priceCatalogue := aPriceCatalogue.
	merchantProcessor := aMerchantProcessor.! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 17:30:08'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:30:08'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:30:08'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 17:30:08'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:30:08'!
PASSED!

Object subclass: #ShoppingCashier
	instanceVariableNames: 'priceCatalogue merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #ShoppingCashier category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/22/2020 17:30:26'!
Object subclass: #ShoppingCashier
	instanceVariableNames: 'priceCatalogue merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:30:27'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:31:03'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:31:03'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:31:03'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:31:03'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:31:03'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:31:03'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:31:03'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:31:03'!
PASSED!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:31:03'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 17:31:04'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:31:04'!
PASSED!
!ShoppingCashierTest methodsFor: 'tests' stamp: 'IO 11/22/2020 17:31:50' prior: 50880598!
test05ACartShouldFailIfMerchantProcessorFails

	|aCashier aCart aCreditCard aMerchantProcessor|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aMerchantProcessor := DummyMerchantProcessor newWithFailure.

	aCashier := ShoppingCashier
		withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100))
		andMerchantProcessor: aMerchantProcessor.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: DummyMerchantProcessor dummyError.
! !

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:31:54'!
ERROR!
!DummyMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 17:32:15'!
dummyError
	self shouldBeImplemented.! !
!DummyMerchantProcessor class methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 17:33:01'!
dummyErrorMessage
	^'Merchant Processor error message'.
! !

!methodRemoval: DummyMerchantProcessor class #dummyError stamp: 'IO 11/22/2020 17:33:04'!
dummyError
	self shouldBeImplemented.!
!ShoppingCashierTest methodsFor: 'tests' stamp: 'IO 11/22/2020 17:33:21' prior: 50880941!
test05ACartShouldFailIfMerchantProcessorFails

	|aCashier aCart aCreditCard aMerchantProcessor|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aMerchantProcessor := DummyMerchantProcessor newWithFailure.

	aCashier := ShoppingCashier
		withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100))
		andMerchantProcessor: aMerchantProcessor.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: DummyMerchantProcessor dummyErrorMessage.
! !

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:33:22'!
FAILURE!

Object subclass: #MerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #MerchantProcessor category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/22/2020 17:34:04'!
Object subclass: #MerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

MerchantProcessor subclass: #DummyMerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #MerchantProcessor category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/22/2020 17:34:25'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

MerchantProcessor subclass: #DummyMerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #DummyMerchantProcessor category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/22/2020 17:34:30'!
MerchantProcessor subclass: #DummyMerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

MerchantProcessor subclass: #NullMerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #NullMerchantProcessor category: 'Ejercicio-20-Tus-Libros' stamp: 'IO 11/22/2020 17:34:35'!
MerchantProcessor subclass: #NullMerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!MerchantProcessor methodsFor: 'no messages' stamp: 'IO 11/22/2020 17:35:10'!
checkoutWith: aCreditCard for: anAmount
	^self subclassResponsibility.
! !
!DummyMerchantProcessor methodsFor: 'nil' stamp: 'IO 11/22/2020 17:35:41' overrides: 50881076!
checkoutWith: aCreditCard for: anAmount
	^self error: DummyMerchantProcessor dummyErrorMessage.
! !
!NullMerchantProcessor methodsFor: 'no messages' stamp: 'IO 11/22/2020 17:35:54' overrides: 50881076!
checkoutWith: aCreditCard for: anAmount

! !
!ShoppingCashier methodsFor: 'checkOut' stamp: 'IO 11/22/2020 17:36:08' prior: 50880077!
checkOut: aShoppingCart withCreditCard: aCreditCard

	aShoppingCart listCart size = 0 ifTrue: [^self error: ShoppingCashier invalidCartErrorMessage].
	aCreditCard isExpired ifTrue: [^self error: ShoppingCashier invalidCreditCard].
	
	^ aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].! !
!NullMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 17:36:29'!
debitWith: aCreditCard for: anAmount

! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 17:36:29'!
debitWith: aCreditCard for: anAmount
	^self subclassResponsibility.
! !
!DummyMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 17:36:29' overrides: 50881112!
debitWith: aCreditCard for: anAmount
	^self error: DummyMerchantProcessor dummyErrorMessage.
! !

!methodRemoval: NullMerchantProcessor #checkoutWith:for: stamp: 'IO 11/22/2020 17:36:29'!
checkoutWith: aCreditCard for: anAmount

!

!methodRemoval: MerchantProcessor #checkoutWith:for: stamp: 'IO 11/22/2020 17:36:29'!
checkoutWith: aCreditCard for: anAmount
	^self subclassResponsibility.
!

!methodRemoval: DummyMerchantProcessor #checkoutWith:for: stamp: 'IO 11/22/2020 17:36:29'!
checkoutWith: aCreditCard for: anAmount
	^self error: DummyMerchantProcessor dummyErrorMessage.
!
!ShoppingCashier methodsFor: 'initialization' stamp: 'IO 11/22/2020 17:36:51' prior: 50877456!
initializeWithPriceCatalogue: aPriceCatalogue 

	priceCatalogue := aPriceCatalogue.
	merchantProcessor := NullMerchantProcessor new.! !
!ShoppingCashier methodsFor: 'checkOut' stamp: 'IO 11/22/2020 17:37:31' prior: 50881094!
checkOut: aShoppingCart withCreditCard: aCreditCard

	| total |
	aShoppingCart listCart size = 0 ifTrue: [^self error: ShoppingCashier invalidCartErrorMessage].
	aCreditCard isExpired ifTrue: [^self error: ShoppingCashier invalidCreditCard].
	
	total := aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].
	merchantProcessor debitWith: aCreditCard for: total.
	^total.! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 17:37:31'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:37:31'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:37:31'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 17:37:31'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:37:31'!
FAILURE!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:37:31'!
FAILURE!
!DummyMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 17:38:23' prior: 50881118 overrides: 50881112!
debitWith: aCreditCard for: anAmount
	^self error: DummyMerchantProcessor dummyErrorMessage.
! !

!classRenamed: #DummyMerchantProcessor as: #ErroredMerchantProcessor stamp: 'IO 11/22/2020 17:38:46'!
Smalltalk renameClassNamed: #DummyMerchantProcessor as: #ErroredMerchantProcessor!
!ErroredMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 17:38:46' prior: 50881187 overrides: 50881112!
debitWith: aCreditCard for: anAmount
	^self error: ErroredMerchantProcessor dummyErrorMessage.
! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'IO 11/22/2020 17:38:46' prior: 50880986!
test05ACartShouldFailIfMerchantProcessorFails

	|aCashier aCart aCreditCard aMerchantProcessor|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aMerchantProcessor := ErroredMerchantProcessor newWithFailure.

	aCashier := ShoppingCashier
		withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100))
		andMerchantProcessor: aMerchantProcessor.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ErroredMerchantProcessor dummyErrorMessage.
! !

!methodRemoval: ErroredMerchantProcessor #initializeWithFailure stamp: 'IO 11/22/2020 17:39:03'!
initializeWithFailure
	failure := true.!

!methodRemoval: ErroredMerchantProcessor class #newWithFailure stamp: 'IO 11/22/2020 17:39:09'!
newWithFailure
	self basicNew initializeWithFailure.
!
!ShoppingCashierTest methodsFor: 'tests' stamp: 'IO 11/22/2020 17:39:18' prior: 50881207!
test05ACartShouldFailIfMerchantProcessorFails

	|aCashier aCart aCreditCard aMerchantProcessor|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aMerchantProcessor := ErroredMerchantProcessor new.

	aCashier := ShoppingCashier
		withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100))
		andMerchantProcessor: aMerchantProcessor.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ErroredMerchantProcessor dummyErrorMessage.
! !

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:39:19'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 17:39:19'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:39:19'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:39:19'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 17:39:19'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:39:19'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:39:21'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 17:39:21'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:39:21'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:39:21'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 17:39:21'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:39:21'!
PASSED!
!ShoppingCashier methodsFor: 'initialization' stamp: 'IO 11/22/2020 17:41:36' prior: 50881140!
initializeWithPriceCatalogue: aPriceCatalogue 

	self initializeWithPriceCatalogue: aPriceCatalogue andMerchantProcessor: NullMerchantProcessor new.
! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 17:41:37'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:41:37'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:41:37'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 17:41:37'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:41:37'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'IO 11/22/2020 17:41:39'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:41:39'!
PASSED!
!CreditCard methodsFor: 'testing' stamp: 'IO 11/22/2020 17:51:37' prior: 50877490!
isExpired
	"returns if this credit card is expired"
	|expirationDateYear currentMonth currentYear|
	
	expirationDateYear := expirationDate yearNumber.
	currentMonth := Date today monthIndex.
	currentYear := Date today yearNumber.
	
	
	^(
		expirationDate monthIndex <= currentMonth  and: expirationDateYear = currentYear
	) or: expirationDateYear < currentYear.! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 17:51:38'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 17:51:38'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 17:51:38'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 17:51:38'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 17:51:38'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 17:51:38'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 17:51:38'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 17:51:38'!
PASSED!

!testRun: #CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 17:51:38'!
PASSED!
!ShoppingCashierTest methodsFor: 'tests' stamp: 'IO 11/22/2020 17:56:34'!
test05ACartShouldNotCheckoutIfMerchantProcessorFails

	|aCashier aCart aCreditCard aMerchantProcessor|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aMerchantProcessor := ErroredMerchantProcessor new.

	aCashier := ShoppingCashier
		withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100))
		andMerchantProcessor: aMerchantProcessor.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ErroredMerchantProcessor dummyErrorMessage.
! !

!methodRemoval: ShoppingCashierTest #test05ACartShouldFailIfMerchantProcessorFails stamp: 'IO 11/22/2020 17:56:34'!
test05ACartShouldFailIfMerchantProcessorFails

	|aCashier aCart aCreditCard aMerchantProcessor|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aMerchantProcessor := ErroredMerchantProcessor new.

	aCashier := ShoppingCashier
		withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100))
		andMerchantProcessor: aMerchantProcessor.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ErroredMerchantProcessor dummyErrorMessage.
!
!ShoppingCashierTest methodsFor: 'tests' stamp: 'IO 11/22/2020 17:56:41' prior: 50881470!
test05ACartShouldNotCheckoutIfMerchantProcessorFails

	|aCashier aCart aCreditCard aMerchantProcessor|
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aMerchantProcessor := ErroredMerchantProcessor new.

	aCashier := ShoppingCashier
		withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100))
		andMerchantProcessor: aMerchantProcessor.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ErroredMerchantProcessor dummyErrorMessage.
		
	
! !

!methodRemoval: ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 18:10:27'!
test09CannotEditCartList
	| aCart list |
	
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3'.

	
	list := aCart listCart.
	list add: '0-7645-2641-4'.

	self assert: 1 equals: aCart listCart size.

	self assert: (aCart listCart includes: '0-7645-2641-3').
	self deny: (aCart listCart includes: '0-7645-2641-4').!
!ShoppingCartTest methodsFor: 'tests' stamp: 'IO 11/22/2020 18:11:44'!
test09CannotEditCartList
	| aCart list |
	
	
	aCart := ShoppingCart withCatalogue: (OrderedCollection with: '0-7645-2641-3' with: '0-7645-2641-4').
	aCart add: '0-7645-2641-3'.

	
	list := aCart listCart.
	list add: '0-7645-2641-4'.

	self assert: 1 equals: aCart listCart size.

	self assert: (aCart listCart includes: '0-7645-2641-3').
	self deny: (aCart listCart includes: '0-7645-2641-4').! !

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 18:11:45'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'IO 11/22/2020 18:11:45'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'IO 11/22/2020 18:11:45'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'IO 11/22/2020 18:11:45'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'IO 11/22/2020 18:11:45'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'IO 11/22/2020 18:11:45'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'IO 11/22/2020 18:11:45'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'IO 11/22/2020 18:11:45'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'IO 11/22/2020 18:11:45'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'IO 11/22/2020 18:11:45'!
PASSED!

!methodRemoval: CreditCardTest #test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars stamp: 'IO 11/22/2020 18:11:50'!
test09TheNameOfACreditCardOwnerCanNotHaveMoreThan30Chars
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: (Date today - self daysInYear + self daysThisMonth) month
		belongingTo: 'Juan Pablo de la Cierra Gigante'.] "31 chars"
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 11/22/2020 18:12:01' prior: 50880400!
withNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName 
	
	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCreditCardNumber].

	(aName notEmpty) ifFalse: [^self error: CreditCard invalidCreditCardOwnerName].

	^self new initializeWithNumber: aCCNumber expirationDate: anExpirationDate belongingTo: aName.
! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'IO 11/22/2020 18:12:02'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'IO 11/22/2020 18:12:02'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'IO 11/22/2020 18:12:02'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'IO 11/22/2020 18:12:02'!
PASSED!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'IO 11/22/2020 18:12:02'!
PASSED!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'IO 11/22/2020 18:12:02'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'IO 11/22/2020 18:12:02'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'IO 11/22/2020 18:12:02'!
PASSED!

----SNAPSHOT----(22 November 2020 18:13:19) CuisUniversity-4384.image priorSource: 17449337!

----STARTUP---- (23 November 2020 17:08:22) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!


!classRemoval: #ShoppingCashier stamp: 'LH 11/23/2020 17:36:54'!
Object subclass: #ShoppingCashier
	instanceVariableNames: 'priceCatalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ShoppingCart stamp: 'LH 11/23/2020 17:36:54'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books catalgue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #CreditCard stamp: 'LH 11/23/2020 17:36:55'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber expirationDate nameOfOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ShoppingCashierTest stamp: 'LH 11/23/2020 17:36:55'!
TestCase subclass: #ShoppingCashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ShoppingCartTest stamp: 'LH 11/23/2020 17:36:55'!
TestCase subclass: #ShoppingCartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #CreditCardTest stamp: 'LH 11/23/2020 17:36:56'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\Ejercicio-20-Tus-Libros-2.st----!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/23/2020 17:39:53' prior: 50876920!
add: anISBN withQuantity: aQuantity 
	
	(aQuantity isInteger and: aQuantity > 0) ifFalse:[^self error: ShoppingCart invalidQuantityErrorMessage ].	(catalgue includes: anISBN) ifFalse:[^self error: ShoppingCart invalidISBNErrorMessage].
	
	books add: anISBN withOccurrences: aQuantity.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/23/2020 17:39:54'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/23/2020 17:39:54'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/23/2020 17:39:54'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/23/2020 17:39:54'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 17:39:54'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/23/2020 17:39:54'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/23/2020 17:39:54'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/23/2020 17:39:54'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/23/2020 17:39:54'!
PASSED!
!NullMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'LH 11/23/2020 17:40:54' prior: 50876888 overrides: 50876831!
debitWith: aCreditCard for: anAmount

	^anAmount
! !
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/23/2020 17:41:59' prior: 50876969!
checkOut: aShoppingCart withCreditCard: aCreditCard

	| total |
	aShoppingCart listCart size = 0 ifTrue: [^self error: ShoppingCashier invalidCartErrorMessage].
	aCreditCard isExpired ifTrue: [^self error: ShoppingCashier invalidCreditCard].
	
	total := aShoppingCart listCart inject: 0 into: [:theSum :anISBN | theSum + priceCatalogue at: anISBN].
	merchantProcessor debitWith: aCreditCard for: total.
	^total.! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 17:42:00'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/23/2020 17:42:00'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/23/2020 17:42:00'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/23/2020 17:42:00'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 17:42:00'!
PASSED!
!ShoppingCartTest methodsFor: 'util' stamp: 'LH 11/23/2020 17:46:18' prior: 50876611!
newShoppingCartWithAProduct
	
	^ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
! !
!ShoppingCartTest methodsFor: 'util' stamp: 'LH 11/23/2020 17:47:05' prior: 50877118!
newShoppingCartWithAProduct
	
	^ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 17:47:29' prior: 50876530!
test03CanAddManyBooksToACart
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	aCart add: '0-7645-2641-3'.
	aCart add: '0-7645-2641-4'.
	
	self assert: 2 equals: aCart listCart size.
	self assert: (aCart listCart includes: '0-7645-2641-3').
	self assert: (aCart listCart includes: '0-7645-2641-4').! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 17:47:45' prior: 50876595!
test09CannotEditCartList
	| aCart list |
	
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	aCart add: '0-7645-2641-3'.

	
	list := aCart listCart.
	list add: '0-7645-2641-4'.

	self assert: 1 equals: aCart listCart size.

	self assert: (aCart listCart includes: '0-7645-2641-3').
	self deny: (aCart listCart includes: '0-7645-2641-4').! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/23/2020 17:48:38' prior: 50876913!
add: anISBN 
	
	(catalgue includesKey: anISBN) ifFalse:[^self error: ShoppingCart invalidISBNErrorMessage].
	
	books add: anISBN.! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/23/2020 17:48:44' prior: 50877037!
add: anISBN withQuantity: aQuantity 
	
	(aQuantity isInteger and: aQuantity > 0) ifFalse:[^self error: ShoppingCart invalidQuantityErrorMessage ].	(catalgue includesKey: anISBN) ifFalse:[^self error: ShoppingCart invalidISBNErrorMessage].
	
	books add: anISBN withOccurrences: aQuantity.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/23/2020 17:48:47'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/23/2020 17:48:47'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/23/2020 17:48:47'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/23/2020 17:48:47'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 17:48:47'!
FAILURE!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/23/2020 17:48:47'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/23/2020 17:48:47'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/23/2020 17:48:47'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/23/2020 17:48:47'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 17:48:47'!
FAILURE!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/23/2020 17:49:09'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/23/2020 17:49:09'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/23/2020 17:49:09'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/23/2020 17:49:09'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 17:49:09'!
FAILURE!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/23/2020 17:49:09'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/23/2020 17:49:10'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/23/2020 17:49:10'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/23/2020 17:49:10'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 17:49:10'!
FAILURE!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 17:49:29' prior: 50876555!
test05CanNotAddABookWithInvalidISBN
	|aCart|
	
	aCart := ShoppingCart withCatalogue: (Dictionary new).
	
	self should: [aCart add: '0-7645-2641-3']
		raise: Error
		withMessageText: ShoppingCart invalidISBNErrorMessage.
	
! !

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 17:49:31'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/23/2020 17:49:31'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/23/2020 17:49:31'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/23/2020 17:49:31'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/23/2020 17:49:31'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 17:49:31'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/23/2020 17:49:31'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/23/2020 17:49:31'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/23/2020 17:49:31'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/23/2020 17:49:31'!
PASSED!
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/23/2020 17:50:25'!
validateISBNInCatalogue: anISBN

	(catalgue includesKey: anISBN) ifFalse:[^self error: ShoppingCart invalidISBNErrorMessage].
	! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/23/2020 17:50:59' prior: 50877170!
add: anISBN withQuantity: aQuantity 
	
	(aQuantity isInteger and: aQuantity > 0) ifFalse:[^self error: ShoppingCart invalidQuantityErrorMessage ].	self validateISBNInCatalogue: anISBN.
	books add: anISBN withOccurrences: aQuantity.! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/23/2020 17:51:01' prior: 50877293!
add: anISBN withQuantity: aQuantity 
	
	(aQuantity isInteger and: aQuantity > 0) ifFalse:[^self error: ShoppingCart invalidQuantityErrorMessage ].	self validateISBNInCatalogue: anISBN.
	
	books add: anISBN withOccurrences: aQuantity.! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/23/2020 17:51:34' prior: 50877163!
add: anISBN 

	^self add: anISBN withQuantity:1.! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/23/2020 17:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/23/2020 17:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/23/2020 17:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/23/2020 17:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 17:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/23/2020 17:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/23/2020 17:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/23/2020 17:51:36'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/23/2020 17:51:36'!
PASSED!
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/23/2020 17:52:25' prior: 50876630!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: Dictionary new.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'. 
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary new).
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ShoppingCashier invalidCartErrorMessage.! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/23/2020 17:52:39' prior: 50876648!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self assert: 100 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard).! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/23/2020 17:52:49' prior: 50876666!
test03ACartWithManyBooksWillCheckOutCorrectly
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)) .
	
	self assert: 300 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard).! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/23/2020 17:52:54' prior: 50876687!
test04TheCardShouldNotBeExpired
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self invalidDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)) .
	
	self should:[ aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.
		! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/23/2020 17:53:12' prior: 50876707!
test05ACartShouldNotCheckoutIfMerchantProcessorFails

	|aCashier aCart aCreditCard aMerchantProcessor|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aMerchantProcessor := ErroredMerchantProcessor new.

	aCashier := ShoppingCashier
		withPriceCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100))
		andMerchantProcessor: aMerchantProcessor.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ErroredMerchantProcessor dummyErrorMessage.
		
	
! !

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 17:53:17'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 17:53:17'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/23/2020 17:53:17'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/23/2020 17:53:18'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/23/2020 17:53:18'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 17:53:18'!
PASSED!
!CreditCardTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:06:30' prior: 50876488!
daysThisMonth

	^GregorianMonthOfYear numberOfDays days.
	! !
!CreditCardTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:07:36' prior: 50876473!
assertInvalidCardNumberErrorWithNumber: aCCNumber 
	
	self should: [CreditCard         withNumber: aCCNumber
							expirationDate: (GregorianMonth current next: self daysThisMonth) 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:08:10' prior: 50876397!
test01ACreditCardCanBeNotExpired

	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianDayOfMonth current next: self daysThisMonth).
	
	self deny: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:08:45' prior: 50876406!
test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: GregorianDayOfMonth current.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:10:27' prior: 50876415!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianDayOfMonth current next:  self daysThisMonth negated) month.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:10:51' prior: 50876425!
test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianDayOfMonth current next: self daysInYear) .
	
	self deny: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:12:37' prior: 50876435!
test05ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianDayOfMonth current next: self daysThisMonth - self daysInYear) .
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:13:00' prior: 50876461!
test08TheNameOfACreditCardOwnerCanNotBeBlank
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: (GregorianDayOfMonth current next: self daysThisMonth)
		belongingTo: ''.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	! !
!CreditCard methodsFor: 'testing' stamp: 'LH 11/23/2020 18:14:30' prior: 50876768!
isExpired
	"returns if this credit card is expired"
	"|expirationDateYear currentMonth currentYear|"
		
	^expirationDate < GregorianMonthOfYear current or: expirationDate = GregorianMonthOfYear current.
	
	"expirationDateYear := expirationDate yearNumber.
	currentMonth := Date today monthIndex.
	currentYear := Date today yearNumber.
	
	
	^(
		expirationDate monthIndex <= currentMonth  and: expirationDateYear = currentYear
	) or: expirationDateYear < currentYear."! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:14:33'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/23/2020 18:14:33'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/23/2020 18:14:33'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/23/2020 18:14:33'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/23/2020 18:14:33'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 18:14:33'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/23/2020 18:14:33'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:14:33'!
FAILURE!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:14:41'!
ERROR!
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:15:03' prior: 50877496!
test01ACreditCardCanBeNotExpired

	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianMonthOfYear current next: self daysThisMonth).
	
	self deny: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:15:04'!
ERROR!
!CreditCardTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:15:21' prior: 50877478!
daysThisMonth

	^GregorianMonthOfYear current numberOfDays days.
	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:15:22'!
ERROR!
!CreditCardTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:15:29' prior: 50877626!
daysThisMonth

	^GregorianMonthOfYear current numberOfDays.
	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:15:32'!
ERROR!
!CreditCardTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:19:40' prior: 50877635!
daysThisMonth

	^1 month.
	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:19:41'!
ERROR!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/23/2020 18:19:41'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/23/2020 18:19:41'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/23/2020 18:19:41'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/23/2020 18:19:41'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 18:19:41'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/23/2020 18:19:41'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:19:41'!
FAILURE!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:19:44'!
ERROR!
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:21:08' prior: 50877613!
test01ACreditCardCanBeNotExpired

	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianMonthOfYear current next).
	
	self deny: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:21:10'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:21:10'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/23/2020 18:21:10'!
ERROR!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/23/2020 18:21:10'!
ERROR!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/23/2020 18:21:10'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/23/2020 18:21:10'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 18:21:10'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/23/2020 18:21:10'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:21:10'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:21:32' prior: 50877516!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianDayOfMonth current previous) month.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:21:38' prior: 50877724!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianDayOfMonth current previous).
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:21:50' prior: 50877735!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: GregorianDayOfMonth current previous.
	
	self assert: aCreditCard isExpired.

	! !

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/23/2020 18:21:51'!
ERROR!
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:22:06' prior: 50877506!
test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: GregorianMonthOfYear current.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:22:09' prior: 50877745!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: GregorianMonthOfYear current previous.
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:22:13' prior: 50877527!
test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianMonthOfYear current next: self daysInYear) .
	
	self deny: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:24:05' prior: 50877538!
test05ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianMonthOfYear current next: self daysThisMonth - self daysInYear) .
	
	self assert: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:24:32' prior: 50877549!
test08TheNameOfACreditCardOwnerCanNotBeBlank
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: (GregorianMonthOfYear current next: self daysThisMonth)
		belongingTo: ''.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	! !
!CreditCardTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:24:37' prior: 50877483!
assertInvalidCardNumberErrorWithNumber: aCCNumber 
	
	self should: [CreditCard         withNumber: aCCNumber
							expirationDate: (GregorianMonthOfYear current next: self daysThisMonth) 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	! !
!CreditCardTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:25:32' prior: 50877643!
daysThisMonth

	^GregorianMonthOfYear current numberOfDays.
	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:25:46'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/23/2020 18:25:46'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/23/2020 18:25:46'!
PASSED!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/23/2020 18:25:46'!
ERROR!

!testRun: #CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/23/2020 18:25:46'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 18:25:46'!
FAILURE!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/23/2020 18:25:46'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:25:46'!
FAILURE!

!testRun: #CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/23/2020 18:25:57'!
ERROR!

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 18:26:58'!
FAILURE!
!CreditCardTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:27:55' prior: 50877814!
assertInvalidCardNumberErrorWithNumber: aCCNumber 
	
	self should: [CreditCard         withNumber: aCCNumber
							expirationDate: (GregorianMonthOfYear current next) 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	! !

!testRun: #CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 18:27:57'!
PASSED!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:28:01'!
FAILURE!

!testRun: #CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:28:03'!
PASSED!

!testRun: #CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/23/2020 18:28:06'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:28:50'!
test03ACreditCardWithExpirationDatedInThePastIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: GregorianMonthOfYear current previous.
	
	self assert: aCreditCard isExpired.

	! !

!methodRemoval: CreditCardTest #test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired stamp: 'LH 11/23/2020 18:29:13'!
test03ACreditCardWithExpirationDatingAPastMonthThisYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: GregorianMonthOfYear current previous.
	
	self assert: aCreditCard isExpired.

	!

!methodRemoval: CreditCardTest #test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired stamp: 'LH 11/23/2020 18:29:35'!
test04ACreditCardWithExpirationDatingAFutureYearIsNotExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianMonthOfYear current next: self daysInYear) .
	
	self deny: aCreditCard isExpired.

	!

!methodRemoval: CreditCardTest #test05ACreditCardWithExpirationDatingAPastYearIsExpired stamp: 'LH 11/23/2020 18:29:44'!
test05ACreditCardWithExpirationDatingAPastYearIsExpired
	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: (GregorianMonthOfYear current next: self daysThisMonth - self daysInYear) .
	
	self assert: aCreditCard isExpired.

	!
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:29:51'!
test04CreditCarNumberCantHaveAnythingBut16Symbols
	
	self assertInvalidCardNumberErrorWithNumber: '00000000000000000'.
	self assertInvalidCardNumberErrorWithNumber: '000000000000000'.
	! !

!methodRemoval: CreditCardTest #test06CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 18:29:51'!
test06CreditCarNumberCantHaveAnythingBut16Symbols
	
	self assertInvalidCardNumberErrorWithNumber: '00000000000000000'.
	self assertInvalidCardNumberErrorWithNumber: '000000000000000'.
	!
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:29:57'!
test05CreditCarNumberCantHaveAnythingButNumbers
	
	self assertInvalidCardNumberErrorWithNumber: '000000000000000O'.
	
	! !

!methodRemoval: CreditCardTest #test07CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/23/2020 18:29:57'!
test07CreditCarNumberCantHaveAnythingButNumbers
	
	self assertInvalidCardNumberErrorWithNumber: '000000000000000O'.
	
	!
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:30:02'!
test06TheNameOfACreditCardOwnerCanNotBeBlank
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: (GregorianMonthOfYear current next: self daysThisMonth)
		belongingTo: ''.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	! !

!methodRemoval: CreditCardTest #test08TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:30:03'!
test08TheNameOfACreditCardOwnerCanNotBeBlank
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: (GregorianMonthOfYear current next: self daysThisMonth)
		belongingTo: ''.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	!

!methodRemoval: CreditCardTest #daysInYear stamp: 'LH 11/23/2020 18:30:46'!
daysInYear
	
	^365 days 

	!

!testRun: #CreditCardTest #test06TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:30:50'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:31:06' prior: 50877972!
test06TheNameOfACreditCardOwnerCanNotBeBlank
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: (GregorianMonthOfYear current next)
		belongingTo: ''.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	! !

!testRun: #CreditCardTest #test06TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:31:10'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:31:10'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/23/2020 18:31:10'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatedInThePastIsExpired stamp: 'LH 11/23/2020 18:31:10'!
PASSED!

!testRun: #CreditCardTest #test04CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 18:31:10'!
PASSED!

!testRun: #CreditCardTest #test05CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/23/2020 18:31:10'!
PASSED!

!testRun: #CreditCardTest #test06TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:31:10'!
PASSED!
!CreditCard methodsFor: 'testing' stamp: 'LH 11/23/2020 18:31:29' prior: 50877561!
isExpired
	"returns if this credit card is expired"
	
	^expirationDate < GregorianMonthOfYear current or: expirationDate = GregorianMonthOfYear current.! !
!ShoppingCashierTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:32:10' prior: 50876735!
invalidDate

	^GregorianMonthOfYear current previous
		! !
!ShoppingCashierTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:32:26' prior: 50876740!
validDate

	^GregorianMonthOfYear current next
		! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 18:32:31'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/23/2020 18:32:31'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/23/2020 18:32:31'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/23/2020 18:32:31'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 18:32:32'!
PASSED!

----SNAPSHOT----(23 November 2020 18:33:07) CuisUniversity-4384.image priorSource: 17429928!

!methodRemoval: CreditCardTest #daysThisMonth stamp: 'LH 11/23/2020 18:33:29'!
daysThisMonth

	^GregorianMonthOfYear current numberOfDays.
	!
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:34:35'!
validMonthOfYear

	^GregorianMonthOfYear current next
	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:34:52' prior: 50877681!
test01ACreditCardCanBeNotExpired

	|aCreditCard|
	
	aCreditCard := self validCreditCardWithTheExpirationDate: self validMonthOfYear.
	
	self deny: aCreditCard isExpired.

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:35:04' prior: 50878003!
test06TheNameOfACreditCardOwnerCanNotBeBlank
	
	self should: [CreditCard withNumber: '0000000000000000'
		expirationDate: self validMonthOfYear
		belongingTo: ''.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardOwnerName.
	
	! !
!CreditCardTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:35:22' prior: 50877870!
assertInvalidCardNumberErrorWithNumber: aCCNumber 
	
	self should: [CreditCard         withNumber: aCCNumber
							expirationDate: self validMonthOfYear 
							belongingTo: 'Juan Pablo'.]
		raise: Error
		withMessageText: CreditCard invalidCreditCardNumber.
	
	! !

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:35:26'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/23/2020 18:35:26'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatedInThePastIsExpired stamp: 'LH 11/23/2020 18:35:26'!
PASSED!

!testRun: #CreditCardTest #test04CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 18:35:26'!
PASSED!

!testRun: #CreditCardTest #test05CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/23/2020 18:35:26'!
PASSED!

!testRun: #CreditCardTest #test06TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:35:26'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 18:35:30'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/23/2020 18:35:30'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatedInThePastIsExpired stamp: 'LH 11/23/2020 18:35:30'!
PASSED!

!testRun: #CreditCardTest #test04CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 18:35:30'!
PASSED!

!testRun: #CreditCardTest #test05CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #CreditCardTest #test06TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/23/2020 18:35:31'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 18:35:31'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:37:25'!
test10TheValueOfAnEmptyCartsProductsIs0
	| aCart |
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	self assert: 0 equals: aCart valueOfProducts.! !

!testRun: #ShoppingCartTest #test10TheValueOfAnEmptyCartsProductsIs0 stamp: 'LH 11/23/2020 18:37:28'!
ERROR!
!ShoppingCart methodsFor: 'product value' stamp: 'LH 11/23/2020 18:38:04'!
valueOfProducts
	self shouldBeImplemented.! !
!ShoppingCart methodsFor: 'product value' stamp: 'LH 11/23/2020 18:38:09' prior: 50878223!
valueOfProducts
	^0! !

!testRun: #ShoppingCartTest #test10TheValueOfAnEmptyCartsProductsIs0 stamp: 'LH 11/23/2020 18:38:12'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/23/2020 18:38:12'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/23/2020 18:38:12'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/23/2020 18:38:12'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/23/2020 18:38:12'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 18:38:12'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/23/2020 18:38:12'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/23/2020 18:38:12'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/23/2020 18:38:12'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/23/2020 18:38:12'!
PASSED!

!testRun: #ShoppingCartTest #test10TheValueOfAnEmptyCartsProductsIs0 stamp: 'LH 11/23/2020 18:38:12'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:39:44'!
test11TheValueOfProductsOfACartWithOneProductShouldBeThatProduct
	| aCart |
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).	aCart add: '0-7645-2641-3'.
	
	self assert: 0 equals: aCart valueOfProducts.! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:40:03' prior: 50878210!
test10TheValueOfAnEmptyCartsProductsIs0
	| aCart |
	
	aCart := ShoppingCart withCatalogue: (Dictionary new).
	self assert: 0 equals: aCart valueOfProducts.! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:40:32' prior: 50878266!
test11TheValueOfProductsOfACartWithOneProductShouldBeThatProduct
	| aCart |
	
	aCart := self newShoppingCartWithAProduct .	aCart add: '0-7645-2641-3'.
	
	self assert: 100 equals: aCart valueOfProducts.! !

!testRun: #ShoppingCartTest #test11TheValueOfProductsOfACartWithOneProductShouldBeThatProduct stamp: 'LH 11/23/2020 18:40:33'!
FAILURE!
!ShoppingCart methodsFor: 'product value' stamp: 'LH 11/23/2020 18:41:48' prior: 50878228!
valueOfProducts
	books isEmpty ifFalse:[^100].
	^0! !

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/23/2020 18:41:51'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/23/2020 18:41:51'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/23/2020 18:41:51'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/23/2020 18:41:51'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 18:41:51'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/23/2020 18:41:51'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/23/2020 18:41:51'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/23/2020 18:41:51'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/23/2020 18:41:51'!
PASSED!

!testRun: #ShoppingCartTest #test10TheValueOfAnEmptyCartsProductsIs0 stamp: 'LH 11/23/2020 18:41:51'!
PASSED!

!testRun: #ShoppingCartTest #test11TheValueOfProductsOfACartWithOneProductShouldBeThatProduct stamp: 'LH 11/23/2020 18:41:51'!
PASSED!
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:42:47'!
test11TheValueOfProductsOfACartWithManyProductShouldBeTheirSum
	| aCart |
	
	aCart := self newShoppingCartWithAProduct .	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4' withQuantity: 2.
	
	self assert: 400 equals: aCart valueOfProducts.! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:43:02'!
test12TheValueOfProductsOfACartWithManyProductShouldBeTheirSum
	| aCart |
	
	aCart := self newShoppingCartWithAProduct .	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4' withQuantity: 2.
	
	self assert: 400 equals: aCart valueOfProducts.! !

!methodRemoval: ShoppingCartTest #test11TheValueOfProductsOfACartWithManyProductShouldBeTheirSum stamp: 'LH 11/23/2020 18:43:02'!
test11TheValueOfProductsOfACartWithManyProductShouldBeTheirSum
	| aCart |
	
	aCart := self newShoppingCartWithAProduct .	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4' withQuantity: 2.
	
	self assert: 400 equals: aCart valueOfProducts.!
!ShoppingCartTest methodsFor: 'util' stamp: 'LH 11/23/2020 18:43:51'!
newShoppingCartWithTwoProducts
	
	^ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 50))
! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:44:36' prior: 50877132!
test03CanAddManyBooksToACart
	|aCart|
	
	aCart := self newShoppingCartWithTwoProducts .
	aCart add: '0-7645-2641-3'.
	aCart add: '0-7645-2641-4'.
	
	self assert: 2 equals: aCart listCart size.
	self assert: (aCart listCart includes: '0-7645-2641-3').
	self assert: (aCart listCart includes: '0-7645-2641-4').! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:44:54' prior: 50877147!
test09CannotEditCartList
	| aCart list |
	
	
	aCart := self newShoppingCartWithTwoProducts.
	aCart add: '0-7645-2641-3'.

	
	list := aCart listCart.
	list add: '0-7645-2641-4'.

	self assert: 1 equals: aCart listCart size.

	self assert: (aCart listCart includes: '0-7645-2641-3').
	self deny: (aCart listCart includes: '0-7645-2641-4').! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:45:08' prior: 50878351!
test12TheValueOfProductsOfACartWithManyProductShouldBeTheirSum
	| aCart |
	
	aCart := self newShoppingCartWithTwoProducts .	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4' withQuantity: 2.
	
	self assert: 400 equals: aCart valueOfProducts.! !
!ShoppingCartTest methodsFor: 'tests' stamp: 'LH 11/23/2020 18:45:15' prior: 50878409!
test12TheValueOfProductsOfACartWithManyProductShouldBeTheirSum
	| aCart |
	
	aCart := self newShoppingCartWithTwoProducts .	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4' withQuantity: 2.
	
	self assert: 300 equals: aCart valueOfProducts.! !

!testRun: #ShoppingCartTest #test12TheValueOfProductsOfACartWithManyProductShouldBeTheirSum stamp: 'LH 11/23/2020 18:45:16'!
FAILURE!
!ShoppingCart methodsFor: 'product value' stamp: 'LH 11/23/2020 18:46:22' prior: 50878300!
valueOfProducts
	^books inject: 0 into: [:theSum :anISBN | theSum + catalgue at: anISBN]! !

!classDefinition: #ShoppingCart category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/23/2020 18:46:32'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'LH 11/23/2020 18:46:32' prior: 50878437!
valueOfProducts
	^books inject: 0 into: [:theSum :anISBN | theSum + catalogue at: anISBN]! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'LH 11/23/2020 18:46:33' prior: 50876905!
initializeWithCatalogue: aCatalgue 

	catalogue := aCatalgue.
	books := Bag new.! !
!ShoppingCart methodsFor: 'as yet unclassified' stamp: 'LH 11/23/2020 18:46:33' prior: 50877286!
validateISBNInCatalogue: anISBN

	(catalogue includesKey: anISBN) ifFalse:[^self error: ShoppingCart invalidISBNErrorMessage].
	! !

!testRun: #ShoppingCartTest #test12TheValueOfProductsOfACartWithManyProductShouldBeTheirSum stamp: 'LH 11/23/2020 18:46:34'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/23/2020 18:46:34'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/23/2020 18:46:34'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/23/2020 18:46:34'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/23/2020 18:46:34'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 18:46:34'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/23/2020 18:46:34'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/23/2020 18:46:34'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/23/2020 18:46:35'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/23/2020 18:46:35'!
PASSED!

!testRun: #ShoppingCartTest #test10TheValueOfAnEmptyCartsProductsIs0 stamp: 'LH 11/23/2020 18:46:35'!
PASSED!

!testRun: #ShoppingCartTest #test11TheValueOfProductsOfACartWithOneProductShouldBeThatProduct stamp: 'LH 11/23/2020 18:46:35'!
PASSED!

!testRun: #ShoppingCartTest #test12TheValueOfProductsOfACartWithManyProductShouldBeTheirSum stamp: 'LH 11/23/2020 18:46:35'!
PASSED!
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/23/2020 18:53:41' prior: 50877084!
checkOut: aShoppingCart withCreditCard: aCreditCard

	aShoppingCart listCart size = 0 ifTrue: [^self error: ShoppingCashier invalidCartErrorMessage].
	aCreditCard isExpired ifTrue: [^self error: ShoppingCashier invalidCreditCard].
	
	^merchantProcessor debitWith: aCreditCard for: aShoppingCart valueOfProducts.! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 18:53:42'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/23/2020 18:53:42'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/23/2020 18:53:42'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/23/2020 18:53:42'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 18:53:42'!
PASSED!
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'LH 11/23/2020 18:54:56' prior: 50876831!
debitWith: aCreditCard for: anAmount	"simulator for an interaction with a Merchant Procesor"
	^self subclassResponsibility.
! !
!ErroredMerchantProcessor methodsFor: 'debit operaions' stamp: 'LH 11/23/2020 18:55:39' prior: 50876852 overrides: 50878546!
debitWith: aCreditCard for: anAmount	"see superclass"
	^self error: ErroredMerchantProcessor dummyErrorMessage.
! !
!NullMerchantProcessor methodsFor: 'debit operations' stamp: 'LH 11/23/2020 18:55:51' prior: 50877079 overrides: 50878546!
debitWith: aCreditCard for: anAmount
	"see superclass"
	^anAmount
! !
!ShoppingCart methodsFor: 'product value' stamp: 'LH 11/23/2020 18:56:13' prior: 50878451!
valueOfProducts
	"returns the accumulated value of all products in this cart"
	
	^books inject: 0 into: [:theSum :anISBN | theSum + catalogue at: anISBN]! !
!ShoppingCart methodsFor: 'adding' stamp: 'LH 11/23/2020 18:57:03' prior: 50877304!
add: anISBN withQuantity: aQuantity 	"adds a quantity of the ISBN's book to this cart"

	(aQuantity isInteger and: aQuantity > 0) ifFalse:[^self error: ShoppingCart invalidQuantityErrorMessage ].
	self validateISBNInCatalogue: anISBN.
	
	books add: anISBN withOccurrences: aQuantity.! !
!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/23/2020 18:57:57' prior: 50878514!
checkOut: aShoppingCart withCreditCard: aCreditCard
	"debits the credit card for the contents of the cart"
	
	aShoppingCart listCart size = 0 ifTrue: [^self error: ShoppingCashier invalidCartErrorMessage].
	aCreditCard isExpired ifTrue: [^self error: ShoppingCashier invalidCreditCard].
	
	^merchantProcessor debitWith: aCreditCard for: aShoppingCart valueOfProducts.! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/23/2020 19:01:56' prior: 50877348!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: Dictionary new.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'. 
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new.
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ShoppingCashier invalidCartErrorMessage.! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 19:02:27'!
ERROR!
!ShoppingCashier class methodsFor: 'instance creation' stamp: 'LH 11/23/2020 19:02:33'!
withMerchanProcessor: aNullMerchantProcessor 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithMerchanProcessor: aNullMerchantProcessor ! !
!ShoppingCashier class methodsFor: 'instance creation' stamp: 'LH 11/23/2020 19:02:50' prior: 50878625!
withMerchanProcessor: aMerchantProcessor 

	^self new initializeWithMerchanProcessor: aMerchantProcessor ! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 19:02:54'!
ERROR!
!ShoppingCashier methodsFor: 'initialization' stamp: 'LH 11/23/2020 19:03:05'!
initializeWithMerchanProcessor: aMerchantProcessor 
	self shouldBeImplemented.
	merchantProcessor := aMerchantProcessor.! !
!ShoppingCashier methodsFor: 'initialization' stamp: 'LH 11/23/2020 19:03:13' prior: 50878645!
initializeWithMerchanProcessor: aMerchantProcessor 

	merchantProcessor := aMerchantProcessor.! !

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 19:03:18'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 19:03:18'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/23/2020 19:03:18'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/23/2020 19:03:18'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/23/2020 19:03:18'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 19:03:18'!
PASSED!
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/23/2020 19:03:39' prior: 50877366!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .
	
	self assert: 100 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard).! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/23/2020 19:03:47' prior: 50877385!
test03ACartWithManyBooksWillCheckOutCorrectly
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .
	
	self assert: 300 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard).! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/23/2020 19:03:53' prior: 50877407!
test04TheCardShouldNotBeExpired
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self invalidDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .
	
	self should:[ aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.
		! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/23/2020 19:04:37' prior: 50877428!
test05ACartShouldNotCheckoutIfMerchantProcessorFails

	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.

	aCashier := ShoppingCashier withMerchanProcessor: ErroredMerchantProcessor new.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard]
		raise: Error
		withMessageText: ErroredMerchantProcessor dummyErrorMessage.
		
	
! !

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 19:04:41'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 19:04:41'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/23/2020 19:04:41'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/23/2020 19:04:41'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/23/2020 19:04:41'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 19:04:41'!
PASSED!

!methodRemoval: ShoppingCashier class #withPriceCatalogue: stamp: 'LH 11/23/2020 19:04:53'!
withPriceCatalogue: aPriceCatalogue 

	^self new initializeWithPriceCatalogue: aPriceCatalogue !

!methodRemoval: ShoppingCashier class #withPriceCatalogue:andMerchantProcessor: stamp: 'LH 11/23/2020 19:04:55'!
withPriceCatalogue: aDictionary andMerchantProcessor: aClass 

	^self new initializeWithPriceCatalogue: aDictionary andMerchantProcessor: aClass !

Object subclass: #ShoppingCashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classDefinition: #ShoppingCashier category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/23/2020 19:05:01'!
Object subclass: #ShoppingCashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 19:05:03'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/23/2020 19:05:03'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/23/2020 19:05:03'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/23/2020 19:05:03'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 19:05:03'!
PASSED!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatedInThePastIsExpired stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #CreditCardTest #test04CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #CreditCardTest #test05CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #CreditCardTest #test06TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test10TheValueOfAnEmptyCartsProductsIs0 stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test11TheValueOfProductsOfACartWithOneProductShouldBeThatProduct stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCartTest #test12TheValueOfProductsOfACartWithManyProductShouldBeTheirSum stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 19:05:05'!
PASSED!

!methodRemoval: ShoppingCashier #initializeWithPriceCatalogue: stamp: 'LH 11/23/2020 19:09:21'!
initializeWithPriceCatalogue: aPriceCatalogue 

	self initializeWithPriceCatalogue: aPriceCatalogue andMerchantProcessor: NullMerchantProcessor new.
!

!methodRemoval: ShoppingCashier #initializeWithPriceCatalogue:andMerchantProcessor: stamp: 'LH 11/23/2020 19:09:22'!
initializeWithPriceCatalogue: aPriceCatalogue andMerchantProcessor: aMerchantProcessor 

	priceCatalogue := aPriceCatalogue.
	merchantProcessor := aMerchantProcessor.!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/23/2020 19:09:29'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/23/2020 19:09:29'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/23/2020 19:09:29'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/23/2020 19:09:29'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/23/2020 19:09:29'!
PASSED!

----SNAPSHOT----(23 November 2020 19:10:28) CuisUniversity-4384.image priorSource: 17485594!

----QUIT----(23 November 2020 19:10:42) CuisUniversity-4384.image priorSource: 17513405!

----STARTUP---- (26 November 2020 17:32:11) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!


!classRemoval: #ShoppingCashier stamp: 'LH 11/26/2020 17:32:17'!
Object subclass: #ShoppingCashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ShoppingCart stamp: 'LH 11/26/2020 17:32:17'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #NullMerchantProcessor stamp: 'LH 11/26/2020 17:32:18'!
MerchantProcessor subclass: #NullMerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ErroredMerchantProcessor stamp: 'LH 11/26/2020 17:32:18'!
MerchantProcessor subclass: #ErroredMerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #MerchantProcessor stamp: 'LH 11/26/2020 17:32:18'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #CreditCard stamp: 'LH 11/26/2020 17:32:19'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber expirationDate nameOfOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ShoppingCashierTest stamp: 'LH 11/26/2020 17:32:19'!
TestCase subclass: #ShoppingCashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ShoppingCartTest stamp: 'LH 11/26/2020 17:32:20'!
TestCase subclass: #ShoppingCartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #CreditCardTest stamp: 'LH 11/26/2020 17:32:20'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\Ejercicio-20-Tus-Libros-2.st----!

!testRun: #CreditCardTest #test01ACreditCardCanBeNotExpired stamp: 'LH 11/26/2020 17:32:30'!
PASSED!

!testRun: #CreditCardTest #test02ACreditCardWithExpirationDatingThisMonthAndYearIsExpired stamp: 'LH 11/26/2020 17:32:30'!
PASSED!

!testRun: #CreditCardTest #test03ACreditCardWithExpirationDatedInThePastIsExpired stamp: 'LH 11/26/2020 17:32:30'!
PASSED!

!testRun: #CreditCardTest #test04CreditCarNumberCantHaveAnythingBut16Symbols stamp: 'LH 11/26/2020 17:32:30'!
PASSED!

!testRun: #CreditCardTest #test05CreditCarNumberCantHaveAnythingButNumbers stamp: 'LH 11/26/2020 17:32:30'!
PASSED!

!testRun: #CreditCardTest #test06TheNameOfACreditCardOwnerCanNotBeBlank stamp: 'LH 11/26/2020 17:32:30'!
PASSED!

!testRun: #ShoppingCartTest #test01NewCartIsEmpty stamp: 'LH 11/26/2020 17:32:30'!
PASSED!

!testRun: #ShoppingCartTest #test02CanAddABookToACart stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCartTest #test03CanAddManyBooksToACart stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCartTest #test04CanMoreThanOneFromTheSameBookToACart stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCartTest #test05CanNotAddABookWithInvalidISBN stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCartTest #test06CanNotAdd0Books stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCartTest #test07CanNotAddMinusBooks stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCartTest #test08CanNotAddNotWholeBooks stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCartTest #test09CannotEditCartList stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCartTest #test10TheValueOfAnEmptyCartsProductsIs0 stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCartTest #test11TheValueOfProductsOfACartWithOneProductShouldBeThatProduct stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCartTest #test12TheValueOfProductsOfACartWithManyProductShouldBeTheirSum stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCashierTest #test01AnEmptyCartCannotBeCheckedOut stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCashierTest #test02ACartWith1BookWillCheckOutCorrectly stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCashierTest #test03ACartWithManyBooksWillCheckOutCorrectly stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCashierTest #test04TheCardShouldNotBeExpired stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

!testRun: #ShoppingCashierTest #test05ACartShouldNotCheckoutIfMerchantProcessorFails stamp: 'LH 11/26/2020 17:32:31'!
PASSED!

----QUIT----(26 November 2020 17:32:43) CuisUniversity-4384.image priorSource: 17513727!

----STARTUP---- (26 November 2020 18:35:37) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!


----QUIT----(26 November 2020 19:12:41) CuisUniversity-4384.image priorSource: 17539138!

----STARTUP---- (26 November 2020 20:32:49) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!

!ShoppingCashier methodsFor: 'checkOut' stamp: 'LH 11/26/2020 20:36:05'!
checkOut: aShoppingCart withCreditCard: aCreditCard writeInList: listOfPurchases 
	"debits the credit card for the contents of the cart"
	
	aShoppingCart listCart size = 0 ifTrue: [^self error: ShoppingCashier invalidCartErrorMessage].
	aCreditCard isExpired ifTrue: [^self error: ShoppingCashier invalidCreditCard].
	
	^merchantProcessor debitWith: aCreditCard for: aShoppingCart valueOfProducts.! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/26/2020 20:36:05' prior: 50879278!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: Dictionary new.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'. 
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new.
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: writeInList]
		raise: Error
		withMessageText: ShoppingCashier invalidCartErrorMessage.! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/26/2020 20:36:05' prior: 50879334!
test04TheCardShouldNotBeExpired
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self invalidDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .
	
	self should:[ aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: writeInList]
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.
		! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/26/2020 20:36:05' prior: 50879314!
test03ACartWithManyBooksWillCheckOutCorrectly
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .
	
	self assert: 300 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: writeInList).! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/26/2020 20:36:05' prior: 50879296!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .
	
	self assert: 100 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: writeInList).! !
!ShoppingCashierTest methodsFor: 'as yet unclassified' stamp: 'LH 11/26/2020 20:36:05' prior: 50879354!
test05ACartShouldNotCheckoutIfMerchantProcessorFails

	|aCashier aCart aCreditCard|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.

	aCashier := ShoppingCashier withMerchanProcessor: ErroredMerchantProcessor new.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: writeInList]
		raise: Error
		withMessageText: ErroredMerchantProcessor dummyErrorMessage.
		
	
! !

!methodRemoval: ShoppingCashier #checkOut:withCreditCard: stamp: 'LH 11/26/2020 20:36:05'!
checkOut: aShoppingCart withCreditCard: aCreditCard
	"debits the credit card for the contents of the cart"
	
	aShoppingCart listCart size = 0 ifTrue: [^self error: ShoppingCashier invalidCartErrorMessage].
	aCreditCard isExpired ifTrue: [^self error: ShoppingCashier invalidCreditCard].
	
	^merchantProcessor debitWith: aCreditCard for: aShoppingCart valueOfProducts.!
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/26/2020 20:37:39' prior: 50879779!
test01AnEmptyCartCannotBeCheckedOut
	|aCashier aCart aCreditCard purchaseList|
		purchaseList := OrderedCollection new.
	aCart := ShoppingCart withCatalogue: Dictionary new.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'. 
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new.
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: purchaseList]
		raise: Error
		withMessageText: ShoppingCashier invalidCartErrorMessage.
		
	self assert: purchaseList isEmpty.! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/26/2020 20:45:41' prior: 50879841!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart aCreditCard purchaseList |
		purchaseList := OrderedCollection new.
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .
	
	self assert: 100 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: purchaseList).
	
	self assert: purchaseList! !

!classDefinition: #Purchase category: 'Ejercicio-20-Tus-Libros' stamp: 'LH 11/26/2020 20:54:17'!
Object subclass: #Purchase
	instanceVariableNames: 'contentsOfPurchase ammountPaid'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/26/2020 20:53:40' prior: 50879922!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart aCreditCard purchaseList purchase|

	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
	aCart add: '0-7645-2641-3'.
	purchase := Purchase of: aCart listCart for: aCart valueOfProducts.
	purchaseList := OrderedCollection new.	
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .	
	
	self assert: 100 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: purchaseList).
	
	self assert: purchaseList includes: purchase! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/26/2020 20:56:41' prior: 50879819!
test03ACartWithManyBooksWillCheckOutCorrectly
	|aCashier aCart aCreditCard purchaseList purchase|
	
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.	
	purchase := Purchase of: aCart listCart for: aCart valueOfProducts.
	purchaseList := OrderedCollection new.
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .
	
	self assert: 300 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: purchaseList).
	self assert: (purchaseList includes: purchase).! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/26/2020 20:56:49' prior: 50879952!
test02ACartWith1BookWillCheckOutCorrectly
	|aCashier aCart aCreditCard purchaseList purchase|

	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
	aCart add: '0-7645-2641-3'.
	purchase := Purchase of: aCart listCart for: aCart valueOfProducts.
	purchaseList := OrderedCollection new.	
	
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .	
	
	self assert: 100 equals: (aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: purchaseList).
	
	self assert: (purchaseList includes: purchase).! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/26/2020 20:59:44' prior: 50879798!
test04TheCardShouldNotBeExpired
	|aCashier aCart aCreditCard purchaseList|
		purchaseList := OrderedCollection new.
	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100)).
	aCart add: '0-7645-2641-3'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self invalidDate belongingTo: 'Juan Pablo'.
	
	aCashier := ShoppingCashier withMerchanProcessor: NullMerchantProcessor new .
	
	self should:[ aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: purchaseList]
		raise: Error
		withMessageText: ShoppingCashier invalidCreditCard.
	self assert: purchaseList isEmpty.
		! !
!ShoppingCashierTest methodsFor: 'tests' stamp: 'LH 11/26/2020 21:02:04' prior: 50879861!
test05ACartShouldNotCheckoutIfMerchantProcessorFails

	|aCashier aCart aCreditCard purchaseList|
	purchaseList := OrderedCollection new.

	aCart := ShoppingCart withCatalogue: (Dictionary newFromPairs: #('0-7645-2641-3' 100 '0-7645-2641-4' 100)).
	aCart add: '0-7645-2641-3' withQuantity: 2.
	aCart add: '0-7645-2641-4'.
	aCreditCard := CreditCard withNumber: '0000000000000000' expirationDate: self validDate belongingTo: 'Juan Pablo'.

	aCashier := ShoppingCashier withMerchanProcessor: ErroredMerchantProcessor new.
	
	
	self should: [aCashier checkOut: aCart withCreditCard: aCreditCard writeInList: purchaseList]
		raise: Error
		withMessageText: ErroredMerchantProcessor dummyErrorMessage.	self assert: purchaseList isEmpty.
! !

----QUIT----(26 November 2020 21:03:20) CuisUniversity-4384.image priorSource: 17539366!

----STARTUP---- (26 November 2020 21:09:38) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!


!classRemoval: #ShoppingCashier stamp: 'LH 11/26/2020 21:09:44'!
Object subclass: #ShoppingCashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ShoppingCart stamp: 'LH 11/26/2020 21:09:45'!
Object subclass: #ShoppingCart
	instanceVariableNames: 'books catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #Purchase stamp: 'LH 11/26/2020 21:09:45'!
Object subclass: #Purchase
	instanceVariableNames: 'contentsOfPurchase ammountPaid'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #NullMerchantProcessor stamp: 'LH 11/26/2020 21:09:46'!
MerchantProcessor subclass: #NullMerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ErroredMerchantProcessor stamp: 'LH 11/26/2020 21:09:46'!
MerchantProcessor subclass: #ErroredMerchantProcessor
	instanceVariableNames: 'failure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #MerchantProcessor stamp: 'LH 11/26/2020 21:09:46'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #CreditCard stamp: 'LH 11/26/2020 21:09:47'!
Object subclass: #CreditCard
	instanceVariableNames: 'creditCardNumber expirationDate nameOfOwner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ShoppingCashierTest stamp: 'LH 11/26/2020 21:09:47'!
TestCase subclass: #ShoppingCashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #ShoppingCartTest stamp: 'LH 11/26/2020 21:09:48'!
TestCase subclass: #ShoppingCartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

!classRemoval: #CreditCardTest stamp: 'LH 11/26/2020 21:09:48'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio-20-Tus-Libros'!

----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\TusLibros-33.st----!

TestCase subclass: #InterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceTest category: 'TusLibros' stamp: 'LH 11/26/2020 21:15:09'!
TestCase subclass: #InterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ShopInterface category: 'TusLibros' stamp: 'LH 11/26/2020 21:28:21'!
Object subclass: #ShopInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceTest methodsFor: 'no messages' stamp: 'LH 11/26/2020 21:28:08'!
test01CreateCartYieldsAnEmptyCart
	|cartID shopInterface|
	
	shopInterface := ShopInterface new.
	
	cartID := shopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: Bag new equals: (shopInterface listCart: cartID).
	
	! !

!classRenamed: #InterfaceTest as: #ShopInterfaceTest stamp: 'LH 11/26/2020 21:29:32'!
Smalltalk renameClassNamed: #InterfaceTest as: #ShopInterfaceTest!

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:30:06'!
ERROR!
!ShopInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/26/2020 21:30:19'!
creatCartFor: aString password: aString2 
	self shouldBeImplemented.! !

!methodRemoval: ShopInterface #creatCartFor:password: stamp: 'LH 11/26/2020 21:30:38'!
creatCartFor: aString password: aString2 
	self shouldBeImplemented.!
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:30:55' prior: 50880729!
test01CreateCartYieldsAnEmptyCart
	|cartID aShopInterface|
	
	aShopInterface := ShopInterface new.
	
	cartID := ShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: Bag new equals: (aShopInterface listCart: cartID).
	
	! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:30:56'!
ERROR!
!ShopInterface class methodsFor: 'instance creation' stamp: 'LH 11/26/2020 21:31:02'!
creatCartFor: aString password: aString2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeCreatCartFor: aString password: aString2 ! !
!ShopInterface class methodsFor: 'instance creation' stamp: 'LH 11/26/2020 21:31:08' prior: 50880772!
creatCartFor: aString password: aString2 

	^self new initializeCreatCartFor: aString password: aString2 ! !
!ShopInterface class methodsFor: 'instance creation' stamp: 'LH 11/26/2020 21:31:19' prior: 50880782!
creatCartFor: aUserID password: aString2 

	^self new initializeCreatCartFor: aUserID password: aString2 ! !
!ShopInterface class methodsFor: 'instance creation' stamp: 'LH 11/26/2020 21:31:24' prior: 50880789!
creatCartFor: aUserID password: aPassword 

	^self new initializeCreatCartFor: aUserID password: aPassword ! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:31:29'!
ERROR!

!classDefinition: #ShopInterface category: 'TusLibros' stamp: 'LH 11/26/2020 21:31:42'!
Object subclass: #ShopInterface
	instanceVariableNames: 'userID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ShopInterface category: 'TusLibros' stamp: 'LH 11/26/2020 21:31:42'!
Object subclass: #ShopInterface
	instanceVariableNames: 'userID password'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ShopInterface methodsFor: 'initialization' stamp: 'LH 11/26/2020 21:31:42'!
initializeCreatCartFor: aUserID password: aPassword 
	self shouldBeImplemented.
	userID := aUserID.
	password := aPassword.! !
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:32:19' prior: 50880758!
test01CreateCartYieldsAnEmptyCart
	|cartID aShopInterface|
	
	aShopInterface := ShopInterface new.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: Bag new equals: (aShopInterface listCart: cartID).
	
	! !

!methodRemoval: ShopInterface class #creatCartFor:password: stamp: 'LH 11/26/2020 21:32:28'!
creatCartFor: aUserID password: aPassword 

	^self new initializeCreatCartFor: aUserID password: aPassword !

!methodRemoval: ShopInterface #initializeCreatCartFor:password: stamp: 'LH 11/26/2020 21:32:31'!
initializeCreatCartFor: aUserID password: aPassword 
	self shouldBeImplemented.
	userID := aUserID.
	password := aPassword.!

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:32:43'!
ERROR!
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 21:32:58'!
creatCartFor: aString password: aString2 
	self shouldBeImplemented.! !

!methodRemoval: ShopInterface #creatCartFor:password: stamp: 'LH 11/26/2020 21:34:04'!
creatCartFor: aString password: aString2 
	self shouldBeImplemented.!
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:34:49' prior: 50880827!
test01CreateCartYieldsAnEmptyCart
	|cartID aShopInterface|
	
	aShopInterface := ShopInterface withCatalogue: (Dictionary newFromPairs: #()).
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: Bag new equals: (aShopInterface listCart: cartID).
	
	! !
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:36:08' prior: 50880864!
test01CreateCartYieldsAnEmptyCart
	|cartID aShopInterface|
	
	aShopInterface := ShopInterface withCatalogue: StoreTestObjectsFactory .
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: Bag new equals: (aShopInterface listCart: cartID).
	
	! !
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:36:32' prior: 50880876!
test01CreateCartYieldsAnEmptyCart
	|cartID aShopInterface|
	
	aShopInterface := ShopInterface withCatalogue: StoreTestObjectsFactory defaultCatalog.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: Bag new equals: (aShopInterface listCart: cartID).
	
	! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:36:33'!
ERROR!
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:37:22' prior: 50880888!
test01CreateCartYieldsAnEmptyCart
	|cartID aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: Bag new equals: (aShopInterface listCart: cartID).
	
	! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:37:23'!
ERROR!
!ShopInterface class methodsFor: 'instance creation' stamp: 'LH 11/26/2020 21:37:33'!
withCatalogue: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalogue: aDictionary ! !
!ShopInterface class methodsFor: 'instance creation' stamp: 'LH 11/26/2020 21:37:39' prior: 50880921!
withCatalogue: aDictionary 
	
	^self new initializeWithCatalogue: aDictionary ! !
!ShopInterface class methodsFor: 'instance creation' stamp: 'LH 11/26/2020 21:37:50' prior: 50880930!
withCatalogue: aCatalogue 
	
	^self new initializeWithCatalogue: aCatalogue ! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:37:51'!
ERROR!

!classDefinition: #ShopInterface category: 'TusLibros' stamp: 'LH 11/26/2020 21:38:08'!
Object subclass: #ShopInterface
	instanceVariableNames: 'userID password catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ShopInterface methodsFor: 'initialization' stamp: 'LH 11/26/2020 21:38:08'!
initializeWithCatalogue: aCatalogue 
	self shouldBeImplemented.
	catalogue := aCatalogue.! !
!ShopInterface methodsFor: 'initialization' stamp: 'LH 11/26/2020 21:38:12' prior: 50880952!
initializeWithCatalogue: aCatalogue 

	catalogue := aCatalogue.! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:38:14'!
ERROR!
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 21:38:22'!
creatCartFor: aString password: aString2 
	self shouldBeImplemented.! !

!classDefinition: #ShopInterface category: 'TusLibros' stamp: 'LH 11/26/2020 21:41:19'!
Object subclass: #ShopInterface
	instanceVariableNames: 'userID password catalogue cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 21:41:17' prior: 50880966!
creatCartFor: aUserId password: aPassword

	cart := Cart acceptingItemsOf: catalogue.
	
	^'uniqueCart'
	! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:41:24'!
ERROR!
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 21:41:31'!
listCart: aString 
	self shouldBeImplemented.! !
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 21:43:47' prior: 50880989!
listCart: aCartId 
	
	^cart! !
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 21:43:52' prior: 50880994!
listCart: aCartId 
	
	^cart.! !
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 21:44:14' prior: 50880998!
listCart: aCartId 
	
	^Bag new.! !
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 21:44:26' prior: 50881002!
listCart: aCartId 
	
	^Cart listCart.! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:44:28'!
ERROR!
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 21:44:36' prior: 50881007!
listCart: aCartId 
	
	^cart listCart.! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:44:37'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'LH 11/26/2020 21:45:12'!
listCart
	self shouldBeImplemented.! !
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 21:46:09' prior: 50881015!
listCart: aCartId 
	
	^cart copy.! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:46:24'!
FAILURE!
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:46:44' prior: 50880904!
test01CreateCartYieldsAnEmptyCart
	|cartID aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: (aShopInterface listCart: cartID isEmpty).
	
	! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:46:45'!
ERROR!
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:47:18' prior: 50881035!
test01CreateCartYieldsAnEmptyCart
	|cartID aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: (aShopInterface listCart: cartID) isEmpty.
	
	! !

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:47:19'!
PASSED!

!testRun: #ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:47:19'!
PASSED!

!methodRemoval: Cart #listCart stamp: 'LH 11/26/2020 21:47:26'!
listCart
	self shouldBeImplemented.!
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:53:33'!
test01ANewStoreHasNoCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	self assert: 0 equals: aShopInterface numberOfActiveCarts.
	
	! !
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:53:49'!
test02CreateCartYieldsAnEmptyCar
	|cartID aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: (aShopInterface listCart: cartID) isEmpty.
	
	! !

!methodRemoval: ShopInterfaceTest #test01CreateCartYieldsAnEmptyCart stamp: 'LH 11/26/2020 21:53:49'!
test01CreateCartYieldsAnEmptyCart
	|cartID aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: (aShopInterface listCart: cartID) isEmpty.
	
	!

!testRun: #ShopInterfaceTest #test01ANewStoreHasNoCarts stamp: 'LH 11/26/2020 21:53:52'!
ERROR!
!ShopInterface methodsFor: 'queries' stamp: 'LH 11/26/2020 21:55:34'!
numberOfActiveCarts
	self shouldBeImplemented.! !
!ShopInterface methodsFor: 'queries' stamp: 'LH 11/26/2020 21:55:41' prior: 50881116!
numberOfActiveCarts
	^0.! !

!testRun: #ShopInterfaceTest #test01ANewStoreHasNoCarts stamp: 'LH 11/26/2020 21:55:44'!
PASSED!

!testRun: #ShopInterfaceTest #test01ANewStoreHasNoCarts stamp: 'LH 11/26/2020 21:55:44'!
PASSED!

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 21:55:44'!
PASSED!
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 21:56:52' prior: 50881086!
test02CreateCartYieldsAnEmptyCar
	|cartID aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.
	self assert: (aShopInterface listCart: cartID) isEmpty.
	
	! !

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 21:57:03'!
FAILURE!
!ShopInterface methodsFor: 'queries' stamp: 'LH 11/26/2020 21:57:59' prior: 50881121!
numberOfActiveCarts
	cart isNil ifTrue:[^0].
	^1.! !

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 21:58:05'!
FAILURE!

cart!

cart!

cart isNil!

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 22:00:00'!
PASSED!

!testRun: #ShopInterfaceTest #test01ANewStoreHasNoCarts stamp: 'LH 11/26/2020 22:00:00'!
PASSED!

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 22:00:00'!
PASSED!
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/26/2020 22:01:28'!
test03aShopInterfaceCanCreateMultipleCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	aShopInterface creatCartFor: 'admin' password: 'password'.
	aShopInterface creatCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.
	
	! !

!testRun: #ShopInterfaceTest #test03aShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/26/2020 22:01:32'!
FAILURE!
!ShopInterface methodsFor: 'initialization' stamp: 'LH 11/26/2020 22:04:36' prior: 50880958!
initializeWithCatalogue: aCatalogue 

	catalogue := aCatalogue.
	cart := OrderedCollection new.! !

!testRun: #ShopInterfaceTest #test03aShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/26/2020 22:04:38'!
FAILURE!
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 22:05:29' prior: 50880979!
creatCartFor: aUserId password: aPassword

	cart add: (Cart acceptingItemsOf: catalogue).
	
	^cart size asString.
	! !

!testRun: #ShopInterfaceTest #test03aShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/26/2020 22:05:43'!
FAILURE!
!ShopInterface methodsFor: 'queries' stamp: 'LH 11/26/2020 22:06:05' prior: 50881153!
numberOfActiveCarts
	
	^cart size.! !

!testRun: #ShopInterfaceTest #test03aShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/26/2020 22:06:07'!
PASSED!

!testRun: #ShopInterfaceTest #test01ANewStoreHasNoCarts stamp: 'LH 11/26/2020 22:06:07'!
PASSED!

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 22:06:07'!
FAILURE!

!testRun: #ShopInterfaceTest #test03aShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/26/2020 22:06:07'!
PASSED!

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 22:06:07'!
FAILURE!
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/26/2020 22:07:18' prior: 50881027!
listCart: aCartId 
	
	^(cart at: aCartId asInteger) copy.! !

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 22:07:19'!
PASSED!

!testRun: #ShopInterfaceTest #test03aShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/26/2020 22:07:21'!
PASSED!

!testRun: #ShopInterfaceTest #test01ANewStoreHasNoCarts stamp: 'LH 11/26/2020 22:07:21'!
PASSED!

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 22:07:21'!
PASSED!

!testRun: #ShopInterfaceTest #test03aShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/26/2020 22:07:21'!
PASSED!

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 22:07:27'!
PASSED!

cartID!

aCartId asInteger!

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 22:08:33'!
PASSED!

!testRun: #ShopInterfaceTest #test03aShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/26/2020 22:08:35'!
PASSED!

!testRun: #ShopInterfaceTest #test01ANewStoreHasNoCarts stamp: 'LH 11/26/2020 22:08:35'!
PASSED!

!testRun: #ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/26/2020 22:08:35'!
PASSED!

!testRun: #ShopInterfaceTest #test03aShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/26/2020 22:08:35'!
PASSED!

----SNAPSHOT----(26 November 2020 22:08:57) CuisUniversity-4384.image priorSource: 17549706!

----QUIT----(26 November 2020 22:09:35) CuisUniversity-4384.image priorSource: 17587958!

----STARTUP---- (28 November 2020 15:45:36) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!

!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 15:53:14'!
test02CreateCartCreatesAnEmptyCar
	|cartID aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.
	self assert: (aShopInterface listCart: cartID) isEmpty.
	
	! !

!methodRemoval: ShopInterfaceTest #test02CreateCartYieldsAnEmptyCar stamp: 'LH 11/28/2020 15:53:14'!
test02CreateCartYieldsAnEmptyCar
	|cartID aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.
	self assert: (aShopInterface listCart: cartID) isEmpty.
	
	!
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 15:53:23'!
test03AShopInterfaceCanCreateMultipleCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	aShopInterface creatCartFor: 'admin' password: 'password'.
	aShopInterface creatCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.
	
	! !

!methodRemoval: ShopInterfaceTest #test03aShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 15:53:23'!
test03aShopInterfaceCanCreateMultipleCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	aShopInterface creatCartFor: 'admin' password: 'password'.
	aShopInterface creatCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.
	
	!
!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 16:16:52'!
test04AStoreCanAddItemsToACart
	|aShopInterface objectFactory aCartId|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: objectFactory itemSellByTheStore.
	
	
	aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: 2.
	 
	self assert: 3 equals: ((aShopInterface listCart: aCartId) occurrencesOf: objectFactory itemSellByTheStore).
	
	self should: [aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: -1.]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: (aShopInterface listCart: aCartId) invalidQuantityErrorMessage.
				self assert: 3 equals: ((aShopInterface listCart: aCartId) occurrencesOf: objectFactory itemSellByTheStore)].
	! !

!testRun: #ShopInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 16:17:04'!
ERROR!
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 16:17:21'!
addToCart: aString theBook: aString2 inQuantity: aSmallInteger 
	self shouldBeImplemented.! !
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 16:19:18' prior: 50881385!
addToCart: aCartID theBook: anISBN inQuantity: aQuantity 
	
	(cart at: aCartID asInteger) add: aQuantity of: anISBN.! !

!testRun: #ShopInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 16:19:19'!
PASSED!

!testRun: #ShopInterfaceTest #test01ANewStoreHasNoCarts stamp: 'LH 11/28/2020 16:19:19'!
PASSED!

!testRun: #ShopInterfaceTest #test02CreateCartCreatesAnEmptyCar stamp: 'LH 11/28/2020 16:19:19'!
PASSED!

!testRun: #ShopInterfaceTest #test03AShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 16:19:19'!
PASSED!

!testRun: #ShopInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 16:19:19'!
PASSED!

!classDefinition: #ShopInterface category: 'TusLibros' stamp: 'LH 11/28/2020 16:37:54'!
Object subclass: #ShopInterface
	instanceVariableNames: 'userID password catalogue carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ShopInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 16:37:54' prior: 50881190!
initializeWithCatalogue: aCatalogue 

	catalogue := aCatalogue.
	carts := OrderedCollection new.! !
!ShopInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 16:37:54' prior: 50881200!
creatCartFor: aUserId password: aPassword

	carts add: (Cart acceptingItemsOf: catalogue).
	
	^carts size asString.
	! !
!ShopInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 16:37:54' prior: 50881211!
numberOfActiveCarts
	
	^carts size.! !
!ShopInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 16:37:54' prior: 50881232!
listCart: aCartId 
	
	^(carts at: aCartId asInteger) copy.! !
!ShopInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 16:37:54' prior: 50881391!
addToCart: aCartID theBook: anISBN inQuantity: aQuantity 
	
	(carts at: aCartID asInteger) add: aQuantity of: anISBN.! !
!ShopInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 16:42:27' prior: 50881446!
addToCart: aCartID theBook: anISBN inQuantity: aQuantity 
	
	(carts at: aCartID asInteger) add: aQuantity of: anISBN.! !

----SNAPSHOT----(28 November 2020 16:46:09) CuisUniversity-4384.image priorSource: 17588052!

----QUIT----(28 November 2020 16:46:41) CuisUniversity-4384.image priorSource: 17593880!

----STARTUP---- (28 November 2020 19:21:42) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!

!ShopInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 19:22:15' prior: 50881346!
test04AStoreCanAddItemsToACart
	|aShopInterface objectFactory aCartId|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: objectFactory itemSellByTheStore.
	
	
	aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: 2.
	 
	self assert: 3 equals: ((aShopInterface listCart: aCartId) occurrencesOf: objectFactory itemSellByTheStore).
	
	self should: [aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: -1.]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: (aShopInterface listCart: aCartId) invalidQuantityErrorMessage.
				self assert: 3 equals: ((aShopInterface listCart: aCartId) occurrencesOf: objectFactory itemSellByTheStore)].
	! !

!testRun: #ShopInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 19:22:16'!
PASSED!

!testRun: #ShopInterfaceTest #test01ANewStoreHasNoCarts stamp: 'LH 11/28/2020 19:22:16'!
PASSED!

!testRun: #ShopInterfaceTest #test02CreateCartCreatesAnEmptyCar stamp: 'LH 11/28/2020 19:22:16'!
PASSED!

!testRun: #ShopInterfaceTest #test03AShopInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 19:22:16'!
PASSED!

!testRun: #ShopInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 19:22:16'!
PASSED!

TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'LH 11/28/2020 19:22:31'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/28/2020 19:24:03'!
Object subclass: #StoreInterface
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 19:23:56'!
test01ANewStoreHasNoActiveCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	self assert: 0 equals: aShopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 19:24:12'!
ERROR!
!StoreInterface class methodsFor: 'instance creation' stamp: 'LH 11/28/2020 19:24:26'!
withCatalogue: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalogue: aDictionary ! !
!StoreInterface class methodsFor: 'instance creation' stamp: 'LH 11/28/2020 19:24:48' prior: 50881555!
withCatalogue: aCatalogue 
	
	^self new initializeWithCatalogue: aCatalogue ! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 19:25:12'!
ERROR!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/28/2020 19:25:31'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/28/2020 19:25:31'!
initializeWithCatalogue: aCatalogue 
	self shouldBeImplemented.
	catalogue := aCatalogue.! !
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/28/2020 19:25:36' prior: 50881580!
initializeWithCatalogue: aCatalogue 
	
	catalogue := aCatalogue.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 19:25:37'!
ERROR!
!StoreInterface methodsFor: 'queries' stamp: 'LH 11/28/2020 19:25:48'!
numberOfActiveCarts
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'queries' stamp: 'LH 11/28/2020 19:25:57' prior: 50881594!
numberOfActiveCarts
	^0.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 19:25:59'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 19:25:59'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 19:34:12'!
test02ACartCanBeCreatedInAStore
	|cartID aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	cartID := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self deny: aShopInterface isEmpty.
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 19:34:38' prior: 50881609!
test02ACartCanBeCreatedInAStore
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self deny: aShopInterface isEmpty.
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 19:34:41'!
ERROR!
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 19:35:21'!
creatCartFor: aString password: aString2 
	self shouldBeImplemented.! !

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/28/2020 19:36:33'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 19:36:31' prior: 50881641!
creatCartFor: aUserID password: aPassword 
	
	cart := Cart acceptingItemsOf: catalogue.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 19:37:12'!
isEmpty
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 19:38:06' prior: 50881660!
isEmpty
	^false.! !
!StoreInterface methodsFor: 'queries' stamp: 'LH 11/28/2020 19:39:32' prior: 50881599!
numberOfActiveCarts
	cart ifNil: [^0].
	^1.! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 19:39:36'!
FAILURE!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 19:39:56'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 19:39:56'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 19:39:56'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 19:40:04' prior: 50881624!
test02ACartCanBeCreatedInAStore
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !

!methodRemoval: StoreInterface #isEmpty stamp: 'LH 11/28/2020 19:40:14'!
isEmpty
	^false.!

----SNAPSHOT----(28 November 2020 19:40:35) CuisUniversity-4384.image priorSource: 17593974!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 19:42:49'!
test03AStoreInterfaceCanCreateMultipleCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	aShopInterface creatCartFor: 'admin' password: 'password'.
	aShopInterface creatCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 19:42:51'!
FAILURE!
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/28/2020 19:43:27' prior: 50881586!
initializeWithCatalogue: aCatalogue 
	
	catalogue := aCatalogue.
	cart := OrderedCollection new.! !
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 19:43:46' prior: 50881654!
creatCartFor: aUserID password: aPassword 
	
	cart add: (Cart acceptingItemsOf: catalogue).! !
!StoreInterface methodsFor: 'queries' stamp: 'LH 11/28/2020 19:44:03' prior: 50881669!
numberOfActiveCarts
	
	^ cart size.! !

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 19:44:06'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 19:44:06'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 19:44:06'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 19:44:06'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 19:50:27' prior: 50881706!
test03AStoreInterfaceCanCreateMultipleCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	aShopInterface creatCartFor: 'admin' password: 'password'.
	aShopInterface creatCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 19:50:31'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 19:50:31'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 19:50:32'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 19:50:32'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 19:51:38'!
test04AStoreCanAddItemsToACart
	|aShopInterface objectFactory aCartId|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := ShopInterface withCatalogue: objectFactory defaultCatalog.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: objectFactory itemSellByTheStore.
	
	
	aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: 2.
	 
	self assert: 3 equals: ((aShopInterface listCart: aCartId) occurrencesOf: objectFactory itemSellByTheStore).
	
	self should: [aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: -1.]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: (aShopInterface listCart: aCartId) invalidQuantityErrorMessage.
				self assert: 3 equals: ((aShopInterface listCart: aCartId) occurrencesOf: objectFactory itemSellByTheStore)].
	! !

!testRun: #StoreInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 19:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 19:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 19:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 19:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 19:51:40'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 19:51:54' prior: 50881785!
test04AStoreCanAddItemsToACart
	|aShopInterface objectFactory aCartId|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: objectFactory itemSellByTheStore.
	
	
	aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: 2.
	 
	self assert: 3 equals: ((aShopInterface listCart: aCartId) occurrencesOf: objectFactory itemSellByTheStore).
	
	self should: [aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: -1.]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: (aShopInterface listCart: aCartId) invalidQuantityErrorMessage.
				self assert: 3 equals: ((aShopInterface listCart: aCartId) occurrencesOf: objectFactory itemSellByTheStore)].
	! !

!testRun: #StoreInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 19:51:55'!
ERROR!
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 19:52:05'!
addToCart: aStoreInterface theBook: aString inQuantity: aSmallInteger 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 19:53:13' prior: 50881877!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(cart at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 19:53:16'!
ERROR!
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 19:54:00' prior: 50881732!
creatCartFor: aUserID password: aPassword 
	
	cart add: (Cart acceptingItemsOf: catalogue).
	^ cart size.! !

!testRun: #StoreInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 19:54:02'!
ERROR!

!methodRemoval: StoreInterfaceTest #test04AStoreCanAddItemsToACart stamp: 'LH 11/28/2020 20:00:36'!
test04AStoreCanAddItemsToACart
	|aShopInterface objectFactory aCartId|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: objectFactory itemSellByTheStore.
	
	
	aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: 2.
	 
	self assert: 3 equals: ((aShopInterface listCart: aCartId) occurrencesOf: objectFactory itemSellByTheStore).
	
	self should: [aShopInterface addToCart: aCartId theBook: objectFactory itemSellByTheStore inQuantity: -1.]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: (aShopInterface listCart: aCartId) invalidQuantityErrorMessage.
				self assert: 3 equals: ((aShopInterface listCart: aCartId) occurrencesOf: objectFactory itemSellByTheStore)].
	!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 20:02:39'!
test04ANewCartInAStoreIsEmpty
	|aShopInterface objectFactory aCartId|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	self assert: (aShopInterface listCart: aCartId) isEmpty.! !

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 20:02:42'!
ERROR!
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 20:02:53'!
listCart: aSmallInteger 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 20:03:30' prior: 50881956!
listCart: aCartId 
	
	^ cart at: aCartId asInteger.! !
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 20:03:59' prior: 50881894!
creatCartFor: aUserID password: aPassword 
	
	cart add: (Cart acceptingItemsOf: catalogue).
	^ cart size asString.! !

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 20:04:01'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 20:04:01'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 20:04:01'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 20:04:01'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 20:04:01'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 20:10:04'!
test05AStoreCanAddItemsToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.! !

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:10:07'!
ERROR!
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 20:10:31' prior: 50881884!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(cart at: aCartId asInteger) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:10:32'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 20:10:33'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 20:10:33'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 20:10:33'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 20:10:33'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:10:33'!
PASSED!
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 20:13:32' prior: 50882012!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(cart at: aCartId asInteger) add: anISBN.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 20:13:33'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 20:13:33'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 20:13:33'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 20:13:33'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:13:33'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 20:14:12'!
test05AStoreCanAddItemsToOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.! !

!methodRemoval: StoreInterfaceTest #test05AStoreCanAddItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:14:12'!
test05AStoreCanAddItemsToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 20:14:19'!
test05AStoreCanAddItemsToItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.! !

!methodRemoval: StoreInterfaceTest #test05AStoreCanAddItemsToOfItsCarts stamp: 'LH 11/28/2020 20:14:19'!
test05AStoreCanAddItemsToOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 20:14:46'!
test05AStoreCanAddItemsToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.! !

!methodRemoval: StoreInterfaceTest #test05AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 20:14:47'!
test05AStoreCanAddItemsToItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 20:15:00'!
test05AStoreCanAddAnItemToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.! !

!methodRemoval: StoreInterfaceTest #test05AStoreCanAddItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:15:00'!
test05AStoreCanAddItemsToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 20:15:50'!
test06AStoreCanAddVariousItemsToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurencessOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 20:16:07' prior: 50882214!
test06AStoreCanAddVariousItemsToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface creatCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:16:09'!
FAILURE!
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 20:16:45' prior: 50882040!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(cart at: 1) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:16:46'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 20:16:46'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 20:16:46'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 20:16:46'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 20:16:46'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/28/2020 20:16:47'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:16:47'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 20:18:10'!
test07AStoreCanAddItemsToItsCarts
	|aShopInterface objectFactory aCartId2 aCartId1 anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId1 := aShopInterface creatCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface creatCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 theBook: anAvailableItem inQuantity: 2.
	aShopInterface addToCart: aCartId2 theBook: anAvailableItem inQuantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).! !

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 20:18:11'!
FAILURE!
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 20:18:46' prior: 50882258!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(cart at: aCartId asInteger) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 20:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 20:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 20:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 20:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 20:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/28/2020 20:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:18:48'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 20:18:48'!
PASSED!

!classRemoval: #ShopInterfaceTest stamp: 'LH 11/28/2020 20:19:16'!
TestCase subclass: #ShopInterfaceTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #ShopInterface stamp: 'LH 11/28/2020 20:19:19'!
Object subclass: #ShopInterface
	instanceVariableNames: 'userID password catalogue carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 20:19:23'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 20:19:23'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 20:19:23'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 20:19:23'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/28/2020 20:19:23'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 20:19:23'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 20:19:23'!
PASSED!

----SNAPSHOT----(28 November 2020 20:28:10) CuisUniversity-4384.image priorSource: 17601660!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 20:59:17'!
test08CanNotCheckOutWithInvalidCartId
	|aShopInterface objectFactory aCreditCard|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	aCreditCard := objectFactory notExpiredCreditCard.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 20:59:24'!
ERROR!
!StoreInterface class methodsFor: 'error descriptions' stamp: 'LH 11/28/2020 20:59:39'!
invalidCartId
	self shouldBeImplemented.! !
!StoreInterface class methodsFor: 'error descriptions' stamp: 'LH 11/28/2020 20:59:56' prior: 50882415!
invalidCartId
	^'The Cart ID is not valid'! !

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:00:11'!
FAILURE!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:00:50'!
FAILURE!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:02:00'!
FAILURE!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:02:00'!
FAILURE!
!StoreInterface methodsFor: 'check out' stamp: 'LH 11/28/2020 21:02:44'!
checkOut: aSmallInteger withCreditCard: aCreditCard 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'check out' stamp: 'LH 11/28/2020 21:03:17' prior: 50882438!
checkOut: aSmallInteger withCreditCard: aCreditCard 
	^ self error: StoreInterface invalidCartId.! !

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:03:18'!
ERROR!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:03:28'!
hasNoSales
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:03:36' prior: 50882454!
hasNoSales
	^true.! !

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:03:39'!
PASSED!
!StoreInterface methodsFor: 'cart operations' stamp: 'LH 11/28/2020 21:05:43'!
createCartFor: aUserID password: aPassword 
	
	cart add: (Cart acceptingItemsOf: catalogue).
	^ cart size asString.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:05:43' prior: 50882176!
test05AStoreCanAddAnItemToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:05:43' prior: 50881939!
test04ANewCartInAStoreIsEmpty
	|aShopInterface objectFactory aCartId|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: (aShopInterface listCart: aCartId) isEmpty.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:05:43' prior: 50882288!
test07AStoreCanAddItemsToItsCarts
	|aShopInterface objectFactory aCartId2 aCartId1 anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 theBook: anAvailableItem inQuantity: 2.
	aShopInterface addToCart: aCartId2 theBook: anAvailableItem inQuantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:05:43' prior: 50882234!
test06AStoreCanAddVariousItemsToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:05:43' prior: 50881756!
test03AStoreInterfaceCanCreateMultipleCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface createCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:05:43' prior: 50881687!
test02ACartCanBeCreatedInAStore
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !

!methodRemoval: StoreInterface #creatCartFor:password: stamp: 'LH 11/28/2020 21:05:43'!
creatCartFor: aUserID password: aPassword 
	
	cart add: (Cart acceptingItemsOf: catalogue).
	^ cart size asString.!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:06:03'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 21:06:03'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 21:06:03'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 21:06:03'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 21:06:03'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/28/2020 21:06:03'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 21:06:03'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 21:06:03'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:06:03'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:08:48'!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface objectFactory aCreditCard aSale aCartID|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog.
	aCreditCard := objectFactory notExpiredCreditCard.
	
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: objectFactory itemSellByTheStore inQuantity: 2.
	
	aSale := aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: aSale).! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:08:49'!
ERROR!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/28/2020 21:16:25'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue cart merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/28/2020 21:16:27'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue cart merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'checkout' stamp: 'LH 11/28/2020 21:16:23' prior: 50882444!
checkOut: aCartId withCreditCard: aCreditCard 
	|aCashier|
	cart isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	aCashier := Cashier initializeToCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor registeringOn: salesBook.
	
	^ aCashier checkOut.! !
!StoreInterface class methodsFor: 'instance creation' stamp: 'LH 11/28/2020 21:18:21'!
withCatalogue: aCatalogue withMerchantProccessor: aMerchantProcessor  
	
	^self new initializeWithCatalogue: aCatalogue ! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:18:22' prior: 50882621!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface objectFactory aCreditCard aSale aCartID|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: aMerchantProccessor.
	aCreditCard := objectFactory notExpiredCreditCard.
	
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: objectFactory itemSellByTheStore inQuantity: 2.
	
	aSale := aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: aSale).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:18:22' prior: 50881540!
test01ANewStoreHasNoActiveCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: aMerchantProccessor.
	
	self assert: 0 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:18:22' prior: 50882473!
test05AStoreCanAddAnItemToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: aMerchantProccessor.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:18:22' prior: 50882571!
test02ACartCanBeCreatedInAStore
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: aMerchantProccessor.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:18:22' prior: 50882393!
test08CanNotCheckOutWithInvalidCartId
	|aShopInterface objectFactory aCreditCard|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: aMerchantProccessor.
	aCreditCard := objectFactory notExpiredCreditCard.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:18:22' prior: 50882493!
test04ANewCartInAStoreIsEmpty
	|aShopInterface objectFactory aCartId|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: aMerchantProccessor.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: (aShopInterface listCart: aCartId) isEmpty.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:18:23' prior: 50882555!
test03AStoreInterfaceCanCreateMultipleCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: aMerchantProccessor.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface createCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:18:23' prior: 50882535!
test06AStoreCanAddVariousItemsToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: aMerchantProccessor.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:18:23' prior: 50882507!
test07AStoreCanAddItemsToItsCarts
	|aShopInterface objectFactory aCartId2 aCartId1 anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: aMerchantProccessor.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 theBook: anAvailableItem inQuantity: 2.
	aShopInterface addToCart: aCartId2 theBook: anAvailableItem inQuantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).! !

!methodRemoval: StoreInterface class #withCatalogue: stamp: 'LH 11/28/2020 21:18:23'!
withCatalogue: aCatalogue 
	
	^self new initializeWithCatalogue: aCatalogue !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:19:24' prior: 50882708!
test01ANewStoreHasNoActiveCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: self.
	
	self assert: 0 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:19:30' prior: 50882742!
test02ACartCanBeCreatedInAStore
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: self.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:19:39' prior: 50882794!
test03AStoreInterfaceCanCreateMultipleCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: self.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface createCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:19:43' prior: 50882778!
test04ANewCartInAStoreIsEmpty
	|aShopInterface objectFactory aCartId|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: self.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: (aShopInterface listCart: aCartId) isEmpty.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:19:46' prior: 50882721!
test05AStoreCanAddAnItemToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:19:50' prior: 50882811!
test06AStoreCanAddVariousItemsToOneOfItsCarts
	|aShopInterface objectFactory aCartId anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:19:53' prior: 50882833!
test07AStoreCanAddItemsToItsCarts
	|aShopInterface objectFactory aCartId2 aCartId1 anAvailableItem|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := objectFactory itemSellByTheStore.
	
	aCartId1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 theBook: anAvailableItem inQuantity: 2.
	aShopInterface addToCart: aCartId2 theBook: anAvailableItem inQuantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:19:56' prior: 50882757!
test08CanNotCheckOutWithInvalidCartId
	|aShopInterface objectFactory aCreditCard|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := objectFactory notExpiredCreditCard.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:19:59' prior: 50882684!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface objectFactory aCreditCard aSale aCartID|
	
	objectFactory := StoreTestObjectsFactory new.
	aShopInterface := StoreInterface withCatalogue: objectFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := objectFactory notExpiredCreditCard.
	
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: objectFactory itemSellByTheStore inQuantity: 2.
	
	aSale := aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: aSale).! !
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/28/2020 21:21:15'!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor  
	
	catalogue := aCatalogue.
	cart := OrderedCollection new.! !
!StoreInterface class methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:21:15' prior: 50882676!
withCatalogue: aCatalogue withMerchantProccessor: aMerchantProcessor  
	
	^self new initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor ! !

!methodRemoval: StoreInterface #initializeWithCatalogue: stamp: 'LH 11/28/2020 21:21:15'!
initializeWithCatalogue: aCatalogue 
	
	catalogue := aCatalogue.
	cart := OrderedCollection new.!
!StoreInterface class methodsFor: 'instance creation' stamp: 'LH 11/28/2020 21:21:24' prior: 50883045!
withCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor  
	
	^self new initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor ! !
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/28/2020 21:22:06' prior: 50883037!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor  
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.
	
	salesBook := OrderedCollection new.
	cart := OrderedCollection new.! !

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/28/2020 21:22:10'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:22:10' prior: 50882466!
createCartFor: aUserID password: aPassword 
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^ carts size asString.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:22:10' prior: 50882319!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(carts at: aCartId asInteger) add: aQuantity of: anISBN.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:22:10' prior: 50883069!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor  
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.
	
	salesBook := OrderedCollection new.
	carts := OrderedCollection new.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:22:10' prior: 50881961!
listCart: aCartId 
	
	^ carts at: aCartId asInteger.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:22:10' prior: 50882663!
checkOut: aCartId withCreditCard: aCreditCard 
	|aCashier|
	carts isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	aCashier := Cashier initializeToCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor registeringOn: salesBook.
	
	^ aCashier checkOut.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:22:10' prior: 50881738!
numberOfActiveCarts
	
	^ carts size.! !

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'LH 11/28/2020 21:24:14'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'LH 11/28/2020 21:24:16'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'set up' stamp: 'LH 11/28/2020 21:24:11' overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ]! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:24:53' prior: 50882867!
test01ANewStoreHasNoActiveCarts
	|aShopInterface |
	
	self setUp.
	
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	
	self assert: 0 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:25:08' prior: 50882879!
test02ACartCanBeCreatedInAStore
	|aShopInterface |
	
	self setUp.
	
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:25:20' prior: 50882893!
test03AStoreInterfaceCanCreateMultipleCarts
	|aShopInterface objectFactory|
	
	objectFactory := StoreTestObjectsFactory new.
	
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface createCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:25:31' prior: 50883183!
test03AStoreInterfaceCanCreateMultipleCarts
	|aShopInterface |
	
	self setUp.
	
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface createCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:25:42' prior: 50882910!
test04ANewCartInAStoreIsEmpty
	|aShopInterface aCartId|
	
	self setUp.
	
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: (aShopInterface listCart: aCartId) isEmpty.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:26:01' prior: 50882925!
test05AStoreCanAddAnItemToOneOfItsCarts
	|aShopInterface aCartId anAvailableItem|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: anAvailableItem.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:26:21' prior: 50882945!
test06AStoreCanAddVariousItemsToOneOfItsCarts
	|aShopInterface aCartId anAvailableItem|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:26:39' prior: 50882966!
test07AStoreCanAddItemsToItsCarts
	|aShopInterface aCartId2 aCartId1 anAvailableItem|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	
	aCartId1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 theBook: anAvailableItem inQuantity: 2.
	aShopInterface addToCart: aCartId2 theBook: anAvailableItem inQuantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:26:56' prior: 50882994!
test08CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:27:18' prior: 50883014!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aSale aCartID|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	aSale := aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: aSale).! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:27:22'!
ERROR!
!StoreInterface methodsFor: 'checkout' stamp: 'LH 11/28/2020 21:28:04' prior: 50883118!
checkOut: aCartId withCreditCard: aCreditCard 
	|aCashier|
	carts isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	aCashier := Cashier toCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor registeringOn: salesBook.
	
	^ aCashier checkOut.! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:28:08'!
ERROR!
!StoreInterface methodsFor: 'checkout' stamp: 'LH 11/28/2020 21:31:25' prior: 50883339!
checkOut: aCartId withCreditCard: aCreditCard 
	|aCashier|
	carts isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	aCashier := Cashier toCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook.
	
	^ aCashier checkOut.! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:31:26'!
ERROR!
!StoreInterfaceTest methodsFor: 'debit' stamp: 'LH 11/28/2020 21:31:44'!
debit: aSmallInteger from: aCreditCard 
	self shouldBeImplemented.! !
!StoreInterfaceTest methodsFor: 'debit' stamp: 'LH 11/28/2020 21:32:52' prior: 50883371!
debit: anAmmount from: aCreditCard 
	^debitBehavior value: anAmmount value: aCreditCard.! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:32:54'!
FAILURE!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/28/2020 21:33:17' prior: 50882459!
hasNoSales
	^salesBook isEmpty.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 21:33:35'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 21:33:35'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 21:33:35'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 21:33:36'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/28/2020 21:33:36'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 21:33:36'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 21:33:36'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:33:36'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:33:36'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:33:36'!
ERROR!
!StoreInterface methodsFor: 'queries' stamp: 'LH 11/28/2020 21:33:46'!
hasMadeTheSale: aSmallInteger 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'queries' stamp: 'LH 11/28/2020 21:34:11' prior: 50883424!
hasMadeTheSale: aSale 
	^salesBook includes: aSale.! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:34:25'!
FAILURE!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:36:03' prior: 50883313!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aSaleTotalDebited aCartID|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	aSaleTotalDebited := aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: aSaleTotalDebited)).! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:36:04'!
FAILURE!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:36:09'!
FAILURE!

self createSale!

aSaleTotalDebited!

aSaleTotalDebited!

Sale of: aSaleTotalDebited!

salesBook!

salesBook includes: aSale!

self indexOf: anObject!

anElement!

(self at: i)!

anElement!

(self at: i) = anElement!
!Sale methodsFor: 'queries' stamp: 'LH 11/28/2020 21:42:43' overrides: 16881029!
= aSale

	^ total = aSale total.! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:42:50'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:42:53'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 21:42:53'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 21:42:53'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 21:42:53'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 21:42:53'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/28/2020 21:42:53'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 21:42:53'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 21:42:53'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:42:53'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:42:53'!
PASSED!
!StoreInterface methodsFor: 'checkout' stamp: 'LH 11/28/2020 21:44:36' prior: 50883355!
checkOut: aCartId withCreditCard: aCreditCard 
	|aCashier|
	carts isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	aCashier := Cashier toCheckout: (self listCart: 1) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook.
	
	^ aCashier checkOut.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 21:44:39'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 21:44:39'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 21:44:39'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 21:44:39'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/28/2020 21:44:39'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 21:44:39'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 21:44:39'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:44:39'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:44:39'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:47:24'!
test10ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aSaleTotalDebited aCartID1 aCartID2|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aSaleTotalDebited := aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: aSaleTotalDebited)).
	
	aSaleTotalDebited := aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: aSaleTotalDebited)).! !

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/28/2020 21:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 21:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 21:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 21:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 21:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/28/2020 21:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 21:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 21:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/28/2020 21:47:25'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:48:28' prior: 50883559!
test10ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).
	
	aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/28/2020 21:48:30'!
FAILURE!
!StoreInterface methodsFor: 'checkout' stamp: 'LH 11/28/2020 21:49:13' prior: 50883516!
checkOut: aCartId withCreditCard: aCreditCard 
	|aCashier|
	carts isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	aCashier := Cashier toCheckout: (self listCart: aCartId asInteger) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook.
	
	^ aCashier checkOut.! !

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/28/2020 21:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 21:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 21:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 21:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 21:49:16'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/28/2020 21:49:16'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 21:49:16'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 21:49:16'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:49:16'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:49:16'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/28/2020 21:49:16'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/28/2020 21:49:34' prior: 50883437!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:49:35'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/28/2020 21:49:35'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/28/2020 21:49:35'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/28/2020 21:49:36'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/28/2020 21:49:36'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/28/2020 21:49:36'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'LH 11/28/2020 21:49:36'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'LH 11/28/2020 21:49:36'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'LH 11/28/2020 21:49:36'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/28/2020 21:49:36'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/28/2020 21:49:36'!
PASSED!

----SNAPSHOT----(28 November 2020 21:49:49) CuisUniversity-4384.image priorSource: 17623663!

----QUIT----(28 November 2020 21:51:08) CuisUniversity-4384.image priorSource: 17668149!

----STARTUP---- (29 November 2020 15:38:31) as /Users/ilanolkies/uba/ingsoft1/macos64/CuisUniversity-4384.image!


----End fileIn of /Users/ilanolkies/uba/ingsoft1/ingeSoft-2020-2c/20-TusLibros-3/TusLibros-3.st----!
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/29/2020 16:08:21' prior: 50868530!
checkOut: aCartId withCreditCard: aCreditCard 
	|aCashier|
	carts isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	^Cashier toCheckout: (self listCart: aCartId asInteger) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook checkOut.
	
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:08:24'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:08:24'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:08:24'!
ERROR!
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/29/2020 16:08:28' prior: 50868631!
checkOut: aCartId withCreditCard: aCreditCard 
	|aCashier|
	carts isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	aCashier := Cashier toCheckout: (self listCart: aCartId asInteger) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook checkOut.
	
	^ aCashier checkOut.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:08:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:08:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:08:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:08:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:08:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:08:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:08:30'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:08:30'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:08:30'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:08:35'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:08:35'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:08:35'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:09:01'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:09:01'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:09:01'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:10:45'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:10:45'!
ERROR!
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/29/2020 16:11:13' prior: 50868723!
checkOut: aCartId withCreditCard: aCreditCard 
	|aCashier|
	carts isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	aCashier := Cashier toCheckout: (self listCart: aCartId asInteger) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook.
	
	^ aCashier checkOut.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:11:15'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:11:50'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:12:05'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:12:05'!
PASSED!
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/29/2020 16:14:52' prior: 50868519!
createCartFor: aUserID password: aPassword 
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^ carts size.! !
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/29/2020 16:15:00' prior: 50868512!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/29/2020 16:15:06' prior: 50868526!
listCart: aCartId 
	
	^ carts at: aCartId.! !
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/29/2020 16:15:37' prior: 50868982!
checkOut: aCartId withCreditCard: aCreditCard 
	|aCashier|
	carts isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	aCashier := Cashier toCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook.
	
	^ aCashier checkOut.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:15:45'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:15:45'!
PASSED!
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/29/2020 16:16:58' prior: 50869241!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(carts at: aCartId) add: aQuantity of: 'validBook'.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:17:00'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:18:21'!
test06AStoreCanAddMoreThanOneOfAnItemToItsCarts
	|aShopInterface aCartId anAvailableItem|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !

!methodRemoval: StoreInterfaceTest #test06AStoreCanAddVariousItemsToOneOfItsCarts stamp: 'IO 11/29/2020 16:18:21'!
test06AStoreCanAddVariousItemsToOneOfItsCarts
	|aShopInterface aCartId anAvailableItem|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:18:28'!
test08AStoreCanAddItemsToItsCarts
	|aShopInterface aCartId2 aCartId1 anAvailableItem|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	
	aCartId1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 theBook: anAvailableItem inQuantity: 2.
	aShopInterface addToCart: aCartId2 theBook: anAvailableItem inQuantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).! !

!methodRemoval: StoreInterfaceTest #test07AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:18:28'!
test07AStoreCanAddItemsToItsCarts
	|aShopInterface aCartId2 aCartId1 anAvailableItem|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	
	aCartId1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 theBook: anAvailableItem inQuantity: 2.
	aShopInterface addToCart: aCartId2 theBook: anAvailableItem inQuantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:18:34'!
test09CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !

!methodRemoval: StoreInterfaceTest #test08CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:18:34'!
test08CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:18:43'!
test10ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!methodRemoval: StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:18:43'!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:18:51'!
test11ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).
	
	aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !

!methodRemoval: StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:18:51'!
test10ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).
	
	aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).!
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'IO 11/29/2020 16:20:15'!
anotherItemSellByTheStore
	
	^ 'validBook2'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'IO 11/29/2020 16:21:18'!
anotherItemSellByTheStorePrice
	
	^ 20! !
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'IO 11/29/2020 16:21:52' prior: 50868598!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		at: self anotherItemSellByTheStore put: self anotherItemSellByTheStorePrice;
		yourself ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:21:53'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:21:53'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:22:17'!
test07AStoreCanAddDifferentItemsToItsCarts
	|aShopInterface aCartId anAvailableItem|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:22:49' prior: 50869775!
test07AStoreCanAddDifferentItemsToItsCarts
	|aShopInterface aCartId anAvailableItem|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem :=
	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory itemSellByTheStore) inQuantity: 2.

	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:22:52' prior: 50869795!
test07AStoreCanAddDifferentItemsToItsCarts
	|aShopInterface aCartId anAvailableItem|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.

	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory itemSellByTheStore) inQuantity: 2.

	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:22:54'!
FAILURE!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:22:58'!
FAILURE!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:23:04' prior: 50869814!
test07AStoreCanAddDifferentItemsToItsCarts
	|aShopInterface aCartId |
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.

	
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory itemSellByTheStore) inQuantity: 2.

	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:23:06'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:23:06'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:23:21' prior: 50869840!
test07AStoreCanAddDifferentItemsToItsCarts
	|aShopInterface aCartId |
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.

	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory itemSellByTheStore) inQuantity: 2.
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory anotherItemSellByTheStore ) inQuantity: 3.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: testObjectsFactory itemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:23:50' prior: 50869900!
test07AStoreCanAddDifferentItemsToItsCarts
	|aShopInterface aCartId listedCart |
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.

	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory itemSellByTheStore) inQuantity: 2.
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory anotherItemSellByTheStore ) inQuantity: 3.
	
	listedCart := (aShopInterface listCart: aCartId).
	self assert: 2 equals: (listedCart occurrencesOf: testObjectsFactory itemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:24:04' prior: 50869922!
test07AStoreCanAddDifferentItemsToItsCarts
	|aShopInterface aCartId listedCart |
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.

	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory itemSellByTheStore) inQuantity: 2.
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory anotherItemSellByTheStore ) inQuantity: 3.
	
	listedCart := (aShopInterface listCart: aCartId).
	self assert: 2 equals: (listedCart occurrencesOf: testObjectsFactory itemSellByTheStore).
	self assert: 3 equals: (listedCart occurrencesOf: testObjectsFactory anotherItemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:24:05'!
FAILURE!
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/29/2020 16:24:24' prior: 50869346!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(carts at: aCartId) add: aQuantity of: aQuantity.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:24:25'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:24:25'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:24:25'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:24:25'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:24:25'!
ERROR!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:24:25'!
ERROR!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:24:25'!
ERROR!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:24:25'!
ERROR!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:24:25'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:24:25'!
ERROR!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:24:25'!
ERROR!
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/29/2020 16:24:34' prior: 50869975!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:24:35'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:24:35'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:25:30' prior: 50868087!
test05AStoreCanAddAnItemToOneOfItsCarts
	|aShopInterface aCartId |
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory itemSellByTheStore) inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: (testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:25:34'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:25:34'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:25:41' prior: 50868047!
test02ACartCanBeCreatedInAStore
	|aShopInterface |
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:25:42'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:25:42'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:25:47' prior: 50868059!
test03AStoreInterfaceCanCreateMultipleCarts
	|aShopInterface |
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface createCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:25:48'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:25:48'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:25:55' prior: 50870169!
test02ACartCanBeCreatedInAStore
	|aShopInterface |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:25:59' prior: 50870223!
test03AStoreInterfaceCanCreateMultipleCarts
	|aShopInterface |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	
	aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface createCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:26:04' prior: 50870110!
test05AStoreCanAddAnItemToOneOfItsCarts
	|aShopInterface aCartId |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory itemSellByTheStore) inQuantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: (testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:26:05'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:26:05'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:26:12' prior: 50869432!
test06AStoreCanAddMoreThanOneOfAnItemToItsCarts
	|aShopInterface aCartId anAvailableItem|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId theBook: anAvailableItem inQuantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:26:13'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:26:13'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:26:24' prior: 50869945!
test07AStoreCanAddDifferentItemsToItsCarts
	|aShopInterface aCartId listedCart |
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.

	aShopInterface addToCart: aCartId theBook: (testObjectsFactory itemSellByTheStore) inQuantity: 2.
	aShopInterface addToCart: aCartId theBook: (testObjectsFactory anotherItemSellByTheStore ) inQuantity: 3.
	
	listedCart := (aShopInterface listCart: aCartId).
	self assert: 2 equals: (listedCart occurrencesOf: testObjectsFactory itemSellByTheStore).
	self assert: 3 equals: (listedCart occurrencesOf: testObjectsFactory anotherItemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:26:26'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:26:26'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:26:38' prior: 50869471!
test08AStoreCanAddItemsToItsCarts
	|aShopInterface aCartId2 aCartId1 anAvailableItem|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	aCartId1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 theBook: anAvailableItem inQuantity: 2.
	aShopInterface addToCart: aCartId2 theBook: anAvailableItem inQuantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).! !

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:26:39'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:26:39'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:26:49'!
test08AStoreCanAddItemsToMultipleCarts
	|aShopInterface aCartId2 aCartId1 anAvailableItem|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	aCartId1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 theBook: anAvailableItem inQuantity: 2.
	aShopInterface addToCart: aCartId2 theBook: anAvailableItem inQuantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).! !

!methodRemoval: StoreInterfaceTest #test08AStoreCanAddItemsToItsCarts stamp: 'IO 11/29/2020 16:26:49'!
test08AStoreCanAddItemsToItsCarts
	|aShopInterface aCartId2 aCartId1 anAvailableItem|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	aCartId1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 theBook: anAvailableItem inQuantity: 2.
	aShopInterface addToCart: aCartId2 theBook: anAvailableItem inQuantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:26:55' prior: 50869525!
test09CanNotCheckOutWithInvalidCartId

	|aShopInterface aCreditCard|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:26:56' prior: 50870619!
test09CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:26:58' prior: 50870638!
test09CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:27:00'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:27:00'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:27:29' prior: 50869562!
test10ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.

	aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:27:30'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:27:30'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:28:31' prior: 50869608!
test11ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.

	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).
	
	aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:28:32'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:28:32'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:28:53' prior: 50870782!
test11ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.

	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:28:54'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:28:54'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:29:04' prior: 50870858!
test11ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.

	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:29:05'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:29:05'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:29:14' prior: 50870929!
test11ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.

	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:30:45' prior: 50870657!
test09CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:30:46'!
FAILURE!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:30:57' prior: 50871032!
test09CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:30:59' prior: 50871056!
test09CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self should: [aShopInterface checkOut: 1 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:31:06' prior: 50871075!
test09CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self should: [aShopInterface checkOut: -4 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:31:07'!
FAILURE!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:32:28'!
FAILURE!
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/29/2020 16:32:44' prior: 50869253!
checkOut: aCartId withCreditCard: aCreditCard
 
	|aCashier|

	carts isEmpty ifTrue:[^self error: StoreInterface invalidCartId].
	
	aCashier := Cashier toCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook.
	
	^ aCashier checkOut.! !
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/29/2020 16:33:19' prior: 50871124!
checkOut: aCartId withCreditCard: aCreditCard
 
	|aCashier|
	
	aCashier := Cashier toCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook.
	
	^ aCashier checkOut.! !
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/29/2020 16:33:46' prior: 50869248!
listCart: aCartId 
	
	^ carts at: aCartId.! !

!testRun: #IntervalTest #testAt stamp: 'IO 11/29/2020 16:36:19'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludeNumbersOutsideTheInInterval stamp: 'IO 11/29/2020 16:36:19'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludeObjectsThatAreNotNumbers stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludedNumbersThatAreInRangeButNotReachedByTheStep stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludedNumbersThatAreInRangeButNotReachedByTheStepWithReversedIntervals stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testFloatInterval stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testFloatToByDo stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testIncludedNumbersRespectAStepDifferentToOne stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testIncludedNumbersRespectNegativeSteps stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testIncludesNumbersInsideTheInterval stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testIncludesNumbersInsideTheIntervalEvenForReversedIntervals stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testIntegerInterval stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testIntegerToByDo stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberAndNegativeStepBiggerThanOneIncludeOnlyThatNumber stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberAndNegativeStepIncludeOnlyThatNumber stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberAndStepBiggerThanOneIncludesOnlyTheNumber stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberIncludesOnlyTheNumber stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #OrderedCollectionTest #testIsCollection stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #OrderedCollectionTest #testStreamContentsWorksAsExpected stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #OrderedCollectionTest #testWriteStreamOnOrderedCollectionGrowsAsExpected stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #OrderedDictionaryTest #testOrder stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #OrderedDictionaryTest #testRemove stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #BinarySearchTest #testquickFindFirst stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #BinarySearchTest #testquickFindLast stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #BinarySearchTest #testquickIndexOf stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #BinarySearchTest #testquickIndexOfWithSemistableOrder stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #ReferenceStreamTest #testDiskProxy stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #ReferenceStreamTest #testSortedCollection stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #ReferenceStreamTest #testWeakDumps stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #SmartRefStreamTest #testDiskProxy stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #SmartRefStreamTest #testSortedCollection stamp: 'IO 11/29/2020 16:36:20'!
PASSED!

!testRun: #SmartRefStreamTest #testWeakDumps stamp: 'IO 11/29/2020 16:36:20'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:37:25' prior: 50871096!
test09CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self should: [aShopInterface checkOut: 0 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.].
			
	
	self should: [aShopInterface checkOut: 2 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:37:27'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 16:37:28'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:37:28'!
FAILURE!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:37:28'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:37:28'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:37:28'!
FAILURE!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:39:15'!
FAILURE!
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/29/2020 16:40:46' prior: 50871137!
checkOut: aCartId withCreditCard: aCreditCard
 
	|aCashier|
	
	(aCartId >= 1 and: aCartId <= carts size) ifFalse: [self error: StoreInterface invalidCartId ].
	
	aCashier := Cashier toCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook.
	
	^ aCashier checkOut.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:40:48'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:40:48'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:40:48'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:40:48'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:40:48'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:40:48'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:40:48'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 16:40:48'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:40:48'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:40:48'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:40:48'!
PASSED!
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/29/2020 16:43:01' prior: 50871375!
checkOut: aCartId withCreditCard: aCreditCard
 
	
	
	^(Cashier toCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook) checkOut.
	
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:43:05'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:43:05'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:43:05'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:43:05'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:43:05'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:43:05'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:43:05'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 16:43:05'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:43:05'!
FAILURE!

!testRun: #StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:43:05'!
PASSED!

!testRun: #StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:43:05'!
PASSED!

!testRun: #StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:43:05'!
FAILURE!

!methodRemoval: StoreInterfaceTest #test09CanNotCheckOutWithInvalidCartId stamp: 'IO 11/29/2020 16:43:12'!
test09CanNotCheckOutWithInvalidCartId
	|aShopInterface aCreditCard|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aShopInterface createCartFor: 'admin' password: 'password'.
	
	self should: [aShopInterface checkOut: 0 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.].
			
	
	self should: [aShopInterface checkOut: 2 withCreditCard: aCreditCard]
		raise: Error
		withExceptionDo:[:anError | 
				self assert: anError messageText equals: StoreInterface invalidCartId.
				self assert: aShopInterface hasNoSales.]!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:43:18'!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.

	aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!methodRemoval: StoreInterfaceTest #test10ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:43:18'!
test10ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.

	aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:43:22'!
test10ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.

	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !

!methodRemoval: StoreInterfaceTest #test11ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:43:22'!
test11ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.

	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self deny: aShopInterface hasNoSales.
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 16:43:23'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 16:43:23'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 16:43:23'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 16:43:23'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 16:43:23'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 16:43:23'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 16:43:23'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 16:43:23'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 16:43:23'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 16:43:23'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:48:28' prior: 50871506!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.

	aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 16:48:33' prior: 50871552!
test10ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.

	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOut: aCartID1 withCreditCard: aCreditCard.
	aShopInterface checkOut: aCartID2 withCreditCard: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !

!methodRemoval: StoreInterface #hasNoSales stamp: 'IO 11/29/2020 16:48:41'!
hasNoSales
	^salesBook isEmpty.!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 21:26:13'!
test11CannotModiffyACart
	|aShopInterface aCreditCard aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.

	aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 21:26:58' prior: 50871704!
test11CannotModiffyACart
	|aShopInterface aCreditCard aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.

	aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 21:27:19' prior: 50871728!
test11CannotModiffyACart
	|aShopInterface aCreditCard aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.

	aShopInterface checkOut: aCartID withCreditCard: aCreditCard.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: (aShopInterface listCart: aCartID) equals: listedCart.! !

!testRun: #StoreInterfaceTest #test11CannotModiffyACart stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 21:27:20'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModiffyACart stamp: 'IO 11/29/2020 21:27:20'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 21:27:46' prior: 50871754!
test11CannotModiffyACart
	|aShopInterface aCreditCard aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: (aShopInterface listCart: aCartID) equals: listedCart.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 21:28:27' prior: 50871819!
test11CannotModiffyACart
	|aShopInterface aCreditCard aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: (aShopInterface).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 21:29:17' prior: 50871842!
test11CannotModiffyACart
	|aShopInterface aCreditCard aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aShopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemNotSellByTheStore).! !

!testRun: #StoreInterfaceTest #test11CannotModiffyACart stamp: 'IO 11/29/2020 21:29:21'!
FAILURE!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 21:29:36' prior: 50871864!
test11CannotModiffyACart
	|aShopInterface aCreditCard aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aShopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test11CannotModiffyACart stamp: 'IO 11/29/2020 21:29:39'!
FAILURE!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/29/2020 21:30:36'!
test11CannotModiffyACartFromOutsideStore
	|aShopInterface aCreditCard aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aShopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!methodRemoval: StoreInterfaceTest #test11CannotModiffyACart stamp: 'IO 11/29/2020 21:30:41'!
test11CannotModiffyACart
	|aShopInterface aCreditCard aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aShopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:34:25'!
FAILURE!
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/29/2020 23:34:33' prior: 50871148!
listCart: aCartId 
	
	^ carts at: aCartId copy.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 23:34:34'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 23:34:34'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 23:34:34'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 23:34:34'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 23:34:34'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 23:34:34'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 23:34:34'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 23:34:34'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 23:34:34'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 23:34:34'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:34:34'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:34:34'!
FAILURE!
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/29/2020 23:34:43' prior: 50871970!
listCart: aCartId 
	
	^ carts at: aCartId copy.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 23:34:44'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:34:44'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:34:44'!
FAILURE!
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/29/2020 23:35:39' prior: 50872017!
listCart: aCartId 
	
	^(carts at: aCartId) copy.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 23:35:40'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 23:35:40'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 23:35:40'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 23:35:40'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 23:35:40'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 23:35:40'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 23:35:40'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 23:35:40'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 23:35:40'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 23:35:40'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:35:40'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:35:40'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:36:06'!
FAILURE!
!Cart methodsFor: 'initialization' stamp: 'IO 11/29/2020 23:38:38' overrides: 16881170!
copy
"
	| cart |
	cart := Cart acceptingItemsOf: catalog.
	items do: [ :item | cart add ]
	items"! !
!Cart methodsFor: 'initialization' stamp: 'IO 11/29/2020 23:39:56' prior: 50872159 overrides: 16881170!
copy

	| cart |
	cart := Cart acceptingItemsOf: catalog.
	items do: [ :item | cart add: (self occurrencesOf: item) of: item ].
	^cart.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 23:39:59'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 23:39:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 23:39:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 23:39:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 23:39:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 23:39:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:39:59'!
FAILURE!

!methodRemoval: Cart #copy stamp: 'IO 11/29/2020 23:40:21'!
copy

	| cart |
	cart := Cart acceptingItemsOf: catalog.
	items do: [ :item | cart add: (self occurrencesOf: item) of: item ].
	^cart.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 23:40:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 23:40:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 23:40:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 23:40:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 23:40:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 23:40:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 23:40:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 23:40:23'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/29/2020 23:40:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/29/2020 23:40:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/29/2020 23:40:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/29/2020 23:40:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/29/2020 23:40:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/29/2020 23:40:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/29/2020 23:40:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/29/2020 23:40:26'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/29/2020 23:40:28'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/29/2020 23:40:28'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/29/2020 23:40:28'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/29/2020 23:40:28'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/29/2020 23:40:28'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/29/2020 23:40:28'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/29/2020 23:40:28'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/29/2020 23:40:28'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/29/2020 23:40:28'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/29/2020 23:40:28'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:40:28'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/29/2020 23:40:28'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 01:58:16'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 01:58:16'!
FAILURE!

listedCart!

listedCart!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 01:59:39'!
FAILURE!

listedCart!

listedCart!

aShopInterface!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:02:50' prior: 50871918!
test11CannotModiffyACartFromOutsideStore
	|aShopInterface aCreditCard aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aShopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:03:08' prior: 50872369!
test11CannotModiffyACartFromOutsideStore
	|aShopInterface aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.

	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aShopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:03:13' prior: 50872394!
test11CannotModiffyACartFromOutsideStore
	|aShopInterface aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aShopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 02:03:17'!
FAILURE!
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/30/2020 02:03:42' prior: 50872109!
listCart: aCartId 
	
	^(carts copy at: aCartId).! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:03:43'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:03:43'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:03:43'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:03:43'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:03:43'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:03:43'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:03:43'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:03:43'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:03:43'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:03:43'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 02:03:43'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 02:03:43'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 02:03:48'!
FAILURE!
!StoreInterface methodsFor: 'cart operations' stamp: 'IO 11/30/2020 02:04:01' prior: 50872442!
listCart: aCartId 
	
	^(carts at: aCartId) copy.! !
!Cart methodsFor: 'nil' stamp: 'IO 11/30/2020 02:06:00' overrides: 16881170!
copy
	| cartCopy |
	
	cartCopy := Cart acceptingItemsOf: catalog.
	
	^cartCopy.
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:06:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:06:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:06:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:06:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:06:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:06:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:06:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:06:00'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:06:02'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:06:02'!
FAILURE!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:06:02'!
FAILURE!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:06:02'!
FAILURE!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:06:02'!
FAILURE!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:06:02'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:06:02'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 02:06:02'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:06:50' prior: 50872497 overrides: 16881170!
copy
	| cartCopy |
	
	cartCopy := Cart acceptingItemsOf: catalog.
	items do: [ :item | cartCopy add: (self occurrencesOf: item) of: item].
	
	^cartCopy.
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:06:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:06:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:06:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:06:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:06:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:06:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:06:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:06:55'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:06:57'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:06:57'!
FAILURE!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:06:57'!
FAILURE!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:06:57'!
FAILURE!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:06:57'!
FAILURE!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:06:57'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 02:06:57'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:07:17' prior: 50872613 overrides: 16881170!
copy
	| cartCopy |
	
	cartCopy := Cart acceptingItemsOf: catalog.
	items do: [ :item | cartCopy add: 1 of: item].
	
	^cartCopy.
	
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 02:07:19'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:07:29'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 02:07:29'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:07:33' prior: 50872731 overrides: 16881170!
copy
	| cartCopy |
	
	cartCopy := Cart acceptingItemsOf: catalog.
	items do: [ :item | cartCopy add: 1 of: item].
	
	^cartCopy.
! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:07:52'!
test11CannotModifyACartFromOutsideStore
	|aShopInterface aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aShopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!methodRemoval: StoreInterfaceTest #test11CannotModiffyACartFromOutsideStore stamp: 'IO 11/30/2020 02:07:52'!
test11CannotModiffyACartFromOutsideStore
	|aShopInterface aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aShopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).!
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/30/2020 02:12:41'!
checkOutCart: aCartId with: aCreditCard
 
	
	
	^(Cashier toCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook) checkOut.
	
! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:12:41' prior: 50871671!
test10ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.

	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID1 theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID2 theBook: testObjectsFactory itemSellByTheStore inQuantity: 10.
	
	aShopInterface checkOutCart: aCartID1 with: aCreditCard.
	aShopInterface checkOutCart: aCartID2 with: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:12:41' prior: 50871649!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID theBook: testObjectsFactory itemSellByTheStore inQuantity: 2.

	aShopInterface checkOutCart: aCartID with: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!methodRemoval: StoreInterface #checkOut:withCreditCard: stamp: 'IO 11/30/2020 02:12:41'!
checkOut: aCartId withCreditCard: aCreditCard
 
	
	
	^(Cashier toCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook) checkOut.
	
!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:12:45'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:12:45'!
PASSED!
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/30/2020 02:12:50' prior: 50872957!
checkOutCart: aCartId with: aCreditCard
	
	^(Cashier toCheckout: (self listCart: aCartId) charging: aCreditCard throught: merchantProcessor on: DateAndTime now registeringOn: salesBook) checkOut.
	
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:12:51'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:12:51'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:12:51'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:12:51'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:12:51'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:12:51'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:12:51'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:12:51'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:12:51'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:12:51'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:12:51'!
PASSED!
!StoreInterface methodsFor: 'checkout' stamp: 'IO 11/30/2020 02:13:29' prior: 50873112!
checkOutCart: aCartId with: aCreditCard
	
	^(Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProcessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
	
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 02:14:30' prior: 50869234!
createCartFor: aUserID password: aPassword 
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 02:14:33' prior: 50873170!
createCartFor: aUserID password: aPassword 
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 02:15:20'!
addToCart: aCartId book: anISBN quantity: aQuantity 
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:15:20' prior: 50872997!
test09ACartWithItemsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aShopInterface checkOutCart: aCartID with: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:15:20' prior: 50872913!
test11CannotModifyACartFromOutsideStore
	|aShopInterface aCartID listedCart |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartID := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := aShopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aShopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:15:20' prior: 50870367!
test06AStoreCanAddMoreThanOneOfAnItemToItsCarts
	|aShopInterface aCartId anAvailableItem|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId book: anAvailableItem quantity: 2.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:15:20' prior: 50870564!
test08AStoreCanAddItemsToMultipleCarts
	|aShopInterface aCartId2 aCartId1 anAvailableItem|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	anAvailableItem := testObjectsFactory itemSellByTheStore.
	aCartId1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	
	aShopInterface addToCart: aCartId1 book: anAvailableItem quantity: 2.
	aShopInterface addToCart: aCartId2 book: anAvailableItem quantity: 1.
	
	self assert: 2 equals: ((aShopInterface listCart: aCartId1) occurrencesOf: anAvailableItem).
	self assert: 1 equals: ((aShopInterface listCart: aCartId2) occurrencesOf: anAvailableItem).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:15:20' prior: 50870428!
test07AStoreCanAddDifferentItemsToItsCarts
	|aShopInterface aCartId listedCart |
	
	self setUp.
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.

	aShopInterface addToCart: aCartId book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aShopInterface addToCart: aCartId book: (testObjectsFactory anotherItemSellByTheStore ) quantity: 3.
	
	listedCart := (aShopInterface listCart: aCartId).
	self assert: 2 equals: (listedCart occurrencesOf: testObjectsFactory itemSellByTheStore).
	self assert: 3 equals: (listedCart occurrencesOf: testObjectsFactory anotherItemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:15:20' prior: 50872967!
test10ManyCartsCanBeCheckedOut
	|aShopInterface aCreditCard aCartID1 aCartID2|
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCreditCard := testObjectsFactory notExpiredCreditCard.

	aCartID1 := aShopInterface createCartFor: 'admin' password: 'password'.
	aShopInterface addToCart: aCartID1 book: testObjectsFactory itemSellByTheStore quantity: 2.
	aCartID2 := aShopInterface createCartFor: 'admin1' password: 'password1'.
	aShopInterface addToCart: aCartID2 book: testObjectsFactory itemSellByTheStore quantity: 10.
	
	aShopInterface checkOutCart: aCartID1 with: aCreditCard.
	aShopInterface checkOutCart: aCartID2 with: aCreditCard.
	
	self assert: (aShopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:15:20' prior: 50870308!
test05AStoreCanAddAnItemToOneOfItsCarts
	|aShopInterface aCartId |
	
	self setUp.

	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	aShopInterface addToCart: aCartId book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: (aShopInterface listCart: aCartId) includes: (testObjectsFactory itemSellByTheStore).! !

!methodRemoval: StoreInterface #addToCart:theBook:inQuantity: stamp: 'IO 11/30/2020 02:15:20'!
addToCart: aCartId theBook: anISBN inQuantity: aQuantity 
	
	(carts at: aCartId) add: aQuantity of: anISBN.!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 11/30/2020 02:16:06' prior: 50868494!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor  
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.

	salesBook := OrderedCollection new.
	carts := OrderedCollection new.! !
!StoreInterface methodsFor: 'testing' stamp: 'IO 11/30/2020 02:16:13' prior: 50868504!
hasMadeTheSale: aSale

	^salesBook includes: aSale.! !
!StoreInterface methodsFor: 'testing' stamp: 'IO 11/30/2020 02:16:56' prior: 50868508!
numberOfActiveCarts
	
	^carts size.! !
!StoreInterface methodsFor: 'initialization' stamp: 'IO 11/30/2020 02:17:02' prior: 50873363!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor  
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.

	salesBook := OrderedCollection new.
	carts := OrderedCollection new.
! !
!StoreInterfaceTest methodsFor: 'nil' stamp: 'IO 11/30/2020 02:18:58'!
test12CannotCreateCartWithInvalidUser
	
	self setUp.
	
	! !
!StoreInterfaceTest methodsFor: 'invalid cart creation' stamp: 'IO 11/30/2020 02:19:28' prior: 50873393!
test12CannotCreateCartWithInvalidUser
	
	| aCartId aShopInterface |
	self setUp.
	
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartId := aShopInterface createCartFor: 'admin' password: 'password'.
	
	! !
!StoreInterfaceTest methodsFor: 'invalid cart creation' stamp: 'IO 11/30/2020 02:19:45' prior: 50873399!
test12CannotCreateCartWithInvalidUser
	
	| aCartId aShopInterface |
	self setUp.
	
	aShopInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog withMerchantProccessor: self.
	aCartId := aShopInterface createCartFor: 'admin2' password: 'password'.
	
	! !

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'IO 11/30/2020 02:23:51'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior shopInterface'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'set up' stamp: 'IO 11/30/2020 02:23:50' prior: 50868031 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].

	shopInterface := StoreInterface
		withCatalogue: testObjectsFactory defaultCatalog
		withMerchantProccessor: self.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:24:08' prior: 50868037!
test01ANewStoreHasNoActiveCarts
	
	
	self setUp.
	
	self assert: 0 equals: shopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:24:10'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:24:10'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:24:13' prior: 50873442!
test01ANewStoreHasNoActiveCarts
	
	self setUp.
	
	self assert: 0 equals: shopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:24:20' prior: 50870280!
test02ACartCanBeCreatedInAStore
	|aShopInterface |
	
	self setUp.
	
	shopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:24:24'!
ERROR!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:24:27' prior: 50873501!
test02ACartCanBeCreatedInAStore
	
	
	self setUp.
	
	shopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: shopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:24:30'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:24:30'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:24:32' prior: 50873514!
test02ACartCanBeCreatedInAStore

	self setUp.
	
	shopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: 1 equals: shopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:24:46' prior: 50870293!
test03AStoreInterfaceCanCreateMultipleCarts
	
	self setUp.
	
	shopInterface createCartFor: 'admin' password: 'password'.
	shopInterface createCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: shopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:24:47'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:24:47'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:25:15' prior: 50868074!
test04ANewCartInAStoreIsEmpty
	| aCartId |
	
	self setUp.
	
	aCartId := shopInterface createCartFor: 'admin' password: 'password'.
	
	self assert: (shopInterface listCart: aCartId) isEmpty.! !

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:25:16'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:25:32' prior: 50873339!
test05AStoreCanAddAnItemToOneOfItsCarts
	| aCartId |
	
	self setUp.

	aCartId := shopInterface createCartFor: 'admin' password: 'password'.
	
	shopInterface addToCart: aCartId book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: (shopInterface listCart: aCartId) includes: (testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:25:33'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:25:33'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:25:53' prior: 50873235!
test06AStoreCanAddMoreThanOneOfAnItemToItsCarts
	| aCartId anAvailableItem |
	
	self setUp.

	anAvailableItem := testObjectsFactory itemSellByTheStore.
	aCartId := shopInterface createCartFor: 'admin' password: 'password'.
	
	shopInterface addToCart: aCartId book: anAvailableItem quantity: 2.
	
	self assert: 2 equals: ((shopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:25:54'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:25:54'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:26:17' prior: 50873283!
test07AStoreCanAddDifferentItemsToItsCarts
	| aCartId listedCart |
	
	self setUp.

	aCartId := shopInterface createCartFor: 'admin' password: 'password'.

	shopInterface addToCart: aCartId book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	shopInterface addToCart: aCartId book: (testObjectsFactory anotherItemSellByTheStore ) quantity: 3.
	
	listedCart := (shopInterface listCart: aCartId).
	self assert: 2 equals: (listedCart occurrencesOf: testObjectsFactory itemSellByTheStore).
	self assert: 3 equals: (listedCart occurrencesOf: testObjectsFactory anotherItemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:26:19'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:26:21'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:27:22' prior: 50873255!
test08AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 |
	
	self setUp.

	aCartId1 := shopInterface createCartFor: 'admin' password: 'password'.
	aCartId2 := shopInterface createCartFor: 'admin1' password: 'password1'.
	
	shopInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	shopInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((shopInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((shopInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:27:23'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:27:23'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:28:05' prior: 50873190!
test09ACartWithItemsCanBeCheckedOut
	| aCartID |
	
	self setUp.

	aCartID := shopInterface createCartFor: 'admin' password: 'password'.
	shopInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	shopInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (shopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:28:07'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:28:44' prior: 50873309!
test10ManyCartsCanBeCheckedOut
	| aCartID1 aCartID2 |
	
	self setUp.

	aCartID1 := shopInterface createCartFor: 'admin' password: 'password'.
	shopInterface addToCart: aCartID1 book: testObjectsFactory itemSellByTheStore quantity: 2.
	aCartID2 := shopInterface createCartFor: 'admin1' password: 'password1'.
	shopInterface addToCart: aCartID2 book: testObjectsFactory itemSellByTheStore quantity: 10.
	
	shopInterface checkOutCart: aCartID1 with: (testObjectsFactory notExpiredCreditCard).
	shopInterface checkOutCart: aCartID2 with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (shopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:28:45'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:28:45'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:29:15' prior: 50873212!
test11CannotModifyACartFromOutsideStore
	| aCartID listedCart |
	
	self setUp.

	aCartID := shopInterface createCartFor: 'admin' password: 'password'.
	shopInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := shopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((shopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:29:18'!
PASSED!
!StoreInterfaceTest methodsFor: 'invalid cart creation' stamp: 'IO 11/30/2020 02:29:34' prior: 50873411!
test12CannotCreateCartWithInvalidUser
	
	| aCartId |
	self setUp.

	aCartId := shopInterface createCartFor: 'admin2' password: 'password'.
	
	! !

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:29:39'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:29:39'!
PASSED!
!StoreInterface class methodsFor: 'instance creation' stamp: 'IO 11/30/2020 02:30:29'!
withCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withUsers: aUserPasswordDictionary 
	
	^self new initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withUsers: aUserPasswordDictionary ! !
!StoreInterface methodsFor: 'initialization' stamp: 'IO 11/30/2020 02:30:37'!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withUsers: aUserPasswordDictionary 
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.

	salesBook := OrderedCollection new.
	carts := OrderedCollection new.
! !

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'IO 11/30/2020 02:30:47'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts merchantProcessor salesBook users'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 11/30/2020 02:30:46' prior: 50874079!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withUsers: aUserPasswordDictionary 
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.

	salesBook := OrderedCollection new.
	carts := OrderedCollection new.
	
	users := aUserPasswordDictionary.

! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:30:51'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:30:51'!
PASSED!
!StoreInterfaceTest methodsFor: 'set up' stamp: 'IO 11/30/2020 02:31:52' prior: 50873432 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].

	shopInterface := StoreInterface
		withCatalogue: testObjectsFactory defaultCatalog
		withMerchantProccessor: self
		withUsers: nil.! !

Dictionary!
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'IO 11/30/2020 02:33:38'!
users

	| userPasswordDictionary |
	
	userPasswordDictionary := Dictionary new.
	userPasswordDictionary add: (Association key: 'admin' value: 'password').
! !
!StoreTestObjectsFactory methodsFor: 'users' stamp: 'IO 11/30/2020 02:34:10'!
validUserName
	^'admin'.! !
!StoreTestObjectsFactory methodsFor: 'users' stamp: 'IO 11/30/2020 02:34:20'!
validUserPassword
	^'password'.! !
!StoreInterfaceTest methodsFor: 'set up' stamp: 'IO 11/30/2020 02:34:44' prior: 50874199 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].

	shopInterface := StoreInterface
		withCatalogue: testObjectsFactory defaultCatalog
		withMerchantProccessor: self
		withUsers: testObjectsFactory users.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:34:45'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:34:45'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'users' stamp: 'IO 11/30/2020 02:35:18'!
anotherValidUserName
	^'admin2'.! !
!StoreTestObjectsFactory methodsFor: 'users' stamp: 'IO 11/30/2020 02:35:31'!
anotherValidUserPassword
	^'password2'.! !
!StoreTestObjectsFactory methodsFor: 'users' stamp: 'IO 11/30/2020 02:35:56'!
invalidUserName
	^'bad-user'.! !
!StoreTestObjectsFactory methodsFor: 'users' stamp: 'IO 11/30/2020 02:36:09'!
invalidUserPassword
	^'bad-pass'.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:36:49' prior: 50873568!
test02ACartCanBeCreatedInAStore

	self setUp.
	
	shopInterface createCartFor: testObjectsFactory validUserName password: testObjectsFactory validUserPassword.
	
	self assert: 1 equals: shopInterface numberOfActiveCarts.! !
!StoreTestObjectsFactory methodsFor: 'users' stamp: 'IO 11/30/2020 02:37:34' prior: 50874210!
users

	| userPasswordDictionary |
	
	userPasswordDictionary := Dictionary new.
	userPasswordDictionary add: (Association key: self validUserName value: self validUserPassword).
	userPasswordDictionary add: (Association key: self anotherValidUserName value: self anotherValidUserPassword).
! !
!StoreTestObjectsFactory methodsFor: 'users' stamp: 'IO 11/30/2020 02:37:41' prior: 50874306!
users

	| userPasswordDictionary |
	
	userPasswordDictionary := Dictionary new.
	userPasswordDictionary add: (Association key: self validUserName value: self validUserPassword).
	userPasswordDictionary add: (Association key: self anotherValidUserName value: self anotherValidUserPassword).

	^userPasswordDictionary.
! !
!StoreInterfaceTest methodsFor: 'nil' stamp: 'IO 11/30/2020 02:38:27'!
createValidCart

	^shopInterface createCartFor: testObjectsFactory validUserName password: testObjectsFactory validUserPassword.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:38:48' prior: 50874296!
test02ACartCanBeCreatedInAStore

	self setUp.
	
	self createValidCart.
	
	self assert: 1 equals: shopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:39:07' prior: 50873577!
test03AStoreInterfaceCanCreateMultipleCarts
	
	self setUp.
	
	self createValidCart.
	shopInterface createCartFor: 'admin2' password: 'password2'.
	
	self assert: 2 equals: shopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:39:08'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:39:08'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:39:08'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:39:08'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:39:08'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:39:08'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:39:08'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:39:08'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:39:08'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:39:09'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:39:25' prior: 50873633!
test04ANewCartInAStoreIsEmpty
	| aCartId |
	
	self setUp.
	
	aCartId := self createValidCart.
	
	self assert: (shopInterface listCart: aCartId) isEmpty.! !

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:39:26'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:39:26'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:39:31' prior: 50873687!
test05AStoreCanAddAnItemToOneOfItsCarts
	| aCartId |
	
	self setUp.

	aCartId := self createValidCart.
	
	shopInterface addToCart: aCartId book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: (shopInterface listCart: aCartId) includes: (testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:39:32'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:39:32'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:39:40' prior: 50873746!
test06AStoreCanAddMoreThanOneOfAnItemToItsCarts
	| aCartId anAvailableItem |
	
	self setUp.

	anAvailableItem := testObjectsFactory itemSellByTheStore.
	aCartId := self createValidCart.
	
	shopInterface addToCart: aCartId book: anAvailableItem quantity: 2.
	
	self assert: 2 equals: ((shopInterface listCart: aCartId) occurrencesOf: anAvailableItem).! !

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:39:41'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:39:41'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:39:54' prior: 50874512!
test06AStoreCanAddMoreThanOneOfAnItemToItsCarts
	| aCartId anAvailableItem |
	
	self setUp.

	anAvailableItem := 
	aCartId := self createValidCart.
	
	shopInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	self assert: 2 equals: ((shopInterface listCart: aCartId) occurrencesOf: testObjectsFactory itemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:39:59' prior: 50874572!
test06AStoreCanAddMoreThanOneOfAnItemToItsCarts
	| aCartId |
	
	self setUp.

	aCartId := self createValidCart.
	
	shopInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	self assert: 2 equals: ((shopInterface listCart: aCartId) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:40:03'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:40:15' prior: 50873807!
test07AStoreCanAddDifferentItemsToItsCarts
	| aCartId listedCart |
	
	self setUp.

	aCartId := self createValidCart.

	shopInterface addToCart: aCartId book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	shopInterface addToCart: aCartId book: (testObjectsFactory anotherItemSellByTheStore ) quantity: 3.
	
	listedCart := (shopInterface listCart: aCartId).
	self assert: 2 equals: (listedCart occurrencesOf: testObjectsFactory itemSellByTheStore).
	self assert: 3 equals: (listedCart occurrencesOf: testObjectsFactory anotherItemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:40:22' prior: 50873836!
test08AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 |
	
	self setUp.

	aCartId1 := self createValidCart.
	aCartId2 := shopInterface createCartFor: 'admin1' password: 'password1'.
	
	shopInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	shopInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((shopInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((shopInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:40:28' prior: 50873905!
test09ACartWithItemsCanBeCheckedOut
	| aCartID |
	
	self setUp.

	aCartID := self createValidCart.
	shopInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	shopInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (shopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:40:37' prior: 50873925!
test10ManyCartsCanBeCheckedOut
	| aCartID1 aCartID2 |
	
	self setUp.

	aCartID1 := self createValidCart.
	shopInterface addToCart: aCartID1 book: testObjectsFactory itemSellByTheStore quantity: 2.
	aCartID2 := shopInterface createCartFor: 'admin1' password: 'password1'.
	shopInterface addToCart: aCartID2 book: testObjectsFactory itemSellByTheStore quantity: 10.
	
	shopInterface checkOutCart: aCartID1 with: (testObjectsFactory notExpiredCreditCard).
	shopInterface checkOutCart: aCartID2 with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (shopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:40:50' prior: 50873994!
test11CannotModifyACartFromOutsideStore
	| aCartID listedCart |
	
	self setUp.

	aCartID := self createValidCart.
	shopInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := shopInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((shopInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:41:30' prior: 50874661!
test10ManyCartsCanBeCheckedOut
	| aCartID1 aCartID2 |
	
	self setUp.

	aCartID1 := self createValidCart.
	shopInterface addToCart: aCartID1 book: testObjectsFactory itemSellByTheStore quantity: 2.
	aCartID2 := shopInterface createCartFor: testObjectsFactory anotherValidUserName password: testObjectsFactory anotherValidUserPassword.
	shopInterface addToCart: aCartID2 book: testObjectsFactory itemSellByTheStore quantity: 10.
	
	shopInterface checkOutCart: aCartID1 with: (testObjectsFactory notExpiredCreditCard).
	shopInterface checkOutCart: aCartID2 with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (shopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:41:33'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:41:33'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:42:06' prior: 50874346!
test03AStoreInterfaceCanCreateMultipleCarts
	
	self setUp.
	
	self createValidCart.
	shopInterface createCartFor: testObjectsFactory anotherValidUserName password: testObjectsFactory anotherValidUserPassword.
	
	self assert: 2 equals: shopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:46:36' prior: 50874016!
test12CannotCreateCartWithInvalidUser
	
	
	self setUp.
	
	self
		should: [shopInterface createCartFor: testObjectsFactory invalidUserName password: testObjectsFactory invalidUserPassword]
		raise: Error
		withMessageText: StoreInterface invalidUserName.

	
	! !

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:46:50'!
ERROR!
!StoreInterface class methodsFor: 'error descriptions' stamp: 'IO 11/30/2020 02:47:12'!
invalidUserName
	^'The user name is not valid'! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:47:14'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:47:14'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:47:14'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 02:49:17' prior: 50873177!
createCartFor: aUserID password: aPassword

	aUserID = 'admin' not ifTrue: [^self error: StoreInterface invalidUserName].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:49:19'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:49:19'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:49:19'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:49:19'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:49:19'!
ERROR!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:49:19'!
ERROR!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:49:19'!
ERROR!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:49:19'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:49:19'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:49:19'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:49:19'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:49:19'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 02:49:32' prior: 50874849!
createCartFor: aUserID password: aPassword

	(aUserID = 'admin' not) ifTrue: [^self error: StoreInterface invalidUserName].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:49:34'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:49:34'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:49:34'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:49:34'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:49:34'!
ERROR!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:49:34'!
ERROR!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:49:34'!
ERROR!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:49:34'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:49:34'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:49:34'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:49:34'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:49:34'!
FAILURE!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:50:16'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:50:16'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:50:16'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:50:16'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:50:16'!
ERROR!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:50:16'!
ERROR!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:50:16'!
ERROR!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:50:16'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:50:16'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:50:16'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:50:16'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:50:16'!
FAILURE!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:50:21'!
ERROR!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:50:21'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 02:51:16' prior: 50874945!
createCartFor: aUserID password: aPassword

	(aUserID = 'admin') ifFalse: [^self error: StoreInterface invalidUserName].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:51:18'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:51:18'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:51:18'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:51:18'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 02:51:25' prior: 50875089!
createCartFor: aUserID password: aPassword

	(aUserID = 'admin') ifFalse: [^self error: StoreInterface invalidUserName].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 02:51:52' prior: 50875185!
createCartFor: aUserID password: aPassword

	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidUserName].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:51:54'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:51:54'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:51:54'!
ERROR!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:52:36' prior: 50874624!
test08AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 |
	
	self setUp.

	aCartId1 := self createValidCart.
	aCartId2 := shopInterface createCartFor: testObjectsFactory anotherValidUserName password: testObjectsFactory anotherValidUserPassword.
	
	shopInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	shopInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((shopInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((shopInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:52:38'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:52:38'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:52:45' prior: 50874784!
test12CannotCreateCartWithInvalidUser
	
	
	self setUp.
	
	self
		should: [shopInterface createCartFor: testObjectsFactory invalidUserName password: testObjectsFactory invalidUserPassword]
		raise: Error
		withMessageText: StoreInterface invalidUserName.

	! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:53:20'!
test12CannotCreateCartWithInvalidClientId
	
	
	self setUp.
	
	self
		should: [shopInterface createCartFor: testObjectsFactory invalidUserName password: testObjectsFactory invalidUserPassword]
		raise: Error
		withMessageText: StoreInterface invalidUserName.

	! !

!methodRemoval: StoreInterfaceTest #test12CannotCreateCartWithInvalidUser stamp: 'IO 11/30/2020 02:53:20'!
test12CannotCreateCartWithInvalidUser
	
	
	self setUp.
	
	self
		should: [shopInterface createCartFor: testObjectsFactory invalidUserName password: testObjectsFactory invalidUserPassword]
		raise: Error
		withMessageText: StoreInterface invalidUserName.

	!
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'IO 11/30/2020 02:53:47'!
anotherValidClientId
	^'admin2'.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:53:47' prior: 50874702!
test10ManyCartsCanBeCheckedOut
	| aCartID1 aCartID2 |
	
	self setUp.

	aCartID1 := self createValidCart.
	shopInterface addToCart: aCartID1 book: testObjectsFactory itemSellByTheStore quantity: 2.
	aCartID2 := shopInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidUserPassword.
	shopInterface addToCart: aCartID2 book: testObjectsFactory itemSellByTheStore quantity: 10.
	
	shopInterface checkOutCart: aCartID1 with: (testObjectsFactory notExpiredCreditCard).
	shopInterface checkOutCart: aCartID2 with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (shopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:53:47' prior: 50874772!
test03AStoreInterfaceCanCreateMultipleCarts
	
	self setUp.
	
	self createValidCart.
	shopInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidUserPassword.
	
	self assert: 2 equals: shopInterface numberOfActiveCarts.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:53:47' prior: 50874319!
users

	| userPasswordDictionary |
	
	userPasswordDictionary := Dictionary new.
	userPasswordDictionary add: (Association key: self validUserName value: self validUserPassword).
	userPasswordDictionary add: (Association key: self anotherValidClientId value: self anotherValidUserPassword).

	^userPasswordDictionary.
! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:53:47' prior: 50875294!
test08AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 |
	
	self setUp.

	aCartId1 := self createValidCart.
	aCartId2 := shopInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidUserPassword.
	
	shopInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	shopInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((shopInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((shopInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !

!methodRemoval: StoreTestObjectsFactory #anotherValidUserName stamp: 'IO 11/30/2020 02:53:47'!
anotherValidUserName
	^'admin2'.!
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'IO 11/30/2020 02:54:00'!
anotherValidClientPassword
	^'password2'.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:00' prior: 50875497!
test08AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 |
	
	self setUp.

	aCartId1 := self createValidCart.
	aCartId2 := shopInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	shopInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	shopInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((shopInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((shopInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:00' prior: 50875483!
users

	| userPasswordDictionary |
	
	userPasswordDictionary := Dictionary new.
	userPasswordDictionary add: (Association key: self validUserName value: self validUserPassword).
	userPasswordDictionary add: (Association key: self anotherValidClientId value: self anotherValidClientPassword).

	^userPasswordDictionary.
! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:00' prior: 50875445!
test10ManyCartsCanBeCheckedOut
	| aCartID1 aCartID2 |
	
	self setUp.

	aCartID1 := self createValidCart.
	shopInterface addToCart: aCartID1 book: testObjectsFactory itemSellByTheStore quantity: 2.
	aCartID2 := shopInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	shopInterface addToCart: aCartID2 book: testObjectsFactory itemSellByTheStore quantity: 10.
	
	shopInterface checkOutCart: aCartID1 with: (testObjectsFactory notExpiredCreditCard).
	shopInterface checkOutCart: aCartID2 with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (shopInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:00' prior: 50875471!
test03AStoreInterfaceCanCreateMultipleCarts
	
	self setUp.
	
	self createValidCart.
	shopInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	self assert: 2 equals: shopInterface numberOfActiveCarts.! !

!methodRemoval: StoreTestObjectsFactory #anotherValidUserPassword stamp: 'IO 11/30/2020 02:54:00'!
anotherValidUserPassword
	^'password2'.!
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'IO 11/30/2020 02:54:10'!
invalidClientId
	^'bad-user'.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:10' prior: 50875417!
test12CannotCreateCartWithInvalidClientId
	
	
	self setUp.
	
	self
		should: [shopInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory invalidUserPassword]
		raise: Error
		withMessageText: StoreInterface invalidUserName.

	! !

!methodRemoval: StoreTestObjectsFactory #invalidUserName stamp: 'IO 11/30/2020 02:54:10'!
invalidUserName
	^'bad-user'.!
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'IO 11/30/2020 02:54:24'!
invalidClientPassword
	^'bad-pass'.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:24' prior: 50875616!
test12CannotCreateCartWithInvalidClientId
	
	
	self setUp.
	
	self
		should: [shopInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidUserName.

	! !

!methodRemoval: StoreTestObjectsFactory #invalidUserPassword stamp: 'IO 11/30/2020 02:54:24'!
invalidUserPassword
	^'bad-pass'.!
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'IO 11/30/2020 02:54:34'!
clients

	| userPasswordDictionary |
	
	userPasswordDictionary := Dictionary new.
	userPasswordDictionary add: (Association key: self validUserName value: self validUserPassword).
	userPasswordDictionary add: (Association key: self anotherValidClientId value: self anotherValidClientPassword).

	^userPasswordDictionary.
! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:34' prior: 50874227 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].

	shopInterface := StoreInterface
		withCatalogue: testObjectsFactory defaultCatalog
		withMerchantProccessor: self
		withUsers: testObjectsFactory clients.! !

!methodRemoval: StoreTestObjectsFactory #users stamp: 'IO 11/30/2020 02:54:34'!
users

	| userPasswordDictionary |
	
	userPasswordDictionary := Dictionary new.
	userPasswordDictionary add: (Association key: self validUserName value: self validUserPassword).
	userPasswordDictionary add: (Association key: self anotherValidClientId value: self anotherValidClientPassword).

	^userPasswordDictionary.
!
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'IO 11/30/2020 02:54:45'!
validClientId
	^'admin'.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:45' prior: 50874332!
createValidCart

	^shopInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validUserPassword.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:45' prior: 50875651!
clients

	| userPasswordDictionary |
	
	userPasswordDictionary := Dictionary new.
	userPasswordDictionary add: (Association key: self validClientId value: self validUserPassword).
	userPasswordDictionary add: (Association key: self anotherValidClientId value: self anotherValidClientPassword).

	^userPasswordDictionary.
! !

!methodRemoval: StoreTestObjectsFactory #validUserName stamp: 'IO 11/30/2020 02:54:45'!
validUserName
	^'admin'.!
!StoreTestObjectsFactory methodsFor: 'clients' stamp: 'IO 11/30/2020 02:54:58'!
validClientPassword
	^'password'.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:58' prior: 50875694!
createValidCart

	^shopInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:54:58' prior: 50875702!
clients

	| userPasswordDictionary |
	
	userPasswordDictionary := Dictionary new.
	userPasswordDictionary add: (Association key: self validClientId value: self validClientPassword).
	userPasswordDictionary add: (Association key: self anotherValidClientId value: self anotherValidClientPassword).

	^userPasswordDictionary.
! !

!methodRemoval: StoreTestObjectsFactory #validUserPassword stamp: 'IO 11/30/2020 02:54:58'!
validUserPassword
	^'password'.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'IO 11/30/2020 02:55:02'!
PASSED!
!StoreInterface class methodsFor: 'instance creation' stamp: 'IO 11/30/2020 02:55:21'!
withCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClients: aUserPasswordDictionary 
	
	^self new initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withUsers: aUserPasswordDictionary ! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:55:21' prior: 50875665 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].

	shopInterface := StoreInterface
		withCatalogue: testObjectsFactory defaultCatalog
		withMerchantProccessor: self
		withClients: testObjectsFactory clients.! !

!methodRemoval: StoreInterface class #withCatalogue:withMerchantProccessor:withUsers: stamp: 'IO 11/30/2020 02:55:21'!
withCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withUsers: aUserPasswordDictionary 
	
	^self new initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withUsers: aUserPasswordDictionary !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:55:24'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'IO 11/30/2020 02:55:24'!
PASSED!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 11/30/2020 02:55:40'!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withClients: aUserPasswordDictionary 
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.

	salesBook := OrderedCollection new.
	carts := OrderedCollection new.
	
	users := aUserPasswordDictionary.

! !
!StoreInterface class methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:55:40' prior: 50875837!
withCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClients: aUserPasswordDictionary 
	
	^self new initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withClients: aUserPasswordDictionary ! !

!methodRemoval: StoreInterface #initializeWithCatalogue:andMerchantProccessor:withUsers: stamp: 'IO 11/30/2020 02:55:40'!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withUsers: aUserPasswordDictionary 
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.

	salesBook := OrderedCollection new.
	carts := OrderedCollection new.
	
	users := aUserPasswordDictionary.

!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 11/30/2020 02:55:49' prior: 50875959!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withClients: aClientDictionary 
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.

	salesBook := OrderedCollection new.
	carts := OrderedCollection new.
	
	users := aClientDictionary.

! !
!StoreInterface class methodsFor: 'instance creation' stamp: 'IO 11/30/2020 02:55:59' prior: 50875972!
withCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClients: aClientDictionary 
	
	^self new initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withClients: aClientDictionary ! !

!methodRemoval: StoreInterface class #withCatalogue:withMerchantProccessor: stamp: 'IO 11/30/2020 02:56:02'!
withCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor  
	
	^self new initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor !

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'IO 11/30/2020 02:56:32'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:56:41' prior: 50875636!
test12CannotCreateCartWithInvalidClientId

	self setUp.

	self
		should: [shopInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidUserName.

	! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:57:13'!
test13CannotCreateCartWithInvalidClientPassword

	self setUp.

	self
		should: [shopInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidUserName.

	! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'IO 11/30/2020 02:57:22' prior: 50876032!
test12CannotCreateCartWithInvalidClientId

	self setUp.

	self
		should: [shopInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory validClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidUserName.

	! !

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'IO 11/30/2020 02:57:27'!
FAILURE!
!StoreInterface class methodsFor: 'error descriptions' stamp: 'IO 11/30/2020 02:57:48'!
invalidClientId
	^'The user name is not valid'! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:57:48' prior: 50876043!
test13CannotCreateCartWithInvalidClientPassword

	self setUp.

	self
		should: [shopInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:57:48' prior: 50876055!
test12CannotCreateCartWithInvalidClientId

	self setUp.

	self
		should: [shopInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory validClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 11/30/2020 02:57:48' prior: 50875194!
createCartFor: aUserID password: aPassword

	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !

!methodRemoval: StoreInterface class #invalidUserName stamp: 'IO 11/30/2020 02:57:48'!
invalidUserName
	^'The user name is not valid'!
!StoreInterface class methodsFor: 'error descriptions' stamp: 'IO 11/30/2020 02:58:04'!
invalidClientPassword
	^'The client password is not valid'! !
!StoreInterface class methodsFor: 'error descriptions' stamp: 'IO 11/30/2020 02:58:11' prior: 50876070!
invalidClientId
	^'The client id is not valid'! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'IO 11/30/2020 02:58:14'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'IO 11/30/2020 02:58:14'!
FAILURE!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'IO 11/30/2020 02:58:14'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 02:59:06' prior: 50876099!
createCartFor: aUserID password: aPassword

	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	(users at: aUserID = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 02:59:08'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:59:08'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 02:59:08'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 02:59:08'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 02:59:08'!
ERROR!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 02:59:08'!
ERROR!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 02:59:08'!
ERROR!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 02:59:08'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 02:59:08'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 02:59:08'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 02:59:08'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'IO 11/30/2020 02:59:08'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'IO 11/30/2020 02:59:08'!
FAILURE!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 02:59:14'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 02:59:59' prior: 50876219!
createCartFor: aUserID password: aPassword

	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	(users associationAt: aUserID = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 03:00:05'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 03:00:19'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 03:00:19'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 03:00:19'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 03:00:19'!
ERROR!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 03:00:19'!
ERROR!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 03:00:19'!
ERROR!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 03:00:19'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 03:00:19'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 03:00:19'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 03:00:19'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'IO 11/30/2020 03:00:19'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'IO 11/30/2020 03:00:19'!
FAILURE!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 03:00:33'!
ERROR!

users!

self!

self associationAt: 'admin'!

self associationAt: 'admin' value !

self associationAt: 'admin' value!

self at: 'admin'!

self at: 'admin'!
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 03:01:58' prior: 50876280!
createCartFor: aUserID password: aPassword

	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	(users at: aUserID = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 11/30/2020 03:02:09' prior: 50876395!
createCartFor: aUserID password: aPassword

	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	((users at: aUserID) = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	^carts size.
! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 03:02:18'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'IO 11/30/2020 03:02:20'!
PASSED!

----SNAPSHOT----(30 November 2020 03:11:02) CuisUniversity-4384.image priorSource: 17155564!

----QUIT----(30 November 2020 03:11:07) CuisUniversity-4384.image priorSource: 17435594!

----STARTUP---- (30 November 2020 14:01:32) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!


!classRemoval: #StoreTestObjectsFactory stamp: 'LH 11/30/2020 14:01:38'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreInterface stamp: 'LH 11/30/2020 14:01:39'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'LH 11/30/2020 14:01:39'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'LH 11/30/2020 14:01:40'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'LH 11/30/2020 14:01:40'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'LH 11/30/2020 14:01:40'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreInterfaceTest stamp: 'LH 11/30/2020 14:01:41'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'LH 11/30/2020 14:01:41'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'LH 11/30/2020 14:01:42'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\TusLibros-3.st----!

----QUIT----(30 November 2020 14:45:52) CuisUniversity-4384.image priorSource: 17668243!

----STARTUP---- (30 November 2020 17:47:36) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!

!StoreInterfaceTest methodsFor: 'tests 30 minutos' stamp: 'LH 11/30/2020 18:35:22'!
test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	self setUp.
	aStoreInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog 
								withMerchantProccessor: self 
								withClients: testObjectsFactory clients 
								withTimeManager: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap30minIntoTheFuture.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError equals: StoreInterface invalidCartOutOfTime.
				self assert: aStoreInterface aCartIsNotValid: aCartId.]
	
	! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:35:30'!
ERROR!
!StoreInterface class methodsFor: 'instance creation' stamp: 'LH 11/30/2020 18:35:42'!
withCatalogue: aDictionary withMerchantProccessor: aStoreInterfaceTest withClients: aDictionary3 withTimeManager: aStoreInterfaceTest4 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aStoreInterfaceTest withClients: aDictionary3 withTimeManager: aStoreInterfaceTest4 ! !
!StoreInterface class methodsFor: 'instance creation' stamp: 'LH 11/30/2020 18:36:23' prior: 50884845!
withCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager 

	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager ! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:36:25'!
ERROR!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/30/2020 18:36:35'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts merchantProcessor salesBook users dictionary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/30/2020 18:36:35'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts merchantProcessor salesBook users dictionary merchantProccessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/30/2020 18:36:35'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts merchantProcessor salesBook users dictionary merchantProccessor clientBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/30/2020 18:36:35'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts merchantProcessor salesBook users dictionary merchantProccessor clientBook timeManager'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/30/2020 18:36:36'!
initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager 
	self shouldBeImplemented.
	dictionary := aDictionary.
	merchantProccessor := aMerchantProccessor.
	clientBook := aClientBook.
	timeManager := aTimeManager.! !
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/30/2020 18:37:28' prior: 50884915!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	users := aClientBook.
	timeManager := aTimeManager.! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:37:29'!
ERROR!
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/30/2020 18:38:35' prior: 50884928!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	users := aClientBook.
	timeManager := aTimeManager.
	
	carts := OrderedCollection new.
	salesBook := OrderedCollection new.! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:38:37'!
ERROR!

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'LH 11/30/2020 18:39:54'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior shopInterface timeManager'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'set up' stamp: 'LH 11/30/2020 18:39:51' prior: 50884119 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].	timeManager := [^ DateAndTime current ].

	shopInterface := StoreInterface
		withCatalogue: testObjectsFactory defaultCatalog
		withMerchantProccessor: self
		withClients: testObjectsFactory clients.! !

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/30/2020 18:42:37'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts merchantProcessor salesBook users dictionary merchantProccessor clientBook timeManager lastActionForCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 18:42:34' prior: 50884643!
createCartFor: aUserID password: aPassword

	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	((users at: aUserID) = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].
	
	carts add: (Cart acceptingItemsOf: catalogue).	lastActionForCarts := timeManager currentTime.
	
	^carts size.
! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 18:42:52' prior: 50884996!
createCartFor: aUserID password: aPassword

	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	((users at: aUserID) = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	lastActionForCarts := timeManager currentTime.
	
	^carts size.
! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:42:57'!
ERROR!
!StoreInterfaceTest methodsFor: 'timeManager' stamp: 'LH 11/30/2020 18:43:15'!
currentTime
	self shouldBeImplemented.! !
!StoreInterfaceTest methodsFor: 'timeManager' stamp: 'LH 11/30/2020 18:43:35' prior: 50885028!
currentTime
	^timeManager value.! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:43:37'!
ERROR!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:43:48'!
ERROR!
!StoreInterfaceTest methodsFor: 'set up' stamp: 'LH 11/30/2020 18:44:43' prior: 50884972 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].	timeManager := [^ DateAndTime today ].

	shopInterface := StoreInterface
		withCatalogue: testObjectsFactory defaultCatalog
		withMerchantProccessor: self
		withClients: testObjectsFactory clients.! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:44:55'!
ERROR!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:44:55'!
ERROR!
!StoreInterfaceTest methodsFor: 'set up' stamp: 'LH 11/30/2020 18:45:30' prior: 50885047 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].	timeManager := [ DateAndTime today ].

	shopInterface := StoreInterface
		withCatalogue: testObjectsFactory defaultCatalog
		withMerchantProccessor: self
		withClients: testObjectsFactory clients.! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:45:35'!
ERROR!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:45:35'!
ERROR!
!StoreInterfaceTest methodsFor: 'timeManager' stamp: 'LH 11/30/2020 18:45:55'!
leap30minIntoTheFuture
	self shouldBeImplemented.! !
!StoreInterfaceTest methodsFor: 'timeManager' stamp: 'LH 11/30/2020 18:47:07' prior: 50885090!
leap30minIntoTheFuture

	timeManager := [DateAndTime today + 30 minutes].! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:47:13'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 18:51:37' prior: 50884627!
addToCart: aCartId book: anISBN quantity: aQuantity 

	timeManager currentTime - lastActionForCarts < 30 minutes ifFalse:[self error: StoreInterface invalidCartOutOfTime].
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 18:51:48' prior: 50885105!
addToCart: aCartId book: anISBN quantity: aQuantity 

	timeManager currentTime - lastActionForCarts < 30 minutes ifFalse:[^self error: StoreInterface invalidCartOutOfTime].
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:51:52'!
ERROR!
!StoreInterface class methodsFor: 'error descriptions' stamp: 'LH 11/30/2020 18:52:09'!
invalidCartOutOfTime
	self shouldBeImplemented.! !
!StoreInterface class methodsFor: 'error descriptions' stamp: 'LH 11/30/2020 18:52:42' prior: 50885130!
invalidCartOutOfTime
	^ 'The Cart has Expired due to no usage for more than 30 minutes'! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:52:45'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests 30 minutos' stamp: 'LH 11/30/2020 18:53:08' prior: 50884814!
test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	self setUp.
	aStoreInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog 
								withMerchantProccessor: self 
								withClients: testObjectsFactory clients 
								withTimeManager: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap30minIntoTheFuture.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self assert: aStoreInterface aCartIsNotValid: aCartId.]
	
	! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:53:11'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests 30 minutos' stamp: 'LH 11/30/2020 18:53:50' prior: 50885146!
test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	self setUp.
	aStoreInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog 
								withMerchantProccessor: self 
								withClients: testObjectsFactory clients 
								withTimeManager: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap30minIntoTheFuture.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self assert: (aStoreInterface aCartIsNotValid: aCartId).]
	
	! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:53:57'!
ERROR!
!StoreInterface methodsFor: 'testing' stamp: 'LH 11/30/2020 18:54:30'!
aCartIsNotValid: aSmallInteger 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'testing' stamp: 'LH 11/30/2020 18:56:21' prior: 50885209!
aCartIsNotValid: aCartId 
	
	^ timeManager currentTime - lastActionForCarts < 30 minutes.! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:56:22'!
FAILURE!

timeManager currentTime!

lastActionForCarts!

timeManager currentTime - lastActionForCarts!
!StoreInterface methodsFor: 'testing' stamp: 'LH 11/30/2020 18:57:49' prior: 50885214!
aCartIsNotValid: aCartId 
	
	^ timeManager currentTime - lastActionForCarts >= 30 minutes.! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:57:50'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:57:54'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 18:58:39' prior: 50885115!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self aCartIsNotValid: aCartId) ifFalse:[^self error: StoreInterface invalidCartOutOfTime].
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 18:58:41'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 18:58:41'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 18:58:41'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 18:58:41'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 18:58:41'!
ERROR!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 18:58:41'!
ERROR!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 18:58:41'!
ERROR!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 18:58:41'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 18:58:41'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 18:58:41'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 18:58:41'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 18:58:41'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 18:58:41'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 18:58:41'!
FAILURE!
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/30/2020 19:01:23' prior: 50884944!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	users := aClientBook.
	timeManager := aTimeManager.
	
	carts := OrderedCollection new.
	salesBook := OrderedCollection new.
	lastActionForCarts := OrderedCollection new.! !
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/30/2020 19:02:34' prior: 50885301!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	users := aClientBook.
	timeManager := aTimeManager.
	
	carts := OrderedCollection new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 19:05:59' prior: 50885010!
createCartFor: aUserID password: aPassword	|aCartID|
	
	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	((users at: aUserID) = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].
	
	carts add: (Cart acceptingItemsOf: catalogue).
	aCartID := carts size.
	
	lastActionForCarts add: (Association key: aCartID value: timeManager currentTime).
	
	^aCartID.
! !
!StoreInterface methodsFor: 'testing' stamp: 'LH 11/30/2020 19:06:27' prior: 50885227!
aCartIsNotValid: aCartId 
	
	^ timeManager currentTime - lastActionForCarts at: aCartId >= 30 minutes.! !
!StoreInterfaceTest methodsFor: 'set up' stamp: 'LH 11/30/2020 19:06:56' prior: 50885069 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].	timeManager := [ DateAndTime now ].

	shopInterface := StoreInterface
		withCatalogue: testObjectsFactory defaultCatalog
		withMerchantProccessor: self
		withClients: testObjectsFactory clients.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 19:06:58'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 19:06:58'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 19:06:58'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 19:06:58'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 19:06:58'!
ERROR!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 19:06:58'!
ERROR!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 19:06:58'!
ERROR!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 19:06:58'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:06:58'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 19:06:58'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 19:06:58'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 19:06:58'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 19:06:58'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:06:58'!
FAILURE!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:07:09'!
FAILURE!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:07:09'!
FAILURE!
!StoreInterface methodsFor: 'testing' stamp: 'LH 11/30/2020 19:07:49' prior: 50885347!
aCartIsNotValid: aCartId 
	
	^ timeManager currentTime - (lastActionForCarts at: aCartId) >= 30 minutes.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 19:07:50'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 19:07:50'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 19:07:50'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 19:07:50'!
ERROR!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 19:07:50'!
ERROR!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 19:07:50'!
ERROR!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 19:07:50'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:07:50'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 19:07:50'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 19:07:50'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:07:50'!
FAILURE!
!StoreTestObjectsFactory methodsFor: 'store' stamp: 'LH 11/30/2020 19:10:21'!
aStoreInterfaceWithSimulator: aSimulator

	^ StoreInterface withCatalogue: self defaultCatalog 
								withMerchantProccessor: aSimulator 
								withClients: self clients 
								withTimeManager: aSimulator. ! !

TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior timeManager'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'LH 11/30/2020 19:10:44'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior timeManager'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'set up' stamp: 'LH 11/30/2020 19:10:52' prior: 50885354 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].	timeManager := [ DateAndTime now ].
! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:12:14' prior: 50884130!
test01ANewStoreHasNoActiveCarts	|aShopInterface|
	
	self setUp.	aShopInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: 0 equals: aShopInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:12:44' prior: 50884136!
test02ACartCanBeCreatedInAStore	|aShopInterface|
	
	self setUp.	aShopInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self createValidCart.
	
	self assert: 1 equals: aShopInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 19:12:46'!
ERROR!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 19:12:46'!
ERROR!
!StoreInterfaceTest methodsFor: 'tools' stamp: 'LH 11/30/2020 19:13:17' prior: 50884317!
createValidCart

	^StoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 19:13:18'!
ERROR!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:14:48' prior: 50885524!
test02ACartCanBeCreatedInAStore	|aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 19:14:50'!
PASSED!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:15:08' prior: 50885514!
test01ANewStoreHasNoActiveCarts	|aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: 0 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:16:45' prior: 50884143!
test03AStoreInterfaceCanCreateMultipleCarts	|aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.


	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	self assert: 2 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:17:23' prior: 50884155!
test04ANewCartInAStoreIsEmpty
	| aCartId aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.


	
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: (aStoreInterface listCart: aCartId) isEmpty.! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:17:56' prior: 50884163!
test05AStoreCanAddAnItemToOneOfItsCarts
	| aCartId aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: (aStoreInterface listCart: aCartId) includes: (testObjectsFactory itemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:18:28' prior: 50884175!
test06AStoreCanAddMoreThanOneOfAnItemToItsCarts
	| aCartId aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	self assert: 2 equals: ((aStoreInterface listCart: aCartId) occurrencesOf: testObjectsFactory itemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:18:57' prior: 50884188!
test07AStoreCanAddDifferentItemsToItsCarts
	| aCartId listedCart aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface addToCart: aCartId book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aStoreInterface addToCart: aCartId book: (testObjectsFactory anotherItemSellByTheStore ) quantity: 3.
	
	listedCart := (aStoreInterface listCart: aCartId).
	self assert: 2 equals: (listedCart occurrencesOf: testObjectsFactory itemSellByTheStore).
	self assert: 3 equals: (listedCart occurrencesOf: testObjectsFactory anotherItemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:19:31' prior: 50884208!
test08AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId1 := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aCartId2 := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	aStoreInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aStoreInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((aStoreInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((aStoreInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:19:55' prior: 50884232!
test09ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:20:29' prior: 50884247!
test10ManyCartsCanBeCheckedOut
	| aCartID1 aCartID2 aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID1 := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.

	aStoreInterface addToCart: aCartID1 book: testObjectsFactory itemSellByTheStore quantity: 2.
	aCartID2 := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	aStoreInterface addToCart: aCartID2 book: testObjectsFactory itemSellByTheStore quantity: 10.
	
	aStoreInterface checkOutCart: aCartID1 with: (testObjectsFactory notExpiredCreditCard).
	aStoreInterface checkOutCart: aCartID2 with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:21:00' prior: 50884272!
test11CannotModifyACartFromOutsideStore
	| aCartID listedCart aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := aStoreInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aStoreInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:21:38' prior: 50884289!
test12CannotCreateCartWithInvalidClientId	|aStoreInterface|

	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory validClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:21:55' prior: 50884300!
test13CannotCreateCartWithInvalidClientPassword	|aStoreInterface|

	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !
!StoreInterfaceTest methodsFor: 'tests 30 minutos' stamp: 'LH 11/30/2020 19:22:17' prior: 50885178!
test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap30minIntoTheFuture.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self assert: (aStoreInterface aCartIsNotValid: aCartId).]
	
	! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:22:18'!
FAILURE!

timeManager currentTime!

timeManager currentTime - (lastActionForCarts at: aCartId)!

lastActionForCarts at: aCartId!
!StoreInterfaceTest methodsFor: 'timeManager' stamp: 'LH 11/30/2020 19:23:24' prior: 50885095!
leap30minIntoTheFuture

	timeManager := [DateAndTime now + 30 minutes].! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:23:33'!
FAILURE!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:23:33'!
FAILURE!

timeManager currentTime - (lastActionForCarts at: aCartId)!
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 19:24:42' prior: 50885242!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self aCartIsNotValid: aCartId) ifTrue:[^self error: StoreInterface invalidCartOutOfTime].
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:24:43'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:24:46'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 19:24:46'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:24:46'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:24:57'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:25:58'!
ERROR!

merchantProcessor!

merchantProcessor!

aSimulator!

merchantProcessor!

merchantProcessor!

aStoreInterface!

self!

merchantProcessor!

self!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 19:33:56' prior: 50885707!
test09ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	self setUp.	aStoreInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog 
								withMerchantProccessor: self 
								withClients: testObjectsFactory clients 
								withTimeManager: self. 
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:33:57'!
ERROR!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:34:32'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:34:35'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 19:34:35'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:34:35'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:35:46'!
ERROR!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:35:46'!
ERROR!

merchantProcessor!

self!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:37:34'!
ERROR!

aMerchantProccessor!

aMerchantProccessor!

aStoreInterface!

merchantProcessor!
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 19:42:48' prior: 50884633!
checkOutCart: aCartId with: aCreditCard
	
	^(Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
	
! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:42:49'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 19:42:54'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:42:55'!
PASSED!

----SNAPSHOT----(30 November 2020 19:43:19) CuisUniversity-4384.image priorSource: 17700970!
!StoreInterfaceTest methodsFor: 'set up' stamp: 'LH 11/30/2020 19:48:08' prior: 50885506 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	timeManager := [ DateAndTime now ].
! !
!StoreInterfaceTest methodsFor: 'tests 30 minutos' stamp: 'LH 11/30/2020 19:48:51' prior: 50885813!
test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap30minIntoTheFuture.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self assert: (aStoreInterface aCartIsNotValid: aCartId).]
	
	! !

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:48:54'!
PASSED!

aSimulator!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 19:53:08'!
PASSED!

!methodRemoval: StoreInterface #initializeWithCatalogue:andMerchantProccessor: stamp: 'LH 11/30/2020 20:05:04'!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor  
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.

	salesBook := OrderedCollection new.
	carts := OrderedCollection new.
!

!methodRemoval: StoreInterface #initializeWithCatalogue:andMerchantProccessor:withClients: stamp: 'LH 11/30/2020 20:05:40'!
initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withClients: aClientDictionary 
	
	catalogue := aCatalogue.
	merchantProcessor := aMerchantProccessor.

	salesBook := OrderedCollection new.
	carts := OrderedCollection new.
	
	users := aClientDictionary.

!

!methodRemoval: StoreInterface class #withCatalogue:withMerchantProccessor:withClients: stamp: 'LH 11/30/2020 20:05:44'!
withCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClients: aClientDictionary 
	
	^self new initializeWithCatalogue: aCatalogue andMerchantProccessor: aMerchantProccessor withClients: aClientDictionary !

----SNAPSHOT----(30 November 2020 20:06:02) CuisUniversity-4384.image priorSource: 17742607!

Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook users merchantProccessor timeManager lastActionForCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/30/2020 20:07:08'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook users merchantProccessor timeManager lastActionForCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 20:07:11'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:07:11'!
PASSED!
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/30/2020 20:12:35' prior: 50885316!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	users := aClientBook.
	timeManager := aTimeManager.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 20:14:56' prior: 50885331!
createCartFor: aUserID password: aPassword	|aCartID|
	
	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	((users at: aUserID) = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].
	
	
	aCartID := carts keys size + 1.
	carts at: aCartID put: (Cart acceptingItemsOf: catalogue).
	lastActionForCarts add: (Association key: aCartID value: timeManager currentTime).
	
	^aCartID.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:15:13'!
PASSED!

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'LH 11/30/2020 20:16:32'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior timeManager clientsBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'set up' stamp: 'LH 11/30/2020 20:16:28' prior: 50886111 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	timeManager := [ DateAndTime now ].
	clientsBook := testObjectsFactory clients.
! !

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/30/2020 20:17:31'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook users merchantProccessor clock lastActionForCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/30/2020 20:17:31' prior: 50886270!
createCartFor: aUserID password: aPassword	|aCartID|
	
	(users keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	((users at: aUserID) = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].
	
	
	aCartID := carts keys size + 1.
	carts at: aCartID put: (Cart acceptingItemsOf: catalogue).
	lastActionForCarts add: (Association key: aCartID value: clock currentTime).
	
	^aCartID.
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/30/2020 20:17:31' prior: 50886255!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	users := aClientBook.
	clock := aTimeManager.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/30/2020 20:17:31' prior: 50885425!
aCartIsNotValid: aCartId 
	
	^ clock currentTime - (lastActionForCarts at: aCartId) >= 30 minutes.! !

TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clock clientsBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'LH 11/30/2020 20:17:38'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clock clientsBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'set up' stamp: 'LH 11/30/2020 20:17:54' prior: 50886346 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	clock := [ DateAndTime now ].
	clientsBook := testObjectsFactory clients.
! !
!StoreInterfaceTest methodsFor: 'timeManager' stamp: 'LH 11/30/2020 20:18:19' prior: 50885033!
currentTime
	^clock value.! !
!StoreInterfaceTest methodsFor: 'timeManager' stamp: 'LH 11/30/2020 20:18:29' prior: 50885845!
leap30minIntoTheFuture

	clock := [DateAndTime now + 30 minutes].! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:18:37'!
PASSED!

!methodRemoval: StoreInterfaceTest #createValidCart stamp: 'LH 11/30/2020 20:19:32'!
createValidCart

	^StoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.!
!StoreInterfaceTest methodsFor: 'clientsBook' stamp: 'LH 11/30/2020 20:20:38'!
validateUser: aUserID andPassword: aPassword

	(clientsBook keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	((clientsBook at: aUserID) = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].! !
!StoreInterface class methodsFor: 'instance creation' stamp: 'LH 11/30/2020 20:22:36'!
withCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withTimeManager: aTimeManager 

	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager ! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'LH 11/30/2020 20:22:36' prior: 50885940!
test09ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	self setUp.	aStoreInterface := StoreInterface withCatalogue: testObjectsFactory defaultCatalog 
								withMerchantProccessor: self 
								withClientDatabase: testObjectsFactory clients 
								withTimeManager: self. 
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'LH 11/30/2020 20:22:36' prior: 50885481!
aStoreInterfaceWithSimulator: aSimulator

	^ StoreInterface withCatalogue: self defaultCatalog 
								withMerchantProccessor: aSimulator 
								withClientDatabase: self clients 
								withTimeManager: aSimulator. ! !

!methodRemoval: StoreInterface class #withCatalogue:withMerchantProccessor:withClients:withTimeManager: stamp: 'LH 11/30/2020 20:22:36'!
withCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager 

	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager !
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/30/2020 20:23:01'!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	users := aClientBook.
	clock := aTimeManager.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.! !
!StoreInterface class methodsFor: 'as yet unclassified' stamp: 'LH 11/30/2020 20:23:01' prior: 50886505!
withCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withTimeManager: aTimeManager 

	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withTimeManager: aTimeManager ! !

!methodRemoval: StoreInterface #initializeWithCatalogue:withMerchantProccessor:withClients:withTimeManager: stamp: 'LH 11/30/2020 20:23:01'!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClients: aClientBook withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	users := aClientBook.
	clock := aTimeManager.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.!
!StoreInterface methodsFor: 'initialization' stamp: 'LH 11/30/2020 20:23:17' prior: 50886567!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	users := aClientDatabase.
	clock := aTimeManager.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.! !

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 11/30/2020 20:23:27'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/30/2020 20:23:27' prior: 50886365!
createCartFor: aUserID password: aPassword	|aCartID|
	
	(clientDatabase keys includes: aUserID) ifFalse: [^self error: StoreInterface invalidClientId].
	((clientDatabase at: aUserID) = aPassword) ifFalse: [^self error: StoreInterface invalidClientId].
	
	
	aCartID := carts keys size + 1.
	carts at: aCartID put: (Cart acceptingItemsOf: catalogue).
	lastActionForCarts add: (Association key: aCartID value: clock currentTime).
	
	^aCartID.
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 11/30/2020 20:23:27' prior: 50886610!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aTimeManager.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.! !
!StoreTestObjectsFactory methodsFor: 'store' stamp: 'LH 11/30/2020 20:24:04' prior: 50886544!
aStoreInterfaceWithSimulator: aSimulator

	^ StoreInterface withCatalogue: self defaultCatalog 
								withMerchantProccessor: aSimulator 
								withClientDatabase: aSimulator
								withTimeManager: aSimulator. ! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 20:24:57' prior: 50886635!
createCartFor: aUserID password: aPassword	|aCartID|
	
	clientDatabase validateUser: aUserID andPassword: aPassword.
	
	aCartID := carts keys size + 1.
	carts at: aCartID put: (Cart acceptingItemsOf: catalogue).
	lastActionForCarts add: (Association key: aCartID value: clock currentTime).
	
	^aCartID.
! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 20:25:02' prior: 50886678!
createCartFor: aUserID password: aPassword
	|aCartID|
	
	clientDatabase validateUser: aUserID andPassword: aPassword.
	
	aCartID := carts keys size + 1.
	carts at: aCartID put: (Cart acceptingItemsOf: catalogue).
	lastActionForCarts add: (Association key: aCartID value: clock currentTime).
	
	^aCartID.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 20:25:05'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 20:25:05'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 20:25:05'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 20:25:05'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 20:25:06'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 20:25:06'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 20:25:06'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 20:25:06'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 20:25:06'!
ERROR!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 20:25:06'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 20:25:06'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 20:25:06'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 20:25:06'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:25:06'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 20:25:06'!
ERROR!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 20:25:34' prior: 50886518!
test09ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 20:25:36'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 20:25:36'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 20:25:36'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 20:25:36'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 20:25:36'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 20:25:36'!
PASSED!

!testRun: #StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 20:25:36'!
PASSED!

!testRun: #StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 20:25:36'!
PASSED!

!testRun: #StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 20:25:36'!
PASSED!

!testRun: #StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 20:25:37'!
PASSED!

!testRun: #StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 20:25:37'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 20:25:37'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 20:25:37'!
PASSED!

!testRun: #StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 20:25:37'!
PASSED!

!testRun: #StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:25:37'!
PASSED!

----SNAPSHOT----(30 November 2020 20:29:12) CuisUniversity-4384.image priorSource: 17745119!

!methodRemoval: StoreInterfaceTest #test05AStoreCanAddAnItemToOneOfItsCarts stamp: 'LH 11/30/2020 20:30:35'!
test05AStoreCanAddAnItemToOneOfItsCarts
	| aCartId aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: (aStoreInterface listCart: aCartId) includes: (testObjectsFactory itemSellByTheStore).!

!methodRemoval: StoreInterfaceTest #test06AStoreCanAddMoreThanOneOfAnItemToItsCarts stamp: 'LH 11/30/2020 20:30:37'!
test06AStoreCanAddMoreThanOneOfAnItemToItsCarts
	| aCartId aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	self assert: 2 equals: ((aStoreInterface listCart: aCartId) occurrencesOf: testObjectsFactory itemSellByTheStore).!

!methodRemoval: StoreInterfaceTest #test10ManyCartsCanBeCheckedOut stamp: 'LH 11/30/2020 20:31:09'!
test10ManyCartsCanBeCheckedOut
	| aCartID1 aCartID2 aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID1 := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.

	aStoreInterface addToCart: aCartID1 book: testObjectsFactory itemSellByTheStore quantity: 2.
	aCartID2 := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	aStoreInterface addToCart: aCartID2 book: testObjectsFactory itemSellByTheStore quantity: 10.
	
	aStoreInterface checkOutCart: aCartID1 with: (testObjectsFactory notExpiredCreditCard).
	aStoreInterface checkOutCart: aCartID2 with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *10)).!

!methodRemoval: StoreInterfaceTest #test07AStoreCanAddDifferentItemsToItsCarts stamp: 'LH 11/30/2020 20:31:34'!
test07AStoreCanAddDifferentItemsToItsCarts
	| aCartId listedCart aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface addToCart: aCartId book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aStoreInterface addToCart: aCartId book: (testObjectsFactory anotherItemSellByTheStore ) quantity: 3.
	
	listedCart := (aStoreInterface listCart: aCartId).
	self assert: 2 equals: (listedCart occurrencesOf: testObjectsFactory itemSellByTheStore).
	self assert: 3 equals: (listedCart occurrencesOf: testObjectsFactory anotherItemSellByTheStore).!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 20:33:16'!
test05AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId1 := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aCartId2 := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	aStoreInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aStoreInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((aStoreInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((aStoreInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !

!methodRemoval: StoreInterfaceTest #test08AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 20:33:16'!
test08AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId1 := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aCartId2 := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	aStoreInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aStoreInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((aStoreInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((aStoreInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 20:33:20'!
test06ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!methodRemoval: StoreInterfaceTest #test09ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 20:33:20'!
test09ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 20:33:27'!
test07CannotModifyACartFromOutsideStore
	| aCartID listedCart aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := aStoreInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aStoreInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!methodRemoval: StoreInterfaceTest #test11CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 20:33:27'!
test11CannotModifyACartFromOutsideStore
	| aCartID listedCart aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := aStoreInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aStoreInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 20:33:32'!
test08CannotCreateCartWithInvalidClientId	|aStoreInterface|

	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory validClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !

!methodRemoval: StoreInterfaceTest #test12CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 20:33:33'!
test12CannotCreateCartWithInvalidClientId	|aStoreInterface|

	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory validClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	!
!StoreInterfaceTest methodsFor: 'test' stamp: 'LH 11/30/2020 20:33:39'!
test09CannotCreateCartWithInvalidClientPassword	|aStoreInterface|

	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !

!methodRemoval: StoreInterfaceTest #test13CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 20:33:39'!
test13CannotCreateCartWithInvalidClientPassword	|aStoreInterface|

	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	!
!StoreInterfaceTest methodsFor: 'tests 30 minutos' stamp: 'LH 11/30/2020 20:33:58'!
test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap30minIntoTheFuture.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self assert: (aStoreInterface aCartIsNotValid: aCartId).]
	
	! !

!methodRemoval: StoreInterfaceTest #test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:33:59'!
test14ACartCanNoLongerBeUsedAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap30minIntoTheFuture.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self assert: (aStoreInterface aCartIsNotValid: aCartId).]
	
	!

----SNAPSHOT----(30 November 2020 20:40:42) CuisUniversity-4384.image priorSource: 17765769!
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'LH 11/30/2020 20:43:01' prior: 50887139!
test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap30minIntoTheFuture.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
	
	! !

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:43:03'!
ERROR!
!StoreInterface methodsFor: 'testing' stamp: 'LH 11/30/2020 20:43:20'!
isActiveCart: aSmallInteger 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'testing' stamp: 'LH 11/30/2020 20:44:11' prior: 50887217!
isActiveCart: aCartID 
	
	^ carts includesKey: aCartID.! !

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:44:14'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 20:45:34' prior: 50885861!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self aCartIsNotValid: aCartId) ifTrue:[      carts remove: aCartId.
  									^self error: StoreInterface invalidCartOutOfTime.].
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:45:35'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'LH 11/30/2020 20:46:43' prior: 50887232!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self aCartIsNotValid: aCartId) ifTrue:[      carts removeKey: aCartId.
  									^self error: StoreInterface invalidCartOutOfTime.].
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:46:44'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 11/30/2020 20:46:44'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 11/30/2020 20:46:44'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 11/30/2020 20:46:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 11/30/2020 20:46:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 11/30/2020 20:46:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 11/30/2020 20:46:45'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 11/30/2020 20:46:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 11/30/2020 20:46:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 11/30/2020 20:46:45'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'LH 11/30/2020 20:46:45'!
PASSED!

----SNAPSHOT----(30 November 2020 20:46:57) CuisUniversity-4384.image priorSource: 17777129!

----SNAPSHOT----(30 November 2020 20:47:22) CuisUniversity-4384.image priorSource: 17780692!

----QUIT----(30 November 2020 20:47:47) CuisUniversity-4384.image priorSource: 17780786!

----STARTUP---- (1 December 2020 18:33:38) as /Users/ilanolkies/uba/ingsoft1/macos64/CuisUniversity-4384.image!


----End fileIn of /Users/ilanolkies/uba/ingsoft1/ingeSoft-2020-2c/20-TusLibros-3/TusLibros-3.st----!
!StoreInterfaceTest methodsFor: 'tests bad usage' stamp: 'IO 12/1/2020 18:34:55' prior: 50868215!
test09CannotCreateCartWithInvalidClientPassword
	|aStoreInterface|

	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:34:58'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:34:58'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:36:13' prior: 50868071!
test01ANewStoreHasNoActiveCarts
	|aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: 0 equals: aStoreInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:36:14'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:36:14'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:36:14'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:36:14'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:36:14'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:36:14'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:36:14'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:36:14'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:36:14'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:36:14'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:36:14'!
PASSED!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/1/2020 18:36:54'!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aTimeManager.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.! !
!StoreInterface class methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 18:36:54' prior: 50868607!
withCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withTimeManager: aTimeManager 

	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withClock: aTimeManager ! !

!methodRemoval: StoreInterface #initializeWithCatalogue:withMerchantProccessor:withClientDatabase:withTimeManager: stamp: 'IO 12/1/2020 18:36:54'!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withTimeManager: aTimeManager 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aTimeManager.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:36:57'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:36:57'!
PASSED!
!StoreInterface class methodsFor: 'instance creation' stamp: 'IO 12/1/2020 18:37:16'!
withCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withClock: aTimeManager 

	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withClock: aTimeManager ! !
!StoreTestObjectsFactory methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 18:37:16' prior: 50868674!
aStoreInterfaceWithSimulator: aSimulator

	^ StoreInterface withCatalogue: self defaultCatalog 
								withMerchantProccessor: aSimulator 
								withClientDatabase: aSimulator
								withClock: aSimulator. ! !

!methodRemoval: StoreInterface class #withCatalogue:withMerchantProccessor:withClientDatabase:withTimeManager: stamp: 'IO 12/1/2020 18:37:16'!
withCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withTimeManager: aTimeManager 

	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withClock: aTimeManager !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:37:19'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:37:19'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'store' stamp: 'IO 12/1/2020 18:38:51'!
aStoreInterfaceWithSimulator: aSimulator andClock: aClock

	^ StoreInterface withCatalogue: self defaultCatalog 
								withMerchantProccessor: aSimulator 
								withClientDatabase: aSimulator
								withClock: aClock. ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 18:38:52'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 18:38:52'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:39:16' prior: 50868859!
test01ANewStoreHasNoActiveCarts
	|aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.
	
	self assert: 0 equals: aStoreInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:39:17'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:39:19'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:39:33' prior: 50868081!
test02ACartCanBeCreatedInAStore	|aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.
	
	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:39:34'!
ERROR!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/1/2020 18:40:56' prior: 50868907!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.! !
!StoreInterface class methodsFor: 'instance creation' stamp: 'IO 12/1/2020 18:41:04' prior: 50869032!
withCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withClock: aClock 

	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withClock: aClock ! !
!StoreInterface class methodsFor: 'instance creation' stamp: 'IO 12/1/2020 18:41:09' prior: 50869325!
withCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withClock: aTimeManager 

	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withClock: aTimeManager ! !
!StoreInterface class methodsFor: 'instance creation' stamp: 'IO 12/1/2020 18:43:23' prior: 50869337!
withCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withClock: aClock 

	^self new initializeWithCatalogue: aDictionary withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientBook withClock: aClock ! !
!StoreInterface methodsFor: 'testing' stamp: 'IO 12/1/2020 18:44:00' prior: 50868543!
aCartIsNotValid: aCartId 
	
	^ clock now - (lastActionForCarts at: aCartId) >= 30 minutes.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:44:02'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:44:02'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:44:02'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:44:02'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:44:02'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:44:02'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 18:44:43' prior: 50868582!
createCartFor: aUserID password: aPassword
	|aCartID|
	
	clientDatabase validateUser: aUserID andPassword: aPassword.
	
	aCartID := carts keys size + 1.
	carts at: aCartID put: (Cart acceptingItemsOf: catalogue).
	lastActionForCarts add: (Association key: aCartID value: clock now).
	
	^aCartID.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:44:44'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:44:44'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:44:44'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:44:44'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:44:44'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:44:44'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:44:44'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:44:44'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:44:44'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:44:44'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:44:54' prior: 50868094!
test03AStoreInterfaceCanCreateMultipleCarts	|aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.


	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	self assert: 2 equals: aStoreInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:44:55'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:44:55'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:44:55'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:44:55'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:44:55'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:45:03' prior: 50868112!
test04ANewCartInAStoreIsEmpty
	| aCartId aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.


	
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: (aStoreInterface listCart: aCartId) isEmpty.! !

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:45:04'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:45:04'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:45:04'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:45:04'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:45:11' prior: 50868126!
test05AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.
	aCartId1 := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aCartId2 := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	aStoreInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aStoreInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((aStoreInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((aStoreInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:45:12'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:45:12'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:45:12'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:45:12'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:45:12'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:45:12'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:45:12'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:45:12'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:45:12'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:45:12'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:45:12'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:45:17' prior: 50868157!
test06ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:45:18'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:45:18'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:45:18'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:45:18'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:45:18'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:45:18'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:45:18'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:45:18'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:45:18'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:45:18'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:45:18'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests bad usage' stamp: 'IO 12/1/2020 18:45:32' prior: 50868178!
test07CannotModifyACartFromOutsideStore
	| aCartID listedCart aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := aStoreInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aStoreInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:45:32'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:45:32'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:45:32'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:45:32'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:45:32'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:45:32'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:45:32'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:45:32'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:45:32'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:45:32'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:45:32'!
ERROR!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:45:32'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:45:38'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:45:38'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:45:38'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:45:38'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:45:38'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:45:38'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:45:38'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:45:38'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:45:38'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:45:38'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:45:38'!
ERROR!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:45:38'!
ERROR!
!StoreInterfaceTest methodsFor: 'clock' stamp: 'IO 12/1/2020 18:46:12'!
now
	^DateAndTime now.! !
!StoreInterfaceTest methodsFor: 'clock' stamp: 'IO 12/1/2020 18:46:24' prior: 50869850!
now
	^DateAndTime now + 30 minutes.! !

!classDefinition: #StoreInterfaceTest category: 'TusLibros' stamp: 'IO 12/1/2020 18:46:53'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clock clientsBook timeLeap'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'clock' stamp: 'IO 12/1/2020 18:46:52' prior: 50869854!
now
	^DateAndTime now + timeLeap.! !
!StoreInterfaceTest methodsFor: 'clock' stamp: 'IO 12/1/2020 18:47:05'!
leap: aTime

	clock := [DateAndTime now + aTime].! !
!StoreInterfaceTest methodsFor: 'clock' stamp: 'IO 12/1/2020 18:47:16' prior: 50869871!
leap: aTime

	timeLeap := [DateAndTime now + aTime].! !
!StoreInterfaceTest methodsFor: 'tests bad usage' stamp: 'IO 12/1/2020 18:47:33' prior: 50869740!
test07CannotModifyACartFromOutsideStore
	| aCartID listedCart aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := aStoreInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aStoreInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:47:34'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:47:34'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:47:34'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:47:34'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:47:34'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:47:34'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:47:34'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:47:34'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:47:34'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:47:34'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad usage' stamp: 'IO 12/1/2020 18:47:39' prior: 50868201!
test08CannotCreateCartWithInvalidClientId
	|aStoreInterface|

	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory validClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !
!StoreInterfaceTest methodsFor: 'tests bad usage' stamp: 'IO 12/1/2020 18:47:52' prior: 50869939!
test08CannotCreateCartWithInvalidClientId
	|aStoreInterface|

	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory validClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !
!StoreInterfaceTest methodsFor: 'tests bad usage' stamp: 'IO 12/1/2020 18:47:57' prior: 50868764!
test09CannotCreateCartWithInvalidClientPassword
	|aStoreInterface|

	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:47:58'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:47:58'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:47:58'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:47:58'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:47:58'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:47:58'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:47:58'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:47:58'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:47:58'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:47:58'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:48:11' prior: 50868230!
test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap30minIntoTheFuture.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
	
	! !
!StoreInterfaceTest methodsFor: 'set up' stamp: 'IO 12/1/2020 18:48:28' prior: 50868037 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	clock := [ DateAndTime now ].
	clientsBook := testObjectsFactory clients.
	timeLeap := 0 seconds
! !
!StoreInterfaceTest methodsFor: 'set up' stamp: 'IO 12/1/2020 18:48:29' prior: 50870044 overrides: 16927572!
setUp 

	testObjectsFactory := StoreTestObjectsFactory new.
	debitBehavior := [ :anAmount :aCreditCard | ].
	clock := [ DateAndTime now ].
	clientsBook := testObjectsFactory clients.
	timeLeap := 0 seconds.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:48:31'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:48:31'!
FAILURE!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:48:31'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:48:41' prior: 50870020!
test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 30 minutes.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
	
	! !

!methodRemoval: StoreInterfaceTest #currentTime stamp: 'IO 12/1/2020 18:49:04'!
currentTime
	^clock value.!

!methodRemoval: StoreInterfaceTest #leap30minIntoTheFuture stamp: 'IO 12/1/2020 18:49:06'!
leap30minIntoTheFuture

	clock := [DateAndTime now + 30 minutes].!
!StoreInterfaceTest methodsFor: 'clock' stamp: 'IO 12/1/2020 18:49:15' prior: 50869876!
leap: aTime

	timeLeap := DateAndTime now + aTime.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:49:19'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:49:19'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:49:19'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:49:19'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:49:19'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:49:19'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:49:19'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:49:19'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:49:19'!
PASSED!
!StoreInterfaceTest methodsFor: 'clock' stamp: 'IO 12/1/2020 18:49:36' prior: 50870181!
leap: aTime

	timeLeap := aTime.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:49:37'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:49:37'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:49:37'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:49:37'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:49:37'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:49:37'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:49:37'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:49:37'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:49:37'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:49:37'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:49:39'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:49:39'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:49:39'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:49:39'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:49:39'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:49:39'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:49:39'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:49:39'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:49:39'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:49:39'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:50:08' prior: 50869239!
test01ANewStoreHasNoActiveCarts
	|aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: 0 equals: aStoreInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:50:08'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:50:08'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:50:08'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:50:08'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:50:08'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:50:08'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:50:08'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:50:08'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:50:08'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:50:08'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:50:08'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:50:12' prior: 50869292!
test02ACartCanBeCreatedInAStore	|aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:50:13'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:50:13'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:50:13'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:50:13'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:50:13'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:50:13'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:50:13'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:50:13'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:50:13'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:50:13'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:50:13'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:50:17' prior: 50869496!
test03AStoreInterfaceCanCreateMultipleCarts	|aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.


	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	self assert: 2 equals: aStoreInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:50:17'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:50:17'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:50:17'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:50:17'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:50:17'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:50:17'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:50:17'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:50:17'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:50:17'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:50:17'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:50:17'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:50:25' prior: 50869554!
test04ANewCartInAStoreIsEmpty
	| aCartId aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.


	
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: (aStoreInterface listCart: aCartId) isEmpty.! !

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:50:26'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:50:26'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:50:26'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:50:26'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:50:26'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:50:26'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:50:26'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:50:26'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:50:26'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:50:26'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:50:26'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:50:36' prior: 50870292!
test01ANewStoreHasNoActiveCarts
	|aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.
	
	self assert: 0 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:50:42' prior: 50869608!
test05AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId1 := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aCartId2 := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	aStoreInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aStoreInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((aStoreInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((aStoreInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:50:43'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:50:43'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:50:43'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:50:43'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:50:43'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:50:43'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:50:43'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:50:43'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:50:43'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:50:43'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:50:43'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests ideal usage' stamp: 'IO 12/1/2020 18:51:17' prior: 50869679!
test06ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	self setUp.	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:51:18'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:51:18'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad usage' stamp: 'IO 12/1/2020 18:51:22' prior: 50869881!
test07CannotModifyACartFromOutsideStore
	| aCartID listedCart aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := aStoreInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aStoreInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:51:22'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:51:22'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:51:22'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:51:22'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:51:22'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:51:22'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:51:22'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:51:22'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:51:22'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:51:22'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:51:22'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad usage' stamp: 'IO 12/1/2020 18:51:26' prior: 50869954!
test08CannotCreateCartWithInvalidClientId
	|aStoreInterface|

	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory validClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:51:26'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:51:26'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:51:26'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:51:26'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:51:26'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:51:26'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:51:26'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:51:26'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:51:26'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:51:26'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:51:26'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad usage' stamp: 'IO 12/1/2020 18:51:30' prior: 50869969!
test09CannotCreateCartWithInvalidClientPassword
	|aStoreInterface|

	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:51:31'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:51:31'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:51:31'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:51:31'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:51:31'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:51:31'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:51:31'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:51:31'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:51:31'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:51:31'!
PASSED!

!testRun: #StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:51:31'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:52:24'!
test10CannotAdd30MinutesAfterCreation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 30 minutes.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
	
	! !

!methodRemoval: StoreInterfaceTest #test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated stamp: 'IO 12/1/2020 18:52:24'!
test10ACartCanNoLongerBeAddedToAfter30MinutesHavePassedSinceCreated
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 30 minutes.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
	
	!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 18:53:02' prior: 50868562!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self aCartIsNotValid: aCartId) ifTrue:[
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:53:29' prior: 50870814!
test10CannotAdd30MinutesAfterCreation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 30 minutes.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:53:39'!
test10CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 30 minutes.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:54:03' prior: 50870895!
test10CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 30 minutes.
	
	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test10CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:54:04'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 18:54:18' prior: 50870861!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self aCartIsNotValid: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 18:54:33' prior: 50868594!
listCart: aCartId 
	
	^(carts at: aCartId) copy.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 18:54:36' prior: 50870955!
listCart: aCartId

	
	
	^(carts at: aCartId) copy.! !
!StoreInterface methodsFor: 'testing' stamp: 'IO 12/1/2020 18:55:01' prior: 50869361!
aCartIsNotValid: aCartId 
	
	^clock now - (lastActionForCarts at: aCartId) >= 30 minutes.! !
!StoreInterface methodsFor: 'testing' stamp: 'IO 12/1/2020 18:55:12'!
isInvalidCart: aCartId 
	
	^clock now - (lastActionForCarts at: aCartId) >= 30 minutes.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 18:55:12' prior: 50870945!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self isInvalidCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !

!methodRemoval: StoreInterface #aCartIsNotValid: stamp: 'IO 12/1/2020 18:55:12'!
aCartIsNotValid: aCartId 
	
	^clock now - (lastActionForCarts at: aCartId) >= 30 minutes.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 18:55:16'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:55:16'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:55:16'!
FAILURE!
!StoreInterface methodsFor: 'testing' stamp: 'IO 12/1/2020 18:55:31'!
isExpiredCart: aCartId 
	
	^clock now - (lastActionForCarts at: aCartId) >= 30 minutes.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 18:55:31' prior: 50870977!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
	
	(carts at: aCartId) add: aQuantity of: anISBN.! !

!methodRemoval: StoreInterface #isInvalidCart: stamp: 'IO 12/1/2020 18:55:31'!
isInvalidCart: aCartId 
	
	^clock now - (lastActionForCarts at: aCartId) >= 30 minutes.!
!StoreInterface methodsFor: 'testing' stamp: 'IO 12/1/2020 18:55:42' prior: 50868558!
numberOfActiveCarts

	^carts size.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:55:43'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:55:43'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:55:43'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:55:43'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:55:43'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:55:43'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:55:43'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:55:43'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:55:43'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 18:55:43'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:55:43'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:55:43'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 18:56:08' prior: 50870960!
listCart: aCartId

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].

	^(carts at: aCartId) copy.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 18:56:09'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:56:09'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:57:19' prior: 50870918!
test10CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 20 minutes.
	
	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test10CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:57:23'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:57:28' prior: 50871239!
test10CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 20 minutes.

	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test10CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:57:30'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:57:37'!
test11CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 20 minutes.

	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!methodRemoval: StoreInterfaceTest #test10CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:57:37'!
test10CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 20 minutes.

	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 18:57:48' prior: 50871085!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].

	(carts at: aCartId) add: aQuantity of: anISBN.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 18:58:27' prior: 50871353!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
	
	lastActionForCarts add: (Association key: aCartId value: clock now).

	(carts at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:58:28'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:58:28'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:58:28'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:58:28'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:58:28'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:58:28'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:58:28'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:58:28'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:58:28'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 18:58:28'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:58:28'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:58:28'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 18:58:35' prior: 50871363!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].

	(carts at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:58:36'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:58:36'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:58:36'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:58:36'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:58:36'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:58:36'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:58:36'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:58:36'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:58:36'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 18:58:36'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:58:36'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:58:36'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:58:45' prior: 50871300!
test11CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface listCart: aCartId.
	
	self leap: 20 minutes.

	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:58:46'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:59:02' prior: 50871469!
test11CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	
	self leap: 30 minutes.

	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 18:59:02'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:59:02'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests non-Method functionality' stamp: 'IO 12/1/2020 18:59:17' prior: 50871499!
test11CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 30 minutes.

	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:59:17'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:59:18'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 18:59:20'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 18:59:20'!
PASSED!
!StoreInterfaceTest methodsFor: 'clock' stamp: 'IO 12/1/2020 19:00:11' prior: 50870217!
leap: aTime

	timeLeap := timeLeap + aTime.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:00:12'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:00:12'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:00:29' prior: 50871417!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
	
	

	(carts at: aCartId) add: aQuantity of: anISBN.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:00:41' prior: 50871765!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
	
	lastActionForCarts add: (Association key: aCartId value: clock now).

	(carts at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:00:55'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:00:55'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:01:03' prior: 50869448!
createCartFor: aUserID password: aPassword
	|aCartId|
	
	clientDatabase validateUser: aUserID andPassword: aPassword.
	
	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).
	lastActionForCarts add: (Association key: aCartId value: clock now).
	
	^aCartId.
! !

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:01:42'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:01:42'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:01:58' prior: 50868572!
checkOutCart: aCartId with: aCreditCard
	
	^(Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
	
! !
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 19:03:00'!
test12CannotCheckout30MinutesAfterLastOperation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 30 minutes.

	self should:[aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test12CannotCheckout30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCheckout30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:03:01'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCheckout30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:03:08'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotCheckout30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:03:08'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:03:41' prior: 50871926!
checkOutCart: aCartId with: aCreditCard
	
	^(Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
	! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:03:42' prior: 50872055!
checkOutCart: aCartId with: aCreditCard
	
	^(Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
! !
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 19:04:01'!
test11CannotCheckout30MinutesAfterLastOperation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 30 minutes.

	self should:[aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!methodRemoval: StoreInterfaceTest #test12CannotCheckout30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:04:01'!
test12CannotCheckout30MinutesAfterLastOperation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 30 minutes.

	self should:[aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
!
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 19:04:04'!
test12CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 30 minutes.

	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!methodRemoval: StoreInterfaceTest #test11CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:04:04'!
test11CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 30 minutes.

	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
!
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 19:04:15' prior: 50872075!
test11CannotCheckout30MinutesAfterLastOperation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 30 minutes.

	self should:[aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:04:16'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 19:04:32' prior: 50872185!
test11CannotCheckout30MinutesAfterLastOperation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 30 minutes.

	self should:[aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:04:33'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:04:33'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 19:04:53'!
test12CannotList30MinutesAfterLastOperation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 30 minutes.

	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!methodRemoval: StoreInterfaceTest #test12CannotList30MinutesAfterAdding stamp: 'IO 12/1/2020 19:04:53'!
test12CannotList30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 30 minutes.

	self should:[aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
!
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 19:05:00'!
test11CannotCheckout30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 30 minutes.

	self should:[aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!methodRemoval: StoreInterfaceTest #test11CannotCheckout30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:05:00'!
test11CannotCheckout30MinutesAfterLastOperation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 30 minutes.

	self should:[aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
!
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 19:06:11' prior: 50872328!
test12CannotList30MinutesAfterLastOperation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self leap: 30 minutes.

	self should: [aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 19:07:19'!
test13CanListDuring30MinutesAfterLastListing
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
! !

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:07:20'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:07:44' prior: 50871147!
listCart: aCartId

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
	
		lastActionForCarts add: (Association key: aCartId value: clock now).

	^(carts at: aCartId) copy.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:07:45'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:07:45'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:07:49' prior: 50872484!
listCart: aCartId

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
	
	lastActionForCarts add: (Association key: aCartId value: clock now).

	^(carts at: aCartId) copy.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:07:49'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:07:49'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:07:49'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:07:49'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:07:50'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:07:50'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:08:26'!
afterUseCart: aCartId
	lastActionForCarts add: (Association key: aCartId value: clock now).
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:08:39'!
beforeUsingCart: aCartId
	lastActionForCarts add: (Association key: aCartId value: clock now).
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:08:44'!
afterUsingCart: aCartId
	lastActionForCarts add: (Association key: aCartId value: clock now).
! !

!methodRemoval: StoreInterface #afterUseCart: stamp: 'IO 12/1/2020 19:08:44'!
afterUseCart: aCartId
	lastActionForCarts add: (Association key: aCartId value: clock now).
!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:08:57' prior: 50872602!
beforeUsingCart: aCartId

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:09:58'!
resetLastCartUsage: aCartId
	lastActionForCarts add: (Association key: aCartId value: clock now).
! !

!methodRemoval: StoreInterface #afterUsingCart: stamp: 'IO 12/1/2020 19:09:58'!
afterUsingCart: aCartId
	lastActionForCarts add: (Association key: aCartId value: clock now).
!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:10:08'!
validateCart: aCartId

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
! !

!methodRemoval: StoreInterface #beforeUsingCart: stamp: 'IO 12/1/2020 19:10:08'!
beforeUsingCart: aCartId

	(self isExpiredCart: aCartId) ifTrue: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:10:19' prior: 50871776!
addToCart: aCartId book: anISBN quantity: aQuantity 

	self validateCart: aCartId.
	
	lastActionForCarts add: (Association key: aCartId value: clock now).

	(carts at: aCartId) add: aQuantity of: anISBN.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:10:20'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:10:20'!
PASSED!
!StoreInterface methodsFor: 'testing' stamp: 'IO 12/1/2020 19:11:10' prior: 50868549!
hasMadeTheSale: aSale

	^salesBook includes: aSale.! !
!StoreInterface methodsFor: 'testing' stamp: 'IO 12/1/2020 19:11:15' prior: 50868553!
isActiveCart: aCartID 
	
	^carts includesKey: aCartID.! !
!StoreInterface methodsFor: 'testing' stamp: 'IO 12/1/2020 19:11:16' prior: 50872714!
isActiveCart: aCartID 
	
	^carts includesKey: aCartID.
! !
!StoreInterface methodsFor: 'cart invalidation' stamp: 'IO 12/1/2020 19:12:07'!
afterCartUsage: aCartId
	lastActionForCarts add: (Association key: aCartId value: clock now).
! !

!methodRemoval: StoreInterface #resetLastCartUsage: stamp: 'IO 12/1/2020 19:12:07'!
resetLastCartUsage: aCartId
	lastActionForCarts add: (Association key: aCartId value: clock now).
!
!StoreInterface methodsFor: 'cart invalidation' stamp: 'IO 12/1/2020 19:12:19'!
setCartUsageTime: aCartId
	lastActionForCarts add: (Association key: aCartId value: clock now).
! !

!methodRemoval: StoreInterface #afterCartUsage: stamp: 'IO 12/1/2020 19:12:19'!
afterCartUsage: aCartId
	lastActionForCarts add: (Association key: aCartId value: clock now).
!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:12:38' prior: 50872654!
addToCart: aCartId book: anISBN quantity: aQuantity 

	self validateCart: aCartId.
	
	self setCartUsageTime: aCartId.

	(carts at: aCartId) add: aQuantity of: anISBN.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:12:48' prior: 50872748!
addToCart: aCartId book: anISBN quantity: aQuantity 

	self validateCart: aCartId.

	(carts at: aCartId) add: aQuantity of: anISBN.

	self setCartUsageTime: aCartId.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:12:53'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:12:53'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:13:34' prior: 50871872!
createCartFor: aUserID password: aPassword
	|aCartId|
	
	clientDatabase validateUser: aUserID andPassword: aPassword.
	
	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).
	
	self setCartUsageTime: aCartId.
	
	^aCartId.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:13:34'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:13:34'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:13:34'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:13:34'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:13:34'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:13:34'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:13:34'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:13:34'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:13:34'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:13:34'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:13:35'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:13:35'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:13:35'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:13:47' prior: 50872540!
listCart: aCartId

	self validateCart: aCartId.
	
	lastActionForCarts add: (Association key: aCartId value: clock now).

	^(carts at: aCartId) copy.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:14:20' prior: 50872868!
listCart: aCartId

	| cart |
	self validateCart: aCartId.
	
	lastActionForCarts add: (Association key: aCartId value: clock now).

	cart := (carts at: aCartId) copy.
	
	self setCartUsageTime: aCartId.
	
	^cart.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:14:23' prior: 50872876!
listCart: aCartId

	| cart |

	self validateCart: aCartId.
	
	lastActionForCarts add: (Association key: aCartId value: clock now).

	cart := (carts at: aCartId) copy.
	
	self setCartUsageTime: aCartId.
	
	^cart.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:14:23'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:14:23'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:14:44' prior: 50872886!
listCart: aCartId

	| cart |

	self validateCart: aCartId.

	cart := (carts at: aCartId) copy.
	
	self setCartUsageTime: aCartId.
	
	^cart.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:14:45'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:14:45'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:15:30'!
addCart
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	^aCartId.
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/1/2020 19:15:55'!
createCart
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	^aCartId.
! !

!methodRemoval: StoreInterface #addCart stamp: 'IO 12/1/2020 19:15:55'!
addCart
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	^aCartId.
!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:16:09' prior: 50872811!
createCartFor: aUserID password: aPassword
	|aCartId|
	
	clientDatabase validateUser: aUserID andPassword: aPassword.
	
	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).
	

	
	^aCartId.
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/1/2020 19:16:14' prior: 50873000!
createCart
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.

	^aCartId.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:16:33' prior: 50873014!
createCartFor: aUserID password: aPassword
	|aCartId|
	
	clientDatabase validateUser: aUserID andPassword: aPassword.

	^self createCart.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:16:37' prior: 50873032!
createCartFor: aUserID password: aPassword
	
	clientDatabase validateUser: aUserID andPassword: aPassword.

	^self createCart.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:16:38'!
PASSED!

[:item | item + 1]!

[:item | item + 1]!

[:item | item + 1] value!

[:item | item + 1] valueWithArguments: (1)!

[:item | item + 1] valueWithArguments: #(1)!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:20:39'!
do: anOperation onCart: aCartId

	self validateCart: aCartId.
	self setCartUsageTime: aCartId.

	^anOperation valueWithArguments: #(aCartId).
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:21:32' prior: 50872757!
addToCart: aCartId book: anISBN quantity: aQuantity 

	self do: [(carts at: aCartId) add: aQuantity of: anISBN] onCart: aCartId.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:21:42' prior: 50873097!
do: anOperation onCart: aCartId

	self validateCart: aCartId.
	self setCartUsageTime: aCartId.

	^anOperation value.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:21:42'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:21:42'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:22:20' prior: 50872941!
listCart: aCartId

	^self do: [(carts at: aCartId) copy] onCart: aCartId.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:22:20'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:22:20'!
PASSED!
!StoreInterface methodsFor: 'testing' stamp: 'IO 12/1/2020 19:23:14' prior: 50871079!
isExpiredCart: aCartId 
	
	^'a'.! !
!StoreInterface methodsFor: 'cart invalidation' stamp: 'IO 12/1/2020 19:23:42' prior: 50872639!
validateCart: aCartId

	(clock now - (lastActionForCarts at: aCartId) < 30 minutes) ifFalse: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:23:43'!
PASSED!

!methodRemoval: StoreInterface #isExpiredCart: stamp: 'IO 12/1/2020 19:23:48'!
isExpiredCart: aCartId 
	
	^'a'.!
!StoreInterfaceTest methodsFor: 'nil' stamp: 'IO 12/1/2020 19:28:42'!
test14clientHasinitialyNoPurchases

	! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/1/2020 19:30:11'!
test14clientHasInitialyNoPurchases

	! !

!methodRemoval: StoreInterfaceTest #test14clientHasinitialyNoPurchases stamp: 'IO 12/1/2020 19:30:11'!
test14clientHasinitialyNoPurchases

	!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:31:08' prior: 50870341!
test02ACartCanBeCreatedInAStore
	|aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/1/2020 19:31:30' prior: 50873281!
test14clientHasInitialyNoPurchases

	|aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/1/2020 19:31:33' prior: 50873304!
test14clientHasInitialyNoPurchases

	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:31:36' prior: 50870503!
test01ANewStoreHasNoActiveCarts
	|aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: DateAndTime.
	
	self assert: 0 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:31:40' prior: 50873290!
test02ACartCanBeCreatedInAStore
	|aStoreInterface|
	

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:31:41' prior: 50873341!
test02ACartCanBeCreatedInAStore
	|aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:31:50' prior: 50870393!
test03AStoreInterfaceCanCreateMultipleCarts
	|aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.


	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	self assert: 2 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:31:52' prior: 50873367!
test03AStoreInterfaceCanCreateMultipleCarts
	|aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.


	aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	self assert: 2 equals: aStoreInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:31:53'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:31:53'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:32:02' prior: 50870450!
test04ANewCartInAStoreIsEmpty
	| aCartId aStoreInterface|
	
	self setUp.
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.


	
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: (aStoreInterface listCart: aCartId) isEmpty.! !
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:32:03' prior: 50873455!
test04ANewCartInAStoreIsEmpty
	| aCartId aStoreInterface|
	

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.


	
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: (aStoreInterface listCart: aCartId) isEmpty.! !

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:32:05'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:32:05'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:32:11' prior: 50870514!
test05AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId1 := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aCartId2 := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	aStoreInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aStoreInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((aStoreInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((aStoreInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:32:12'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:32:12'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:32:17' prior: 50870584!
test06ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID with: (testObjectsFactory notExpiredCreditCard).
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:32:18'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:32:18'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:32:22' prior: 50870644!
test07CannotModifyACartFromOutsideStore
	| aCartID listedCart aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := aStoreInterface listCart: aCartID.
	
	listedCart add: 10 of: testObjectsFactory itemSellByTheStore.

	self assert: 2 equals: ((aStoreInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:32:23'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:32:23'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:32:27' prior: 50870706!
test08CannotCreateCartWithInvalidClientId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory validClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:32:27'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:32:31' prior: 50870760!
test09CannotCreateCartWithInvalidClientPassword
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:32:31'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:32:31'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/1/2020 19:35:30' prior: 50873318!
test14clientHasInitialyNoPurchases
"
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.
"! !

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:35:34'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:35:34'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:40:54' prior: 50873331!
test01ANewStoreHasNoActiveCarts
	|aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: 0 equals: aStoreInterface numberOfActiveCarts.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:40:55'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:40:55'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 19:41:02' prior: 50873965!
test01ANewStoreHasNoActiveCarts

	|aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: 0 equals: aStoreInterface numberOfActiveCarts.! !
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 19:41:26' prior: 50870872!
test10CannotAdd30MinutesAfterCreation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 30 minutes.
	
	self should:[aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:41:28'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:41:28'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:48:08'!
test14CannotListNotExistentCartId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface listCart: 1]
		raise: Error
		withMessageText: StoreInterface invalidClientId.

	! !
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:48:12' prior: 50874110!
test14CannotListNotExistentCartId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface listCart: 1]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!testRun: #StoreInterfaceTest #test14CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:48:13'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:49:15' prior: 50873164!
listCart: aCartId

	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	^self do: [(carts at: aCartId) copy] onCart: aCartId.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:49:15'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:49:16'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:49:16'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:49:16'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:49:16'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:49:41'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:49:41'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:50:41'!
test15CannotAddOnNotExistentCartId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface addToCart: 1 book: testObjectsFactory itemSellByTheStore quantity: 1]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!testRun: #StoreInterfaceTest #test15CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:50:42'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:51:04' prior: 50873105!
addToCart: aCartId book: anISBN quantity: aQuantity 

	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	self do: [(carts at: aCartId) add: aQuantity of: anISBN] onCart: aCartId.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:51:05'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:51:05'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:51:57' prior: 50874247!
test15CannotAddOnNotExistentCartId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface checkOutCart: 1 with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!testRun: #StoreInterfaceTest #test15CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:51:58'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:51:58'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:52:04'!
test14CannotAddOnNotExistentCartId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface checkOutCart: 1 with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!methodRemoval: StoreInterfaceTest #test15CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:52:04'!
test15CannotAddOnNotExistentCartId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface checkOutCart: 1 with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:52:08'!
test15CannotListNotExistentCartId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface listCart: 1]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!methodRemoval: StoreInterfaceTest #test14CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:52:08'!
test14CannotListNotExistentCartId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface listCart: 1]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:52:15'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:52:15'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:52:27' prior: 50874135!
listCart: aCartId


	^self do: [(carts at: aCartId) copy] onCart: aCartId.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:52:30' prior: 50872065!
checkOutCart: aCartId with: aCreditCard
	
		(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	^(Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:52:31'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:52:31'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:52:31'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:52:51' prior: 50874511!
checkOutCart: aCartId with: aCreditCard
	
	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	^(Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:52:52'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:52:52'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:52:52'!
FAILURE!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:53:05'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:53:05'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:53:05'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:53:47' prior: 50874582!
checkOutCart: aCartId with: aCreditCard

	^(Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:53:51' prior: 50874505!
listCart: aCartId

	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	^self do: [(carts at: aCartId) copy] onCart: aCartId.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:53:52'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:53:52'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:53:56' prior: 50874722!
listCart: aCartId

	
	^self do: [(carts at: aCartId) copy] onCart: aCartId.! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/1/2020 19:54:05' prior: 50873112!
do: anOperation onCart: aCartId

	self validateCart: aCartId.
	self setCartUsageTime: aCartId.
	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].

	^anOperation value.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:54:05'!
FAILURE!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:54:05'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:54:05'!
FAILURE!
!StoreInterface methodsFor: 'private' stamp: 'IO 12/1/2020 19:54:13' prior: 50874791!
do: anOperation onCart: aCartId

	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	self validateCart: aCartId.
	self setCartUsageTime: aCartId.


	^anOperation value.
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/1/2020 19:54:15' prior: 50874856!
do: anOperation onCart: aCartId

	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	self validateCart: aCartId.
	self setCartUsageTime: aCartId.

	^anOperation value.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:54:15'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:54:15'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:54:21' prior: 50874263!
addToCart: aCartId book: anISBN quantity: aQuantity 

	self do: [(carts at: aCartId) add: aQuantity of: anISBN] onCart: aCartId.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:54:22'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:54:22'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 19:54:29' prior: 50874785!
listCart: aCartId

	^self do: [(carts at: aCartId) copy] onCart: aCartId.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:54:29'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:54:29'!
PASSED!
!StoreInterface methodsFor: 'private' stamp: 'IO 12/1/2020 19:54:52' prior: 50874866!
do: anOperation onCart: aCartId

	self validateCart: aCartId.
	self setCartUsageTime: aCartId.

	^anOperation value.
! !
!StoreInterface methodsFor: 'cart invalidation' stamp: 'IO 12/1/2020 19:55:01' prior: 50873220!
validateCart: aCartId

	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	(clock now - (lastActionForCarts at: aCartId) < 30 minutes) ifFalse: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 19:55:02'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 19:55:02'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:58:08'!
test16CannotListAfterCheckout
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard.
	
	self
		should: [aStoreInterface listCart: aCartId]
		raise: Error
		withMessageText: StoreInterface cartLAlreadyCheckedOut.

	! !

!testRun: #StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 19:58:11'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 19:59:21' prior: 50875129!
test16CannotListAfterCheckout
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.
	aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard.

	self
		should: [aStoreInterface listCart: aCartId]
		raise: Error
		withMessageText: StoreInterface cartLAlreadyCheckedOut.

	! !

!testRun: #StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 19:59:21'!
ERROR!
!StoreInterface class methodsFor: 'error descriptions' stamp: 'IO 12/1/2020 19:59:35'!
cartLAlreadyCheckedOut
	self shouldBeImplemented.! !
!StoreInterface class methodsFor: 'error descriptions' stamp: 'IO 12/1/2020 19:59:48' prior: 50875175!
cartLAlreadyCheckedOut
	^'Cart was already cehcked out'.! !

!testRun: #StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 19:59:50'!
FAILURE!
!StoreInterface class methodsFor: 'error descriptions' stamp: 'IO 12/1/2020 20:00:09'!
cartAlreadyCheckedOut
	^'Cart was already cehcked out'.! !
!StoreInterfaceTest methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:00:09' prior: 50875151!
test16CannotListAfterCheckout
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.
	aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard.

	self
		should: [aStoreInterface listCart: aCartId]
		raise: Error
		withMessageText: StoreInterface cartAlreadyCheckedOut.

	! !

!methodRemoval: StoreInterface class #cartLAlreadyCheckedOut stamp: 'IO 12/1/2020 20:00:09'!
cartLAlreadyCheckedOut
	^'Cart was already cehcked out'.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 20:00:12'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 20:00:12'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 20:00:12'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 20:01:08' prior: 50875194!
test16CannotListAfterCheckout
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.
	aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard.

	self
		should: [aStoreInterface listCart: aCartId]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!methodRemoval: StoreInterface class #cartAlreadyCheckedOut stamp: 'IO 12/1/2020 20:01:13'!
cartAlreadyCheckedOut
	^'Cart was already cehcked out'.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 20:01:17'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 20:01:17'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 20:01:17'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:01:51' prior: 50874712!
checkOutCart: aCartId with: aCreditCard
	
	| total |
	total := (Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
	
	^total
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:02:51' prior: 50875459!
checkOutCart: aCartId with: aCreditCard
	
	| total |
	total := (Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
	carts remove: aCartId.
	^total
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:02:51'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 20:02:51'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 20:02:51'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:03:18'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:03:18'!
ERROR!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:03:40'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 20:03:40'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 20:03:40'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:03:44'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:03:44'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:04:08' prior: 50875470!
checkOutCart: aCartId with: aCreditCard
	
	| total |
	total := (Cashier
		toCheckout: (self listCart: aCartId)
		charging: aCreditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
	carts removeKey: aCartId.
	^total
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 20:04:09'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 20:04:09'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 20:04:56'!
test16CannotOperateAfterCheckout
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.
	aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard.

	self
		should: [aStoreInterface listCart: aCartId]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!methodRemoval: StoreInterfaceTest #test16CannotListAfterCheckout stamp: 'IO 12/1/2020 20:04:56'!
test16CannotListAfterCheckout
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.
	aStoreInterface checkOutCart: aCartId with: testObjectsFactory notExpiredCreditCard.

	self
		should: [aStoreInterface listCart: aCartId]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 20:07:10'!
test14CannotAddOnNotExistentCart
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface checkOutCart: 1 with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!methodRemoval: StoreInterfaceTest #test14CannotAddOnNotExistentCartId stamp: 'IO 12/1/2020 20:07:10'!
test14CannotAddOnNotExistentCartId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface checkOutCart: 1 with: testObjectsFactory notExpiredCreditCard]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 20:07:14'!
test15CannotListNotExistentCart
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface listCart: 1]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!methodRemoval: StoreInterfaceTest #test15CannotListNotExistentCartId stamp: 'IO 12/1/2020 20:07:14'!
test15CannotListNotExistentCartId
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface listCart: 1]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	!

----SNAPSHOT----(1 December 2020 20:10:44) CuisUniversity-4384.image priorSource: 17155564!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/1/2020 20:12:42' prior: 50873618!
test06ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2)).! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:12:49'!
ERROR!
!CreditCard methodsFor: 'nil' stamp: 'IO 12/1/2020 20:13:47'!
ccn
	^'5400000000000001'! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:14:15'!
ccd
	^expiration! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:14:21'!
cced
	^expiration! !

!methodRemoval: CreditCard #ccd stamp: 'IO 12/1/2020 20:14:22'!
ccd
	^expiration!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:14:44'!
cco
	^'PEPE SANCHEZ'.! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:14:57'!
ERROR!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:15:14'!
checkOutCart: aSmallInteger ccn: aString cced: aMonth cco: aString4 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:15:50' prior: 50875821!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner 
	self checkOutCart: aCartId with: aCCExpirationDate.! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:15:52'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:15:55'!
ERROR!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:16:35' prior: 50875828!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner 
	self checkOutCart: aCartId with: (CreditCard with: aCCExpirationDate).! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:16:43'!
ERROR!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:16:59' prior: 50875842!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner 
	self checkOutCart: aCartId with: (CreditCard expiringOn: aCCExpirationDate).! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:17:00'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:17:03'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:17:03'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 20:17:48' prior: 50875681!
test16CannotOperateAfterCheckout
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.

	aStoreInterface checkOutCart: aCartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	self
		should: [aStoreInterface listCart: aCartId]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:17:49'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:17:49'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'IO 12/1/2020 20:18:12' prior: 50872381!
test11CannotCheckout30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 30 minutes.

	self should:[
		aStoreInterface checkOutCart: aCartId
			ccn: testObjectsFactory notExpiredCreditCard ccn
			cced: testObjectsFactory notExpiredCreditCard cced
			cco: testObjectsFactory notExpiredCreditCard cco.]
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:18:13'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:18:13'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:18:34' prior: 50875611!
checkOutCart: aCartId with: aCreditCard

! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:18:50' prior: 50875854!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner 

	
	| total |
	total := (Cashier
		toCheckout: (self listCart: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
	carts removeKey: aCartId.
	^total
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:18:51' prior: 50876162!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner 

	
	| total |
	total := (Cashier
		toCheckout: (self listCart: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
	carts removeKey: aCartId.

	^total
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:18:54'!
FAILURE!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:18:54'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:18:54'!
FAILURE!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:19:08'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:19:08'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:19:08'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:19:08'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:19:08'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:19:08'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:19:08'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:19:08'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:19:09'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:19:09'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:19:09'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:19:09'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:19:09'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:19:09'!
FAILURE!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:19:09'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:19:09'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:19:09'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:19:09'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:19:26'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:19:27'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:19:27'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:19:27'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:19:27'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:19:27'!
FAILURE!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:19:27'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:19:27'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:19:27'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:19:27'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/1/2020 20:21:05' prior: 50875723!
test14CannotAddOnNotExistentCart
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface addToCart: 1 book: testObjectsFactory itemSellByTheStore quantity: 1]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:21:06'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:21:06'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'IO 12/1/2020 20:23:33' prior: 50867981!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:24:30' prior: 50876176!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner 

	
	| total |

	total := (Cashier
		toCheckout: (self listCart: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.
	carts removeKey: aCartId.

	^total
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:24:34' prior: 50876521!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner 

	
	| total |

	total := (Cashier
		toCheckout: (self listCart: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.

	carts removeKey: aCartId.

	^total
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:24:45' prior: 50876535!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner

	
	| total |

	total := (Cashier
		toCheckout: (self listCart: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.

	carts removeKey: aCartId.

	^total
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/1/2020 20:27:05'!
test17clientHasInitialyNoPurchases
"
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.
"! !

!methodRemoval: StoreInterfaceTest #test14clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:27:05'!
test14clientHasInitialyNoPurchases
"
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self assert: 1 equals: aStoreInterface numberOfActiveCarts.
"!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/1/2020 20:28:29' prior: 50876563!
test17clientHasInitialyNoPurchases

	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: (OrderedCollection with: 0) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
! !

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:28:31'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:28:41'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:28:53'!
listPurchasesFor: aString password: aString2 
	self shouldBeImplemented.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:28:56' prior: 50876609!
listPurchasesFor: aString password: aString2 
	^0.! !

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:28:57'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:29:26' prior: 50876615!
listPurchasesFor: aString password: aString2 
	^OrderedCollection with: 0.! !

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:29:27'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:29:27'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/1/2020 20:29:38'!
test18clientPurchases

	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: (OrderedCollection with: 0) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/1/2020 20:30:33'!
test18clientAfterCheckoutHasPurchasedBooks

	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: (OrderedCollection with: 0) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
! !

!methodRemoval: StoreInterfaceTest #test18clientPurchases stamp: 'IO 12/1/2020 20:30:54'!
test18clientPurchases

	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: (OrderedCollection with: 0) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/1/2020 20:32:00' prior: 50876702!
test18clientAfterCheckoutHasPurchasedBooks

	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: (OrderedCollection
		with: testObjectsFactory itemSellByTheStore
		with: 2
		with: testObjectsFactory anotherItemSellByTheStore 
		with: 2
		with: testObjectsFactory itemSellByTheStorePrice * 2 + testObjectsFactory anotherItemSellByTheStorePrice * 2
	) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:32:01'!
FAILURE!

!methodRemoval: StoreInterface #checkOutCart:with: stamp: 'IO 12/1/2020 20:32:18'!
checkOutCart: aCartId with: aCreditCard

!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:33:06' prior: 50876549!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner

	| total |

	total := (Cashier
		toCheckout: (self listCart: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.

	carts removeKey: aCartId.

	^total
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:33:07'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:33:07'!
FAILURE!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:33:07'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:33:29' prior: 50876756!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner

	| total |

	total := (Cashier
		toCheckout: (self listCart: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.

	carts removeKey: aCartId.

	^total
! !
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/1/2020 20:33:59' prior: 50869310!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.
! !
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/1/2020 20:34:10' prior: 50876849!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.

! !
!Sale class methodsFor: 'instance creation' stamp: 'IO 12/1/2020 20:36:39'!
withProducts: aBagOfProducts withTotal: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeWithProducts: aBagOfProducts withTotal: aTotal! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'IO 12/1/2020 20:37:00'!
Object subclass: #Sale
	instanceVariableNames: 'total products'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'IO 12/1/2020 20:36:59'!
initializeWithProducts: aBagOfProducts withTotal: aTotal
	products := aBagOfProducts.
	total := aTotal ! !
!Sale methodsFor: 'initialization' stamp: 'IO 12/1/2020 20:37:04' prior: 50876892!
initializeWithProducts: aBagOfProducts withTotal: aTotal

	products := aBagOfProducts.
	total := aTotal ! !
!Sale methodsFor: 'initialization' stamp: 'IO 12/1/2020 20:37:07' prior: 50876898!
initializeWithProducts: aBagOfProducts withTotal: aTotal

	products := aBagOfProducts.
	total := aTotal.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:37:08'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:37:08'!
FAILURE!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:37:08'!
FAILURE!
!Cashier methodsFor: 'checkout - private' stamp: 'IO 12/1/2020 20:41:03' prior: 50868361!
createSale
	| sale |
	sale := Sale of: total.
	^sale.
	
! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 20:41:04'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 20:41:04'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 20:41:04'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 20:41:04'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 20:41:04'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 20:41:04'!
PASSED!
!Cashier methodsFor: 'checkout - private' stamp: 'IO 12/1/2020 20:41:19' prior: 50876976!
createSale
	| sale |
	sale := Sale of: total.
	cart addToSale: sale.
	^sale.

! !
!Cart methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:42:16'!
addToSale: aSale

	aSale addItems: items copy.
! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'IO 12/1/2020 20:43:16'!
Object subclass: #Sale
	instanceVariableNames: 'total products items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'nil' stamp: 'IO 12/1/2020 20:43:08'!
addItems: aBagOfItems

	items := aBagOfItems.
! !
!Cart methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:44:24' prior: 50877006!
addToSale: aSale

	aSale addItems: (Bag from: items copy).
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 20:44:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 20:44:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 20:44:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 20:44:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 20:44:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 20:44:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 20:44:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 20:44:25'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 20:44:41'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 20:44:41'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 20:44:41'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:44:41'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:44:41'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:44:41'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:44:41'!
FAILURE!

Bag from: items!

Bag!

Bag new addAll: items!

items!
!Cart methodsFor: 'as yet unclassified' stamp: 'IO 12/1/2020 20:48:49' prior: 50877022!
addToSale: aSale

	| itemsBag |
	itemsBag := Bag new.
	items copy do: [ :item | itemsBag add: item].
	aSale addItems: itemsBag.
! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 20:48:53'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:48:56'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:48:56'!
FAILURE!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:48:56'!
FAILURE!
!Sale methodsFor: 'total' stamp: 'IO 12/1/2020 20:49:11' prior: 50868486!
total

	^ total! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:51:18' prior: 50876623!
listPurchasesFor: aString password: aString2 
	| purchases |
	purchases := OrderedCollection new.
	salesBook do: [ :sale | sale listPurchasesOn: purchases ].
	purchases add: (salesBook sum: [ :sale | sale total ]).
	^OrderedCollection with: 0.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/1/2020 20:52:48' prior: 50877286!
listPurchasesFor: aString password: aString2 
	| purchases |
	(salesBook size = 0) ifTrue: [^OrderedCollection with: 0.].

	purchases := OrderedCollection new.
	salesBook first listPurchasesOn: purchases.
	purchases add: (salesBook sum: [ :sale | sale total ]).
	! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:53:19'!
FAILURE!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:53:19'!
FAILURE!

!methodRemoval: Cart #addToSale: stamp: 'IO 12/1/2020 20:56:38'!
addToSale: aSale

	| itemsBag |
	itemsBag := Bag new.
	items copy do: [ :item | itemsBag add: item].
	aSale addItems: itemsBag.
!

!methodRemoval: Sale #initializeWithProducts:withTotal: stamp: 'IO 12/1/2020 20:56:49'!
initializeWithProducts: aBagOfProducts withTotal: aTotal

	products := aBagOfProducts.
	total := aTotal.
!

!methodRemoval: Sale #addItems: stamp: 'IO 12/1/2020 20:56:51'!
addItems: aBagOfItems

	items := aBagOfItems.
!
!Cashier methodsFor: 'checkout - private' stamp: 'IO 12/1/2020 20:57:01' prior: 50877001!
createSale
	| sale |
	sale := Sale of: total.

	^sale.

! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:57:15'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:57:15'!
FAILURE!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:57:15'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/1/2020 20:57:27' prior: 50876728!
test18clientAfterCheckoutHasPurchasedBooks

	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	"
	self assert: (OrderedCollection
		with: testObjectsFactory itemSellByTheStore
		with: 2
		with: testObjectsFactory anotherItemSellByTheStore 
		with: 2
		with: testObjectsFactory itemSellByTheStorePrice * 2 + testObjectsFactory anotherItemSellByTheStorePrice * 2
	) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)"
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/1/2020 20:57:31'!
PASSED!

----SNAPSHOT----(1 December 2020 21:09:14) CuisUniversity-4384.image priorSource: 17411790!

----STARTUP---- (2 December 2020 11:40:22) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!


!classRemoval: #StoreTestObjectsFactory stamp: 'LH 12/2/2020 11:40:28'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreInterface stamp: 'LH 12/2/2020 11:40:28'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'LH 12/2/2020 11:40:29'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'LH 12/2/2020 11:40:29'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'LH 12/2/2020 11:40:29'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'LH 12/2/2020 11:40:30'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreInterfaceTest stamp: 'LH 12/2/2020 11:40:30'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clock clientsBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'LH 12/2/2020 11:40:31'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'LH 12/2/2020 11:40:31'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\TusLibros-3.st----!
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/2/2020 11:41:40' prior: 50888363!
listPurchasesFor: aUserId password: aString2 
	| purchases |
	(salesBook size = 0) ifTrue: [^OrderedCollection with: 0.].

	purchases := OrderedCollection new.
	salesBook first listPurchasesOn: purchases.
	purchases add: (salesBook sum: [ :sale | sale total ]).
	! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/2/2020 11:41:50' prior: 50888581!
listPurchasesFor: aUserId password: aPassword 
	| purchases |
	(salesBook size = 0) ifTrue: [^OrderedCollection with: 0.].

	purchases := OrderedCollection new.
	salesBook first listPurchasesOn: purchases.
	purchases add: (salesBook sum: [ :sale | sale total ]).
	! !
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/2/2020 11:47:28' prior: 50887779!
test07CannotModifyACartFromOutsideStore
	| aCartID listedCart aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	listedCart := aStoreInterface listCart: aCartID.
	
	listedCart add: testObjectsFactory itemSellByTheStore withOccurrences: 2.

	self assert: 2 equals: ((aStoreInterface listCart: aCartID) occurrencesOf: testObjectsFactory itemSellByTheStore).! !

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/2/2020 11:47:30'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/2/2020 11:48:16' prior: 50888358!
listCart: aCartId

	^self do: [(carts at: aCartId) listItems] onCart: aCartId.! !

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/2/2020 11:48:21'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'LH 12/2/2020 11:48:28'!
listItems
	self shouldBeImplemented.! !
!Cart methodsFor: 'accessing' stamp: 'LH 12/2/2020 11:48:50' prior: 50888639!
listItems
	^ items copy.! !

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/2/2020 11:48:54'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/2/2020 11:48:54'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/2/2020 11:48:55'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/2/2020 11:48:55'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/2/2020 11:48:55'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/2/2020 11:48:58'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/2/2020 11:49:55' prior: 50888338!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner

	| total |

	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.

	carts removeKey: aCartId.

	^total
! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/2/2020 11:49:56'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/2/2020 11:49:59'!
PASSED!
!Cart methodsFor: 'initialization' stamp: 'LH 12/2/2020 11:50:45' prior: 50888042!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !
!Cart methodsFor: 'adding' stamp: 'LH 12/2/2020 11:51:18' prior: 50888069!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items add: anItem withOccurrences: aQuantity.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LH 12/2/2020 11:51:26'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LH 12/2/2020 11:51:26'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LH 12/2/2020 11:51:26'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LH 12/2/2020 11:51:26'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LH 12/2/2020 11:51:26'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LH 12/2/2020 11:51:26'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LH 12/2/2020 11:51:26'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LH 12/2/2020 11:51:26'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/2/2020 11:52:48'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/2/2020 11:52:49'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/2/2020 11:52:49'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/2/2020 11:52:49'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/2/2020 11:55:04' prior: 50888716!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner

	| total |
	self validateCart: aCartId.
	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.

	carts removeKey: aCartId.

	^total
! !

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/2/2020 11:55:24'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LH 12/2/2020 11:55:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LH 12/2/2020 11:55:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LH 12/2/2020 11:55:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LH 12/2/2020 11:55:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/2/2020 11:55:30'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/2/2020 11:55:31'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/2/2020 11:55:31'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/2/2020 11:55:31'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/2/2020 11:55:31'!
PASSED!
!StoreInterface methodsFor: 'private' stamp: 'LH 12/2/2020 11:57:09' prior: 50888391!
createCart
	|aCartId|

	aCartId := carts keys size + 1.
	self do: [carts at: aCartId put: (Cart acceptingItemsOf: catalogue)] onCart: aCartId.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.

	^aCartId.
! !
!StoreInterface methodsFor: 'private' stamp: 'LH 12/2/2020 11:57:29' prior: 50889010!
createCart
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.

	^aCartId.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LH 12/2/2020 11:57:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LH 12/2/2020 11:57:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LH 12/2/2020 11:57:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LH 12/2/2020 11:57:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LH 12/2/2020 11:57:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LH 12/2/2020 11:57:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LH 12/2/2020 11:57:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LH 12/2/2020 11:57:38'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/2/2020 11:57:39'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/2/2020 11:57:39'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/2/2020 12:03:03' prior: 50887815!
test09CannotCreateCartWithInvalidClientPassword
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory invalidClientPassword]
		raise: Error
		withExceptionDo:[:anError |
			self assert: anError messageText equals: StoreInterface invalidClientId.
			self assert: 0 equals: aStoreInterface numberOfActiveCarts.].

	! !

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/2/2020 12:03:06'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/2/2020 12:04:24' prior: 50887829!
test14CannotAddOnNotExistentCart
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aStoreInterface addToCart: 1 book: testObjectsFactory itemSellByTheStore quantity: 1]
		raise: Error
		withMessageText: StoreInterface invalidCartId.

	! !

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/2/2020 12:04:25'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/2/2020 12:06:32' prior: 50887853!
test16CannotOperateAfterCheckout
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.

	aStoreInterface checkOutCart: aCartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	self
		should: [aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: StoreInterface invalidCartId.
			self assert: 0 equals: aStoreInterface numberOfActiveCarts].

	! !

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/2/2020 12:06:34'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/2/2020 12:06:38'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/2/2020 12:06:39'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/2/2020 12:06:39'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/2/2020 12:06:39'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/2/2020 12:06:39'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/2/2020 12:06:39'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'LH 12/2/2020 12:11:26'!
assertThatACart: aCartId fromTheStore: aStoreInterface IsNotValidAfter30MinutesWhenDoing: aStoreInterfaceAction
	
	self leap: 30 minutes.
	
	self should: aStoreInterfaceAction
		raise: Error
		withExceptionDo: [:anError |
				self assert: anError messageText equals: StoreInterface invalidCartOutOfTime.
				self deny: (aStoreInterface isActiveCart: aCartId).]
! !
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'LH 12/2/2020 12:12:39' prior: 50887877!
test10CannotAdd30MinutesAfterCreation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self  assertThatACart: aCartId
		fromTheStore: aStoreInterface 
		IsNotValidAfter30MinutesWhenDoing: [aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2].
	
! !

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/2/2020 12:12:41'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'LH 12/2/2020 12:13:40' prior: 50887899!
test11CannotCheckout30MinutesAfterAdding
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self  assertThatACart: aCartId
	fromTheStore: aStoreInterface 
	IsNotValidAfter30MinutesWhenDoing: [
			aStoreInterface checkOutCart: aCartId
				ccn: testObjectsFactory notExpiredCreditCard ccn
				cced: testObjectsFactory notExpiredCreditCard cced
				cco: testObjectsFactory notExpiredCreditCard cco.].
! !

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/2/2020 12:13:42'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests time invalidation' stamp: 'LH 12/2/2020 12:14:47' prior: 50887928!
test12CannotList30MinutesAfterLastOperation
	|aStoreInterface aCartId|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self andClock: self.
								
	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	self leap: 20 minutes.
	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 2.

	self leap: 20 minutes.
	
	aStoreInterface listCart: aCartId.
	
	self  assertThatACart: aCartId
		fromTheStore: aStoreInterface 
		IsNotValidAfter30MinutesWhenDoing: [aStoreInterface listCart: aCartId].! !

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/2/2020 12:14:49'!
PASSED!
!StoreInterface methodsFor: 'testing' stamp: 'LH 12/2/2020 12:16:25' prior: 50888318!
hasMadeTheSale: aSale

	^salesBook includes: aSale.! !
!StoreInterface methodsFor: 'testing' stamp: 'LH 12/2/2020 12:17:13' prior: 50888322!
isActiveCart: aCartID 
	"awnsers if there is a usable cart associated with a cart ID"
	^carts includesKey: aCartID.
! !
!StoreInterface methodsFor: 'testing' stamp: 'LH 12/2/2020 12:18:25' prior: 50888327!
numberOfActiveCarts
	"awnsers the number of carts that exist in the store"
	^carts size.! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/2/2020 12:19:22' prior: 50888331!
addToCart: aCartId book: anItem quantity: aQuantity 
	"adds a quantity of an item to the cart associated with a cart ID"
	self do: [(carts at: aCartId) add: aQuantity of: anItem] onCart: aCartId.
! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/2/2020 12:21:19' prior: 50888885!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total |
	self validateCart: aCartId.
	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.

	carts removeKey: aCartId.

	^total
! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/2/2020 12:22:59' prior: 50888351!
createCartFor: anUserID password: aPassword
	"creates a new cart for an user with a password"
	clientDatabase validateUser: anUserID andPassword: aPassword.

	^self createCart.
! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/2/2020 12:23:22' prior: 50888631!
listCart: aCartId
	"lists the contentes of the cart associated to a cart ID"
	^self do: [(carts at: aCartId) listItems] onCart: aCartId.! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/2/2020 12:23:54' prior: 50888593!
listPurchasesFor: aUserId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| purchases |
	(salesBook size = 0) ifTrue: [^OrderedCollection with: 0.].

	purchases := OrderedCollection new.
	salesBook first listPurchasesOn: purchases.
	purchases add: (salesBook sum: [ :sale | sale total ]).
	! !
!StoreInterface methodsFor: 'cart invalidation' stamp: 'LH 12/2/2020 12:24:51' prior: 50888374!
setCartUsageTime: aCartId
	"registers the current Date and Time as the last usage of the cart associated with a cart ID"
	lastActionForCarts add: (Association key: aCartId value: clock now).
! !
!StoreInterface methodsFor: 'cart invalidation' stamp: 'LH 12/2/2020 12:26:29' prior: 50888380!
validateCart: aCartId
	"validates if the cart associated with a cart ID is usable at this moment.
	In the case it is not, the cart is deleted from the list if necessary and an error is returned"
	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	(clock now - (lastActionForCarts at: aCartId) < 30 minutes) ifFalse: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
! !
!StoreInterface methodsFor: 'private' stamp: 'LH 12/2/2020 12:26:49' prior: 50889021!
createCart
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.

	^aCartId.
! !
!StoreInterface methodsFor: 'private' stamp: 'LH 12/2/2020 12:28:14' prior: 50888399!
do: anOperation onCart: aCartId
	"this method validates that we operate on a valid cart, then it sets the time of operation as the last known use of the cart and executes the operation"
	self validateCart: aCartId.
	self setCartUsageTime: aCartId.

	^anOperation value.
! !

----SNAPSHOT----(2 December 2020 12:28:29) CuisUniversity-4384.image priorSource: 17780880!

----QUIT----(2 December 2020 12:28:53) CuisUniversity-4384.image priorSource: 17850737!

----STARTUP---- (2 December 2020 21:21:36) as /Users/ilanolkies/uba/ingsoft1/macos64/CuisUniversity-4384.image!


!classRemoval: #StoreTestObjectsFactory stamp: 'IO 12/2/2020 21:21:47'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreInterface stamp: 'IO 12/2/2020 21:21:47'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'IO 12/2/2020 21:21:48'!
Object subclass: #Sale
	instanceVariableNames: 'total products items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'IO 12/2/2020 21:21:48'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'IO 12/2/2020 21:21:48'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'IO 12/2/2020 21:21:49'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreInterfaceTest stamp: 'IO 12/2/2020 21:21:49'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clock clientsBook timeLeap'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'IO 12/2/2020 21:21:49'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'IO 12/2/2020 21:21:50'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /Users/ilanolkies/uba/ingsoft1/ingeSoft-2020-2c/20-TusLibros-3/TusLibros-3.st----!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:27:09' prior: 50878291!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := testObjectsFactory itemSellByTheStorePrice * 2 + testObjectsFactory anotherItemSellByTheStorePrice * 2.

	self assert: #(items itemsTotal) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:27:25' prior: 50878916!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := testObjectsFactory itemSellByTheStorePrice * 2 + testObjectsFactory anotherItemSellByTheStorePrice * 2.

	self assert: #(items, itemsTotal) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:27:34' prior: 50878939!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := testObjectsFactory itemSellByTheStorePrice * 2 + testObjectsFactory anotherItemSellByTheStorePrice * 2.

	self assert: #(items itemsTotal) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:27:37'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 21:29:23' prior: 50878681!
listPurchasesFor: aUserId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| items itemsTotal |
	(salesBook size = 0) ifTrue: [^OrderedCollection with: 0.].

	items := Bag new.
	itemsTotal := 0.

	salesBook do: [ :sale |
		items addAll: sale lis
	]
	! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 21:31:44' prior: 50878988!
listPurchasesFor: aUserId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| items itemsTotal |
	(salesBook size = 0) ifTrue: [^OrderedCollection with: 0.].

	items := Bag new.
	itemsTotal := 0.

	salesBook do: [ :sale |
		items addAll: sale listItems.
		itemsTotal := itemsTotal + sale total.
	].

	^#(items, itemsTotal).
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 21:31:46'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:31:46'!
FAILURE!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:31:46'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 21:32:05' prior: 50879001!
listPurchasesFor: aUserId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| items itemsTotal |
	(salesBook size = 0) ifTrue: [#(nil, 0)].

	items := Bag new.
	itemsTotal := 0.

	salesBook do: [ :sale |
		items addAll: sale listItems.
		itemsTotal := itemsTotal + sale total.
	].

	^#(items, itemsTotal).
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:32:33' prior: 50878278!
test17clientHasInitialyNoPurchases

	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	self assert: #(Bag new, 0) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 21:32:46' prior: 50879082!
listPurchasesFor: aUserId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| items itemsTotal |

	items := Bag new.
	itemsTotal := 0.

	salesBook do: [ :sale |
		items addAll: sale listItems.
		itemsTotal := itemsTotal + sale total.
	].

	^#(items, itemsTotal).
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 21:32:48'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 21:32:49'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 21:32:49'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 21:32:49'!
FAILURE!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:32:49'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 21:32:52'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 21:32:52'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 21:33:06'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:33:35' prior: 50879097!
test17clientHasInitialyNoPurchases

	|aStoreInterface items |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	items := Bag new.
	self assert: #(Bag new, 0) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:33:48' prior: 50879195!
test17clientHasInitialyNoPurchases

	|aStoreInterface items |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	items := Bag new.
	self assert: #(items 0) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
! !

#(items, itemsTotal)!

{items, itemsTotal}!

{items. itemsTotal}!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 21:36:21' prior: 50879109!
listPurchasesFor: aUserId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| items itemsTotal |

	items := Bag new.
	itemsTotal := 0.

	salesBook do: [ :sale |
		items addAll: sale listItems.
		itemsTotal := itemsTotal + sale total.
	].

	^{items. itemsTotal}.
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:36:39' prior: 50879209!
test17clientHasInitialyNoPurchases

	|aStoreInterface |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self assert: {Bag new. 0} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:36:59' prior: 50878962!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := testObjectsFactory itemSellByTheStorePrice * 2 + testObjectsFactory anotherItemSellByTheStorePrice * 2.

	self assert: {items/ itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:37:00'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:37:12' prior: 50879251!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := testObjectsFactory itemSellByTheStorePrice * 2 + testObjectsFactory anotherItemSellByTheStorePrice * 2.

	self assert: {items. itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:37:13'!
FAILURE!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:37:31'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:40:28' prior: 50879277!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStorePrice quantity: 2.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := testObjectsFactory itemSellByTheStorePrice * 2 + testObjectsFactory anotherItemSellByTheStorePrice * 2.

	self assert: {items. itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:40:29'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:40:43' prior: 50879307!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := testObjectsFactory itemSellByTheStorePrice * 2 + testObjectsFactory anotherItemSellByTheStorePrice * 2.

	self assert: {items. itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:40:44'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:41:47' prior: 50879344!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := testObjectsFactory itemSellByTheStorePrice * 2 + testObjectsFactory anotherItemSellByTheStorePrice * 2.

	self assert: {items. itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:41:48'!
ERROR!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:41:57'!
ERROR!
!Sale methodsFor: 'accessing' stamp: 'IO 12/2/2020 21:42:08'!
listItems
	self shouldBeImplemented.! !
!Sale methodsFor: 'accessing' stamp: 'IO 12/2/2020 21:42:20' prior: 50879426!
listItems
	^items copy.! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:42:23'!
ERROR!
!Sale methodsFor: 'initialization' stamp: 'IO 12/2/2020 21:43:21'!
initializeTotal: aTotal withItems: anItemsBag

	total := aTotal.
! !
!Sale methodsFor: 'initialization' stamp: 'IO 12/2/2020 21:43:30' prior: 50879437!
initializeTotal: aTotal withItems: anItemsBag

	total := aTotal.
	items := anItemsBag.
! !
!Cashier methodsFor: 'checkout - private' stamp: 'IO 12/2/2020 21:44:04' prior: 50878419!
createSale

	^Sale of: total.

! !
!Sale class methodsFor: 'instance creation' stamp: 'IO 12/2/2020 21:44:53'!
of: aTotal withItems: aBagOfItems

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal! !

!methodRemoval: Sale class #withProducts:withTotal: stamp: 'IO 12/2/2020 21:44:57'!
withProducts: aBagOfProducts withTotal: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeWithProducts: aBagOfProducts withTotal: aTotal!
!Sale class methodsFor: 'instance creation' stamp: 'IO 12/2/2020 21:45:11' prior: 50879452!
of: aTotal withItems: aBagOfItems

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal withItems: aBagOfItems.
! !
!Cashier methodsFor: 'checkout - private' stamp: 'IO 12/2/2020 21:46:14' prior: 50879448!
createSale

	^Sale of: total withItems: cart listItems.

! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:46:22'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:47:52' prior: 50879381!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 2) + (testObjectsFactory anotherItemSellByTheStorePrice * 2).

	self assert: {items. itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 21:47:53'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:47:53'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:51:28' prior: 50879484!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 4.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 4.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 6.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 6.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 6) + (testObjectsFactory anotherItemSellByTheStorePrice * 6).

	self assert: {items. itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:51:29'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 21:51:40'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:51:40'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 21:53:43'!
test19manyClientsCanAccessTheirPurchasesList

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 4.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 4.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 2) + (testObjectsFactory anotherItemSellByTheStorePrice * 2).

	self assert: {items. itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	).

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 4.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 4.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 4) + (testObjectsFactory anotherItemSellByTheStorePrice * 4).

	self assert: {items. itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 21:53:44'!
FAILURE!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'IO 12/2/2020 21:54:39'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts clientsForCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/2/2020 21:54:37' prior: 50878608!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.
	clientsForCarts := Dictionary new.

! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/2/2020 21:55:59' prior: 50878720!
createCart
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.

	^aCartId.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 21:56:31' prior: 50878666!
createCartFor: aUserId password: aPassword
	"creates a new cart for an user with a password"
	clientDatabase validateUser: aUserId andPassword: aPassword.

	^self createCartFor: aUserId.
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/2/2020 21:58:01'!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.
	
	clientsForCarts at: aClientId

	^aCartId.
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/2/2020 21:59:04' prior: 50879893!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.
	
	clientsForCarts at: aCartId put: aClientId.

	^aCartId.
! !

!methodRemoval: StoreInterface #createCart stamp: 'IO 12/2/2020 21:59:44'!
createCart
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.

	^aCartId.
!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 21:59:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 21:59:46'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 21:59:46'!
FAILURE!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 21:59:46'!
FAILURE!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/2/2020 22:05:37' prior: 50879858!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new.
	salesBook := Dictionary new.
	lastActionForCarts := Dictionary new.
	clientsForCarts := Dictionary new.

! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 22:06:37' prior: 50878647!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total |
	self validateCart: aCartId.
	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook
		forClient: (clientsForCarts at: aCartId)) checkOut.

	carts removeKey: aCartId.

	^total
! !
!Cashier methodsFor: 'checkout - private' stamp: 'IO 12/2/2020 22:07:12'!
registerSaleFor: aClientId

	salesBook at: aClientId put: self createSale.! !
!Cashier class methodsFor: 'instance creation' stamp: 'IO 12/2/2020 22:07:59'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook forClient: aClientId
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook forClient: aClientId.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'IO 12/2/2020 22:08:28'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'IO 12/2/2020 22:08:26'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook forClient: aClientId
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.
	clientId := aClientId.
! !

!methodRemoval: Cashier #registerSaleFor: stamp: 'IO 12/2/2020 22:08:32'!
registerSaleFor: aClientId

	salesBook at: aClientId put: self createSale.!
!Cashier methodsFor: 'checkout - private' stamp: 'IO 12/2/2020 22:08:50' prior: 50878429!
registerSale

	salesBook at: clientId put: self createSale.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:08:51'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:08:51'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:08:51'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:08:51'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:08:51'!
FAILURE!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:08:51'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:08:57'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:08:57'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:08:57'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:08:57'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:08:57'!
FAILURE!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:08:57'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:09:29' prior: 50877794!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:09:50' prior: 50880345!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new
		forClient: Dictionary new.

	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:09:52'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:10:34' prior: 50880361!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: Dictionary new
		forClient: testObjectsFactory validClientId.

	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:10:35'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:10:35'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:10:35'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:10:35'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:10:35'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:10:35'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:10:35'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:10:47' prior: 50877832!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: Dictionary new
		forClient: testObjectsFactory validClientId.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:11:15' prior: 50877776!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := Dictionary new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook
			forClient: testObjectsFactory validClientId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:11:19'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:11:19'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:11:19'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:11:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:11:19'!
FAILURE!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:11:19'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:11:19'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:11:32' prior: 50877810!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := Dictionary new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:11:52' prior: 50880483!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := Dictionary new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook
				forClient: testObjectsFactory validClientId]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:12:11' prior: 50880421!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		forClient: testObjectsFactory validClientId.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:12:12'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:12:55' prior: 50880526!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		forClient: testObjectsFactory validClientId.
		
	total := cashier checkOut.
					
	self assert: (salesBook at: testObjectsFactory validClientId total) = total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:12:55'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:13:02' prior: 50880548!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		forClient: testObjectsFactory validClientId.
		
	total := cashier checkOut.
					
	self assert: (salesBook at: testObjectsFactory validClientId total) = total.! !
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:13:10' prior: 50880570!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		forClient: testObjectsFactory validClientId.
		
	total := cashier checkOut.
					
	self assert: (salesBook at: (testObjectsFactory validClientId) total) = total.! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:13:10'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:13:44' prior: 50880589!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		forClient: testObjectsFactory validClientId.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.
! !
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:14:17' prior: 50880611!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		forClient: testObjectsFactory validClientId.
		
	total := cashier checkOut.
					
	self assert: ((salesBook at: testObjectsFactory validClientId) total) = total.
! !

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:14:18'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:14:18'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:14:18'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:14:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:14:18'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:14:18'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:14:18'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:14:18'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:14:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:14:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:14:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:14:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:14:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:14:32'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:14:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:14:32'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:15:21' prior: 50877850!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := Dictionary new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		forClient: testObjectsFactory validClientId.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:15:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:15:23'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:15:23'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:15:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:15:23'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:15:23'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:15:23'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:15:34' prior: 50877875!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := Dictionary new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'IO 12/2/2020 22:15:59' prior: 50880751!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := Dictionary new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook
		forClient: testObjectsFactory validClientId.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:16:00'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:16:00'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:16:00'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:16:00'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:16:00'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:16:00'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:16:00'!
PASSED!

!methodRemoval: Cashier class #toCheckout:charging:throught:on:registeringOn: stamp: 'IO 12/2/2020 22:16:11'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook!

!methodRemoval: Cashier #initializeToCheckout:charging:throught:registeringOn: stamp: 'IO 12/2/2020 22:16:16'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:16:21'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:16:21'!
FAILURE!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:16:21'!
FAILURE!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/2/2020 22:26:53' prior: 50880039!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new.
	salesBook := Dictionary new.
	lastActionForCarts := OrderedCollection new.


! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/2/2020 22:27:03'!
createCart
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.

	^aCartId.
! !

!methodRemoval: StoreInterface #createCartFor: stamp: 'IO 12/2/2020 22:27:06'!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.
	
	clientsForCarts at: aCartId put: aClientId.

	^aCartId.
!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/2/2020 22:27:43' prior: 50880963!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new.
	salesBook := Dictionary new.
	lastActionForCarts := Dictionary new.


! !
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/2/2020 22:28:10' prior: 50880998!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.


! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 22:28:20' prior: 50880055!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total |
	self validateCart: aCartId.
	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.

	carts removeKey: aCartId.

	^total
! !
!Cashier methodsFor: 'initialization' stamp: 'IO 12/2/2020 22:28:33'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.

! !
!Cashier class methodsFor: 'instance creation' stamp: 'IO 12/2/2020 22:28:42'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook! !
!Cashier methodsFor: 'checkout - private' stamp: 'IO 12/2/2020 22:29:03' prior: 50880119!
registerSale

	salesBook add: self createSale.! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:50' prior: 50880441!
test01CanNotCheckoutAnEmptyCart

	| salesBook |
	
	salesBook := OrderedCollection new.
	self 
		should: [ Cashier 
			toCheckout: testObjectsFactory createCart 
			charging: testObjectsFactory notExpiredCreditCard 
			throught: self
			on: testObjectsFactory today
			registeringOn:  salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:51' prior: 50880381!
test02CalculatedTotalIsCorrect

	| cart cashier |
	
	cart := testObjectsFactory createCart.
	cart add: 2 of: testObjectsFactory itemSellByTheStore.
	
	cashier :=  Cashier
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard 
		throught: self
		on: testObjectsFactory today 
		registeringOn: OrderedCollection new.
		
	self assert: cashier checkOut = (testObjectsFactory itemSellByTheStorePrice * 2)! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 18:51' prior: 50880504!
test03CanNotCheckoutWithAnExpiredCreditCart

	| cart salesBook |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
	
	self
		should: [ Cashier 
				toCheckout: cart 
				charging: testObjectsFactory expiredCreditCard 
				throught: self
				on: testObjectsFactory today
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anError messageText = Cashier canNotChargeAnExpiredCreditCardErrorMessage.
			self assert: salesBook isEmpty ]! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 19:04' prior: 50880630!
test04CheckoutRegistersASale

	| cart cashier salesBook total |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: testObjectsFactory notExpiredCreditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	total := cashier checkOut.
					
	self assert: salesBook size = 1.
	self assert: salesBook first total = total.! !
!CashierTest methodsFor: 'tests' stamp: 'HernanWilkinson 6/17/2013 19:00' prior: 50880702!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!CashierTest methodsFor: 'tests' stamp: 'IO 12/1/2020 20:23:33' prior: 50880777!
test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit

	| cart cashier salesBook creditCard |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 	debitBehavior := [ :anAmount :aCreditCard | self error: Cashier creditCardHasNoCreditErrorMessage].
	
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	self 
		should: [cashier checkOut ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert: salesBook isEmpty ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:29:49'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:29:49'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:29:49'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 22:30:12' prior: 50879884!
createCartFor: aUserId password: aPassword
	"creates a new cart for an user with a password"
	clientDatabase validateUser: aUserId andPassword: aPassword.

	^self createCart.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:30:14'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:30:14'!
FAILURE!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:30:14'!
FAILURE!

!methodRemoval: Cashier class #toCheckout:charging:throught:on:registeringOn:forClient: stamp: 'IO 12/2/2020 22:30:35'!
toCheckout: aCart charging: aCreditCard throught: aMerchantProcessor on: aDate registeringOn: aSalesBook forClient: aClientId
	
	self assertIsNotEmpty: aCart.
	self assertIsNotExpired: aCreditCard on: aDate.
	
	^self new initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook forClient: aClientId.!

!methodRemoval: Cashier #initializeToCheckout:charging:throught:registeringOn:forClient: stamp: 'IO 12/2/2020 22:30:38'!
initializeToCheckout: aCart charging: aCreditCard throught: aMerchantProcessor registeringOn: aSalesBook forClient: aClientId
	
	cart := aCart.
	creditCard := aCreditCard.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.
	clientId := aClientId.
!

Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts clientForCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'IO 12/2/2020 22:31:22'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts clientForCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'private' stamp: 'IO 12/2/2020 22:31:38'!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.

	^aCartId.
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/2/2020 22:31:55' prior: 50881481!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.
	clientForCart at: aCartId put: aClientId.

	^aCartId.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 22:32:13' prior: 50881314!
createCartFor: aClientId password: aPassword
	"creates a new cart for an user with a password"
	clientDatabase validateUser: aClientId andPassword: aPassword.

	^self createCart for: aClientId.
! !

!methodRemoval: StoreInterface #createCart stamp: 'IO 12/2/2020 22:32:26'!
createCart
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.

	^aCartId.
!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:32:27'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:32:27'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:32:27'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 22:32:43' prior: 50881503!
createCartFor: aClientId password: aPassword
	"creates a new cart for an user with a password"
	clientDatabase validateUser: aClientId andPassword: aPassword.

	^self createCartFor: aClientId.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:32:44'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:32:44'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:32:44'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:32:44'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:32:44'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:32:44'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:32:44'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:32:47'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:32:47'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:32:47'!
ERROR!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/2/2020 22:33:10' prior: 50881013!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new.
	salesBook := OrderedCollection new.
	lastActionForCarts := Dictionary new.
	clientForCart := Dictionary new.


! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:33:12'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:33:12'!
FAILURE!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:33:12'!
FAILURE!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'IO 12/2/2020 22:33:47'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts clientForCart clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 22:33:45' prior: 50881028!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total |
	self validateCart: aCartId.
	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.

	carts removeKey: aCartId.
	
	clientId := clientForCart at: aCartId.

	^total
! !

Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts clientForCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'IO 12/2/2020 22:33:54'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts clientForCart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 22:34:08' prior: 50881957!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total clientId |
	self validateCart: aCartId.
	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: salesBook) checkOut.

	carts removeKey: aCartId.
	
	clientId := clientForCart at: aCartId.

	^total
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 22:35:53' prior: 50881995!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total clientId |
	self validateCart: aCartId.
	clientId := clientForCart at: aCartId.
	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard expiringOn: aCCExpirationDate)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBook at: clientId)) checkOut.

	carts removeKey: aCartId.
	


	^total
! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/2/2020 22:37:23' prior: 50881491!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.
	clientForCart at: aCartId put: aClientId.
	(salesBook keys includes: aClientId) ifFalse: [salesBook at: aClientId put: OrderedCollection new].

	^aCartId.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 22:37:56' prior: 50879224!
listPurchasesFor: aClientId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| items itemsTotal |

	items := Bag new.
	itemsTotal := 0.

	(salesBook at: aClientId) do: [ :sale |
		items addAll: sale listItems.
		itemsTotal := itemsTotal + sale total.
	].

	^{items. itemsTotal}.
! !
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/2/2020 22:38:06' prior: 50881817!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new.
	salesBook := Dictionary new.
	lastActionForCarts := Dictionary new.
	clientForCart := Dictionary new.


! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:38:08'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:38:08'!
ERROR!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:38:08'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:38:08'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:38:18'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:38:18'!
ERROR!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:38:18'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:38:18'!
FAILURE!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:38:22'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:38:22'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:39:14'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/2/2020 22:41:26' prior: 50878046!
test06ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2) for: testObjectsFactory validClientId).! !
!StoreInterface methodsFor: 'testing' stamp: 'IO 12/2/2020 22:41:48'!
hasMadeTheSale: aSale for: aClientId

	^(salesBook at: aClientId) includes: aSale.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:41:49'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:41:50'!
ERROR!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:41:50'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:41:50'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:42:43'!
ERROR!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:42:43'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:42:43'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:42:55'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/2/2020 22:44:10' prior: 50882053!
listPurchasesFor: aClientId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| items itemsTotal |

	items := Bag new.
	itemsTotal := 0.

	(salesBook at: aClientId ifAbsent: OrderedCollection new) do: [ :sale |
		items addAll: sale listItems.
		itemsTotal := itemsTotal + sale total.
	].

	^{items. itemsTotal}.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:44:11'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:44:11'!
FAILURE!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:44:11'!
FAILURE!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:44:16'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:44:16'!
FAILURE!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:44:16'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/2/2020 22:45:09' prior: 50879775!
test19manyClientsCanAccessTheirPurchasesList

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 4.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 4.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 2) + (testObjectsFactory anotherItemSellByTheStorePrice * 2).

	self assert: {items. itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	).

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 4.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 4.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 4) + (testObjectsFactory anotherItemSellByTheStorePrice * 4).

	self assert: {items. itemsTotal} equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/2/2020 22:45:11'!
PASSED!

----SNAPSHOT----(2 December 2020 22:46:32) CuisUniversity-4384.image priorSource: 17470191!

----QUIT----(2 December 2020 22:46:38) CuisUniversity-4384.image priorSource: 17638784!

----STARTUP---- (2 December 2020 23:56:23) as /Users/ilanolkies/uba/ingsoft1/macos64/CuisUniversity-4384.image!

!Cart methodsFor: 'copying' stamp: 'IO 12/2/2020 23:58:31' prior: 50878378 overrides: 16881170!
copy

	| cartCopy |
	
	cartCopy := Cart acceptingItemsOf: catalog.
	items do: [ :item | cartCopy add: 1 of: item].
	
	^cartCopy.
! !
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/3/2020 00:01:27' prior: 50882314!
test06ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2 withItems: testObjectsFactory itemSellByTheStore) for: testObjectsFactory validClientId).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:01:53'!
PASSED!

!methodRemoval: Sale class #of: stamp: 'IO 12/3/2020 00:01:56'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal !

!methodRemoval: Sale #initializeTotal: stamp: 'IO 12/3/2020 00:02:01'!
initializeTotal: aTotal

	total := aTotal !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:02:03'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:02:03'!
PASSED!
!Sale methodsFor: 'queries' stamp: 'IO 12/3/2020 00:03:12' prior: 50878562 overrides: 16881029!
= aSale

	^(total = aSale total) and: items = aSale items.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:03:14'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:03:14'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:03:14'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:03:22'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:03:22'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:03:22'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'IO 12/3/2020 00:04:27' prior: 50882881!
test06ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface items |
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.

	aStoreInterface checkOutCart: aCartID
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	
	self assert: (aStoreInterface hasMadeTheSale: (Sale of: testObjectsFactory itemSellByTheStorePrice *2 withItems: items) for: testObjectsFactory validClientId).! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:04:32'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:04:37'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:04:37'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:04:37'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:05:06'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:05:06'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:05:06'!
ERROR!
!Sale methodsFor: 'queries' stamp: 'IO 12/3/2020 00:05:31' prior: 50883138 overrides: 16881029!
= aSale

	^(total = aSale total) and: items = aSale listItems.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:05:32'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:05:34'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:05:34'!
PASSED!
!StoreInterface methodsFor: 'initialization' stamp: 'IO 12/3/2020 00:07:52' prior: 50882067!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new. "cartId -> Cart"
	salesBook := Dictionary new. "clientId -> Sale[]"
	lastActionForCarts := Dictionary new. "cartId -> DateAndTime"
	clientForCart := Dictionary new. "cartId -> clientId"


! !

!methodRemoval: StoreInterface #hasMadeTheSale: stamp: 'IO 12/3/2020 00:08:11'!
hasMadeTheSale: aSale

	^salesBook includes: aSale.!
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 00:12:20' prior: 50882038!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (Cart acceptingItemsOf: catalogue).

	self setCartUsageTime: aCartId.
	clientForCart at: aCartId put: aClientId.	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:12:22'!
PASSED!

TestSuite subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'IO 12/3/2020 00:14:05'!
TestSuite subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'no messages' stamp: 'IO 12/3/2020 00:14:28'!
test01cannotCreateCreditCardWithoutOwner
	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:17:55' prior: 50883972!
test01cannotCreateCreditCardWithoutOwner
	
	self
		should: [CreditCard newWithCco: nil withCced: DateAndTime now + 1 year withCcn: '5400000000000001']
		raise: Error
		withMessageText: CreditCard invalidCco.! !

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'IO 12/3/2020 00:18:24'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:18:26'!
ERROR!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:18:26'!
ERROR!
!CreditCard class methodsFor: 'error messages' stamp: 'IO 12/3/2020 00:19:06'!
invalidCco
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error messages' stamp: 'IO 12/3/2020 00:19:16' prior: 50884004!
invalidCco
	^'Invalid credit card owner'.! !

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:19:20'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:22:09'!
assertInvalidCardNumberErrorWithNumber: aCCNumber 

    self should: [CreditCard
	withCcn: aCCNumber
	withCced: DateAndTime now + 1 year 
	withCco: 'PEPE SANCHEZ'.]
        raise: Error
        withMessageText: CreditCard invalidCcn.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:23:50'!
test01cannotCreateCreditCardWithInvalidCcn
	
    self assertInvalidCardNumberErrorWithNumber: '00000000000000000'.
    self assertInvalidCardNumberErrorWithNumber: '000000000000000'.! !

!methodRemoval: CreditCardTest #test01cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:23:53'!
test01cannotCreateCreditCardWithoutOwner
	
	self
		should: [CreditCard newWithCco: nil withCced: DateAndTime now + 1 year withCcn: '5400000000000001']
		raise: Error
		withMessageText: CreditCard invalidCco.!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:24:06' prior: 50884027!
test01cannotCreateCreditCardWithInvalidCcn
	
	self assertInvalidCardNumberErrorWithNumber: '00000000000000000'.
	self assertInvalidCardNumberErrorWithNumber: '000000000000000'.
! !

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:24:06'!
ERROR!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:24:14'!
ERROR!
!CreditCard class methodsFor: 'error messages' stamp: 'IO 12/3/2020 00:24:33'!
invalidCcn
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error messages' stamp: 'IO 12/3/2020 00:24:43' prior: 50884061!
invalidCcn
	^'Invalid credit card number'.! !

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:24:45'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:25:34'!
test01cannotCreateCreditCardWithNotNumericCcn
	
	self assertInvalidCardNumberErrorWithNumber: '0000000000000000A'.
! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:25:39'!
test02cannotCreateCreditCardWithNotNumericCcn
	
	self assertInvalidCardNumberErrorWithNumber: '0000000000000000A'.
! !

!methodRemoval: CreditCardTest #test01cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:25:39'!
test01cannotCreateCreditCardWithNotNumericCcn
	
	self assertInvalidCardNumberErrorWithNumber: '0000000000000000A'.
!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:26:01'!
FAILURE!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:26:01'!
FAILURE!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:26:05'!
FAILURE!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:26:05'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:26:32' prior: 50884017!
assertInvalidCardNumberErrorWithNumber: aCCNumber 

    self
	should: [CreditCard withCcn: aCCNumber withCced: DateAndTime now + 1 year withCco: 'PEPE SANCHEZ'.]
        raise: Error
        withMessageText: CreditCard invalidCcn.! !

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:26:33'!
FAILURE!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:26:33'!
FAILURE!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:26:37'!
FAILURE!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:26:37'!
FAILURE!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:26:44'!
FAILURE!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:26:44'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 12/3/2020 00:27:53'!
withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner

	^self basicNew initializeWithCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'IO 12/3/2020 00:28:39'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'IO 12/3/2020 00:28:40'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'IO 12/3/2020 00:28:38'!
initializeWithCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner.

	number := aCCNumber.
	expiration := aCCExpirationDate.
	owner := aCCOwner.
 ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:28:44'!
FAILURE!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:28:44'!
FAILURE!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:28:44'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:28:44'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 12/3/2020 00:29:41' prior: 50884140!
withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner

	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCcn].

	^self basicNew initializeWithCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner.! !

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:29:42'!
FAILURE!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:29:42'!
FAILURE!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:29:50'!
FAILURE!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:29:50'!
FAILURE!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:30:05'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:30:32' prior: 50884109!
assertInvalidCardNumberErrorWithNumber: aCCNumber 

    self
	should: [CreditCard withCcn: aCCNumber withCced: DateAndTime now + (1 year) withCco: 'PEPE SANCHEZ'.]
        raise: Error
        withMessageText: CreditCard invalidCcn.! !

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:30:33'!
FAILURE!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:30:33'!
FAILURE!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:30:45'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:30:55' prior: 50884319!
assertInvalidCardNumberErrorWithNumber: aCCNumber 

    self
	should: [CreditCard withCcn: aCCNumber withCced: DateAndTime now + (1 month) withCco: 'PEPE SANCHEZ'.]
        raise: Error
        withMessageText: CreditCard invalidCcn.! !

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:30:56'!
FAILURE!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:30:56'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:31:02' prior: 50884341!
assertInvalidCardNumberErrorWithNumber: aCCNumber 

    self
	should: [CreditCard withCcn: aCCNumber withCced: DateAndTime now + 1 month withCco: 'PEPE SANCHEZ'.]
        raise: Error
        withMessageText: CreditCard invalidCcn.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:31:40' prior: 50884359!
assertInvalidCardNumberErrorWithNumber: aCCNumber 

    self
	should: [CreditCard withCcn: aCCNumber withCced: DateAndTime now + 31 days withCco: 'PEPE SANCHEZ'.]
        raise: Error
        withMessageText: CreditCard invalidCcn.! !

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:31:40'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:31:40'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:32:17'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:32:17'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:32:51'!
test03cannotCreateCreditCardWithoutOwner
	
	self assertInvalidCardNumberErrorWithNumber: '0000000000000000A'.
! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:33:24' prior: 50884394!
test03cannotCreateCreditCardWithoutOwner
    self
	should: [CreditCard withCcn: '540000000001' withCced: DateAndTime now + 31 days withCco: ''.]
        raise: Error
        withMessageText: CreditCard invalidCcn.
! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:33:27' prior: 50884401!
test03cannotCreateCreditCardWithoutOwner
    self
	should: [CreditCard withCcn: '540000000001' withCced: DateAndTime now + 31 days withCco: ''.]
        raise: Error
        withMessageText: CreditCard invalidCco.
! !

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:33:28'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'IO 12/3/2020 00:34:21' prior: 50884288!
withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner

	(
		(aCCNumber allSatisfy: [ :aDigit | aDigit isDigit ]) and:
		aCCNumber size = 16
	) ifFalse: [^self error: CreditCard invalidCcn].
	
	(aCCOwner size > 0) ifFalse: [^self error: CreditCard invalidCco].

	^self basicNew initializeWithCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner.! !

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:34:22'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:34:22'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:34:22'!
FAILURE!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:34:22'!
FAILURE!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:34:29'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:34:29'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:34:29'!
FAILURE!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:34:29'!
FAILURE!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:34:40'!
FAILURE!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:35:09' prior: 50884411!
test03cannotCreateCreditCardWithoutOwner
    self
	should: [CreditCard withCcn: '5400000000000001' withCced: DateAndTime now + 31 days withCco: ''.]
        raise: Error
        withMessageText: CreditCard invalidCco.
! !

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:35:10'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:35:10'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:35:10'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:35:10'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'IO 12/3/2020 00:36:29' prior: 50878858!
notExpiredCreditCard
	
	^CreditCard withCcn: '5400000000000001' withCced: (Month month: today monthIndex year: today yearNumber + 1) withCco: 'PEPE SANCHEZ'.! !
!StoreTestObjectsFactory methodsFor: 'credit card' stamp: 'IO 12/3/2020 00:36:45' prior: 50878851!
expiredCreditCard
	
	^CreditCard withCcn: '5400000000000001' withCced: (Month month: today monthIndex year: today yearNumber - 1) withCco: 'PEPE SANCHEZ'.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:36:47'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:36:50'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:36:50'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:38:32'!
test04storesCcnAndCco

	| creditCard |
	creditCard := CreditCard withCcn: '5400000000000002' withCced: DateAndTime now + 31 days withCco: 'PEPE GOMEZ'.

	self assert: '5400000000000002' equals: creditCard ccn.
	self assert: 'PEPE GOMEZ' equals: creditCard cco.! !

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 00:38:36'!
FAILURE!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:38:55' prior: 50878526!
ccn
	^number! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 00:39:06' prior: 50878530!
cco
	^owner.! !

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:39:07'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:39:07'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:39:07'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 00:39:07'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:39:09'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:39:09'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/3/2020 00:42:23'!
test20CannotUseInvalidCreditCard
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.

	self
		should: [aStoreInterface checkOutCart: aCartId
		ccn: '5041'
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: CreditCard invalidCcn.
			self assert: 0 equals: aStoreInterface numberOfActiveCarts].

	! !

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:42:23'!
FAILURE!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:42:26'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 00:43:11' prior: 50882016!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total clientId |
	self validateCart: aCartId.
	clientId := clientForCart at: aCartId.
	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBook at: clientId)) checkOut.

	carts removeKey: aCartId.
	


	^total
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:43:12'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:43:12'!
FAILURE!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:43:12'!
FAILURE!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:43:45'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 00:44:54' prior: 50884946!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total clientId creditCard |
	self validateCart: aCartId.
	clientId := clientForCart at: aCartId.
	creditCard := (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner).
	(creditCard isKindOf: Error) ifTrue: [^creditCard].
	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: creditCard
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBook at: clientId)) checkOut.

	carts removeKey: aCartId.
	


	^total
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:44:55'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:44:55'!
FAILURE!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:44:55'!
FAILURE!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:45:04'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:45:04'!
FAILURE!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:45:04'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 00:45:44' prior: 50885044!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total clientId |
	self validateCart: aCartId.
	clientId := clientForCart at: aCartId.

	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBook at: clientId)) checkOut.

	carts removeKey: aCartId.
	


	^total
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:45:46'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:45:46'!
FAILURE!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:45:46'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/3/2020 00:46:50' prior: 50884914!
test20CannotUseInvalidCreditCard
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.

	self
		should: [aStoreInterface checkOutCart: aCartId
		ccn: '5041'
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: CreditCard invalidCcn.
			self assert: 1 equals: aStoreInterface numberOfActiveCarts.
			self assert: {Bag new. 0} equals: (aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
		].

	! !

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:46:53'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:46:55'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:47:00'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:47:05'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:47:05'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/3/2020 00:50:04' prior: 50879238!
test17clientHasInitialyNoPurchases

	|aStoreInterface |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self assert: (Sale of: 0 withItems: Bag new) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/3/2020 00:50:50' prior: 50879589!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 4.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 4.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 6.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 6.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 6) + (testObjectsFactory anotherItemSellByTheStorePrice * 6).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/3/2020 00:52:20' prior: 50882724!
test19manyClientsCanAccessTheirPurchasesList

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 4.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 4.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 2) + (testObjectsFactory anotherItemSellByTheStorePrice * 2).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	).

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 4.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 4.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 4) + (testObjectsFactory anotherItemSellByTheStorePrice * 4).


	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/3/2020 00:52:22' prior: 50885623!
test19manyClientsCanAccessTheirPurchasesList

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 4.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 4.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 2) + (testObjectsFactory anotherItemSellByTheStorePrice * 2).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	).

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 4.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 4.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 4) + (testObjectsFactory anotherItemSellByTheStorePrice * 4).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:52:23'!
ERROR!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/3/2020 00:53:25' prior: 50885554!
test17clientHasInitialyNoPurchases

	|aStoreInterface |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self assert: (testObjectsFactory emptySale) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
! !
!StoreTestObjectsFactory methodsFor: 'nil' stamp: 'IO 12/3/2020 00:53:36'!
emtpySale
	^Sale of: 0 withItems: Bag new! !
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/3/2020 00:54:06' prior: 50885310!
test20CannotUseInvalidCreditCard
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.

	self
		should: [aStoreInterface checkOutCart: aCartId
		ccn: '5041'
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: CreditCard invalidCcn.
			self assert: 1 equals: aStoreInterface numberOfActiveCarts.
			self assert: testObjectsFactory emtpySale equals: (aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
		].

	! !

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:54:07'!
ERROR!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:54:34'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:54:34'!
ERROR!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:54:34'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:54:34'!
ERROR!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:54:34'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 00:55:00' prior: 50882570!
listPurchasesFor: aClientId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| items itemsTotal |

	items := Bag new.
	itemsTotal := 0.

	(salesBook at: aClientId ifAbsent: OrderedCollection new) do: [ :sale |
		items addAll: sale listItems.
		itemsTotal := itemsTotal + sale total.
	].

	^Sale of: itemsTotal withItems: items.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:55:01'!
ERROR!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:55:01'!
FAILURE!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:55:01'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:55:10'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:55:10'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'sale' stamp: 'IO 12/3/2020 00:55:28'!
emptySale
	^Sale of: 0 withItems: Bag new! !

!methodRemoval: StoreTestObjectsFactory #emtpySale stamp: 'IO 12/3/2020 00:55:31'!
emtpySale
	^Sale of: 0 withItems: Bag new!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'IO 12/3/2020 00:55:40' prior: 50885787!
test20CannotUseInvalidCreditCard
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.

	self
		should: [aStoreInterface checkOutCart: aCartId
		ccn: '5041'
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: CreditCard invalidCcn.
			self assert: 1 equals: aStoreInterface numberOfActiveCarts.
			self assert: testObjectsFactory emptySale equals: (aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)
		].

	! !

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:55:42'!
FAILURE!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:55:42'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:55:42'!
FAILURE!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:57:39'!
FAILURE!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/3/2020 00:58:12' prior: 50885694!
test19manyClientsCanAccessTheirPurchasesList

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 4.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 4.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 2) + (testObjectsFactory anotherItemSellByTheStorePrice * 2).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	).

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 4.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 4.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 4) + (testObjectsFactory anotherItemSellByTheStorePrice * 4).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword
	)
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'IO 12/3/2020 00:58:20' prior: 50886100!
test19manyClientsCanAccessTheirPurchasesList

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	aStoreInterface addToCart: cartId book: testObjectsFactory itemSellByTheStore quantity: 4.
	aStoreInterface addToCart: cartId book: testObjectsFactory anotherItemSellByTheStore quantity: 4.
	aStoreInterface checkOutCart: cartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 2) + (testObjectsFactory anotherItemSellByTheStorePrice * 2).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	).

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 4.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 4.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 4) + (testObjectsFactory anotherItemSellByTheStorePrice * 4).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:58:21'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 00:58:25'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 00:58:26'!
PASSED!

!methodRemoval: CreditCard class #expiringOn: stamp: 'IO 12/3/2020 00:59:06'!
expiringOn: aMonth 
	
	^self new initializeExpiringOn: aMonth!

!methodRemoval: CreditCard #initializeExpiringOn: stamp: 'IO 12/3/2020 00:59:08'!
initializeExpiringOn: aMonth 
	
	expiration := aMonth !

Object subclass: #CartSession
	instanceVariableNames: 'cart lastAction client'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'IO 12/3/2020 01:02:13'!
Object subclass: #CartSession
	instanceVariableNames: 'cart lastAction client'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'IO 12/3/2020 01:03:47'!
Object subclass: #CartSession
	instanceVariableNames: 'cart lastAction client clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'no messages' stamp: 'IO 12/3/2020 01:03:46'!
setLastUsageTime
	
	lastAction = clock now.
! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:05:05'!
validate
	"validates if the cart associated with a cart ID is usable at this moment.
	In the case it is not, the cart is deleted from the list if necessary and an error is returned"

	(clock now - lastAction < 30 minutes) ifFalse: [
		^self error: StoreInterface invalidCartOutOfTime].
! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:06:17'!
add: aQuantity of: anItem
	cart add: aQuantity of: anItem.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:08:42'!
total
	^cart total! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:08:50'!
listItems
	^cart listItems! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 01:11:39' prior: 50883837!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock).

	self setCartUsageTime: aCartId.
	clientForCart at: aCartId put: aClientId.	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !
!CartSession class methodsFor: 'no messages' stamp: 'IO 12/3/2020 01:12:18'!
withCart: aCart withClock: aClock
	^self basicNew initializeWithCart: aCart withClock: aClock.! !
!CartSession methodsFor: 'nil' stamp: 'IO 12/3/2020 01:12:39'!
initializeWithCart: aCart withClock: aClock
	cart := aCart.
	clock := aClock.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:12:40'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:12:40'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:12:40'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:12:40'!
ERROR!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:13:11'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:13:11'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:13:11'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:13:11'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:13:11'!
ERROR!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:13:11'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:13:26' prior: 50885214!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total clientId |
	self validateCart: aCartId.
	clientId := clientForCart at: aCartId.

	total := (Cashier
		toCheckout: (carts at: aCartId) cart
		charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBook at: clientId)) checkOut.

	carts removeKey: aCartId.
	


	^total
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:13:57' prior: 50886723!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total clientId |
	self validateCart: aCartId.
	clientId := clientForCart at: aCartId.

	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBook at: clientId)) checkOut.

	carts removeKey: aCartId.
	


	^total
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:13:59'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:13:59'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:13:59'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:13:59'!
ERROR!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:13:59'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:14:33'!
ERROR!
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:15:24'!
isEmtpy
	^cart isEmpty.! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:15:29'!
ERROR!
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 01:16:57' prior: 50886500!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys size + 1.
	carts at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock).

	clientForCart at: aCartId put: aClientId.
	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:17:52' prior: 50878638!
addToCart: aCartId book: anItem quantity: aQuantity 
	"adds a quantity of an item to the cart associated with a cart ID"
	(carts at: aCartId) add: aQuantity of: anItem
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:18:10' prior: 50878674!
listCart: aCartId
	"lists the contentes of the cart associated to a cart ID"
	^(carts at: aCartId) listItems.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:19:45' prior: 50886487!
add: aQuantity of: anItem
	self beforeOperation.
	cart add: aQuantity of: anItem.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:20:04'!
beforeOperation
	self validate.
	self setLastUsageTime.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:20:31' prior: 50886496!
listItems
	self beforeOperation.
	^cart listItems! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:20:34'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:20:34'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:20:34'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:20:34'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:20:34'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:20:42'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:20:42'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:21:07'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:21:12'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:21:21'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:21:21'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:21:29'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:21:34'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:21:34'!
ERROR!
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:22:26' prior: 50886521!
initializeWithCart: aCart withClock: aClock
	cart := aCart.
	clock := aClock.
	lastAction := clock now.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:22:29'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:22:29'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:22:29'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:22:29'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:22:29'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:22:29'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:22:29'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:22:29'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:22:29'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:22:29'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:22:29'!
ERROR!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:22:29'!
FAILURE!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:22:33'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:22:33'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:23:04'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:23:26'!
ERROR!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:23:38' prior: 50886746!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total clientId |

	clientId := clientForCart at: aCartId.

	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBook at: clientId)) checkOut.

	carts removeKey: aCartId.
	


	^total
! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:23:49'!
ERROR!
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:24:35'!
isEmpty
	^cart isEmpty.! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:25:10'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:25:14'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:25:14'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:25:15'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:25:15'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:25:15'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:25:15'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:25:15'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:25:15'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:25:17'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:25:17'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:25:40'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:25:56'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:25:56'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:26:46'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:26:46'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:26:46'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:26:46'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:26:46'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:26:46'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:26:46'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:26:46'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:26:48'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:26:48'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:28:01'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:28:01'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:28:01'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:28:01'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:28:01'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:28:01'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:28:01'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:28:01'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:28:06'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:28:06'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:28:23'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:28:27'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:28:33'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:28:33'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:28:49'!
FAILURE!

clock now - lastAction!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:31:00'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:31:00'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:31:00'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:31:00'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:31:00'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:31:00'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:31:00'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:31:00'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:31:05'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:31:05'!
ERROR!
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:31:49' prior: 50886471!
setLastUsageTime
	
	lastAction := clock now.
! !

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:31:50'!
FAILURE!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:31:55'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:31:56'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:31:56'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:31:56'!
FAILURE!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:31:56'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:31:56'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:31:56'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:31:56'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:31:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:31:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:32:06'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:32:06'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:32:52'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:32:52'!
FAILURE!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:34:05'!
FAILURE!
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:36:46'!
isValid
	"validates if the cart associated with a cart ID is usable at this moment.
	In the case it is not, the cart is deleted from the list if necessary and an error is returned"

	^(clock now - lastAction < 30 minutes)
! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'IO 12/3/2020 01:36:55' prior: 50886884!
beforeOperation

	self setLastUsageTime.! !
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 01:37:49' prior: 50878729!
do: anOperation onCart: aCartId
	"this method validates that we operate on a valid cart, then it sets the time of operation as the last known use of the cart and executes the operation"
	(carts at: aCartId) isValid ifFalse: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime].

	^anOperation value.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:37:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:37:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:37:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:37:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:37:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:37:59'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:37:59'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:37:59'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:38:27' prior: 50886862!
addToCart: aCartId book: anItem quantity: aQuantity 
	"adds a quantity of an item to the cart associated with a cart ID"
	self do:[(carts at: aCartId) add: aQuantity of: anItem] onCart: aCartId.! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:38:51' prior: 50886871!
listCart: aCartId
	"lists the contentes of the cart associated to a cart ID"
	^self do: [(carts at: aCartId) listItems] onCart: aCartId.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:38:53'!
FAILURE!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:38:53'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:38:53'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:38:53'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:38:53'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:38:53'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:39:04' prior: 50887197!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total clientId |

	clientId := clientForCart at: aCartId.

	total := (Cashier
		toCheckout: (carts at: aCartId)
		charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBook at: clientId)) checkOut.

	carts removeKey: aCartId.

	^total
! !
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:39:44' prior: 50888200!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total clientId |

	self do: [
		clientId := clientForCart at: aCartId.

		total := (Cashier
			toCheckout: (carts at: aCartId)
			charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
			throught: merchantProccessor
			on: DateAndTime now
			registeringOn: (salesBook at: clientId)) checkOut.
	] onCart: aCartId.

	carts removeKey: aCartId.

	^total
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:39:45'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:39:45'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:39:45'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:39:45'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:40:13'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:40:13'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:40:13'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:40:13'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:40:16'!
FAILURE!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:40:16'!
FAILURE!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:40:53' prior: 50888056!
addToCart: aCartId book: anItem quantity: aQuantity 
	"adds a quantity of an item to the cart associated with a cart ID"
	self do:[
		(carts at: aCartId ifAbsent: [^self error: StoreInterface invalidCartId]) add: aQuantity of: anItem] onCart: aCartId.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:40:54'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:40:54'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:40:54'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:40:54'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:40:54'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'IO 12/3/2020 01:41:08' prior: 50888448!
addToCart: aCartId book: anItem quantity: aQuantity 
	"adds a quantity of an item to the cart associated with a cart ID"
	self do:[
		(carts at: aCartId) add: aQuantity of: anItem] onCart: aCartId.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:41:09'!
FAILURE!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:41:09'!
FAILURE!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:41:09'!
FAILURE!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:41:09'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:41:11'!
FAILURE!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:41:11'!
FAILURE!
!StoreInterface methodsFor: 'private' stamp: 'IO 12/3/2020 01:41:32' prior: 50887973!
do: anOperation onCart: aCartId
	"this method validates that we operate on a valid cart, then it sets the time of operation as the last known use of the cart and executes the operation"
	(carts at: aCartId ifAbsent: [^self error: StoreInterface invalidCartId]) isValid ifFalse: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime].

	^anOperation value.
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:41:34'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'IO 12/3/2020 01:41:46'!
PASSED!

----SNAPSHOT----(3 December 2020 01:51:35) CuisUniversity-4384.image priorSource: 17638877!

----QUIT----(3 December 2020 01:51:37) CuisUniversity-4384.image priorSource: 17831410!

----STARTUP---- (3 December 2020 10:30:24) as C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\CuisUniversity-4384.image!


!classRemoval: #StoreTestObjectsFactory stamp: 'LH 12/3/2020 10:30:51'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreInterface stamp: 'LH 12/3/2020 10:30:52'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'LH 12/3/2020 10:30:52'!
Object subclass: #Sale
	instanceVariableNames: 'total products items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'LH 12/3/2020 10:30:52'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'LH 12/3/2020 10:30:53'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'LH 12/3/2020 10:30:53'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreInterfaceTest stamp: 'LH 12/3/2020 10:30:54'!
TestCase subclass: #StoreInterfaceTest
	instanceVariableNames: 'testObjectsFactory debitBehavior clock clientsBook timeLeap'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'LH 12/3/2020 10:30:54'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'LH 12/3/2020 10:30:55'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Usuario\Desktop\labo\inge1\Cuis\windows64 tus libros\TusLibros-3.st----!

!methodRemoval: CartSession #isEmtpy stamp: 'LH 12/3/2020 10:33:26'!
isEmtpy
	^cart isEmpty.!

!methodRemoval: CartSession #validate stamp: 'LH 12/3/2020 10:33:57'!
validate
	"validates if the cart associated with a cart ID is usable at this moment.
	In the case it is not, the cart is deleted from the list if necessary and an error is returned"

	(clock now - lastAction < 30 minutes) ifFalse: [
		^self error: StoreInterface invalidCartOutOfTime].
!
!CartSession methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 10:34:29' prior: 50890557!
listItems
	self setLastUsageTime.
	^cart listItems! !
!CartSession methodsFor: 'adding' stamp: 'LH 12/3/2020 10:34:44' prior: 50890523!
add: aQuantity of: anItem
	self setLastUsageTime .
	cart add: aQuantity of: anItem.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'LH 12/3/2020 10:34:50'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 10:34:51'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 10:34:51'!
PASSED!
!CartSession methodsFor: 'adding' stamp: 'LH 12/3/2020 10:35:59'!
add: anItem
	"adds 1 of an item to this session's cart"
	self add: 1 of: anItem.! !

!methodRemoval: CartSession #beforeOperation stamp: 'LH 12/3/2020 10:36:07'!
beforeOperation

	self setLastUsageTime.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 10:38:27'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 10:38:28'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 10:38:28'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'LH 12/3/2020 10:38:44' prior: 50889589!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart add: testObjectsFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LH 12/3/2020 10:39:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LH 12/3/2020 10:39:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LH 12/3/2020 10:39:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LH 12/3/2020 10:39:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LH 12/3/2020 10:39:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LH 12/3/2020 10:39:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LH 12/3/2020 10:39:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LH 12/3/2020 10:39:03'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/3/2020 10:46:25' prior: 50890901!
listPurchasesFor: aClientId password: aPassword
	"lists the purchases that have been made by carts associated with an user" 
	| items itemsTotal |

	items := Bag new.
	itemsTotal := 0.

	(salesBook at: aClientId ifAbsent: OrderedCollection new) do: [ :sale |
		items addAll: sale listItems.
		itemsTotal := itemsTotal + sale total.
	].

	^Sale of: itemsTotal withItems: items.! !
!StoreInterface methodsFor: 'cart invalidation' stamp: 'LH 12/3/2020 10:51:21' prior: 50890925!
validateCart: aCartId
	"validates if the cart associated with a cart ID is usable at this moment.
	In the case it is not, the cart is deleted from the list if necessary and an error is returned"
	
	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	(carts at: aCartId) isValid ifFalse: [
		carts removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 10:51:24'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 10:51:24'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 10:51:24'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 10:51:24'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 10:51:24'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 10:51:24'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 10:51:24'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 10:51:25'!
PASSED!

!methodRemoval: StoreInterface #setCartUsageTime: stamp: 'LH 12/3/2020 10:51:42'!
setCartUsageTime: aCartId
	"registers the current Date and Time as the last usage of the cart associated with a cart ID"
	lastActionForCarts add: (Association key: aCartId value: clock now).
!
!StoreInterface methodsFor: 'private' stamp: 'LH 12/3/2020 10:53:07' prior: 50890954!
do: anOperation onCart: aCartId
	"this method validates that we operate on a valid cart, then it sets the time of operation as the last known use of the cart and executes the operation"
	self validateCart: aCartId.

	^anOperation value.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 10:53:08'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 10:53:09'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 10:53:09'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 10:53:09'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 10:53:09'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 10:53:09'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 10:53:09'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 10:53:09'!
PASSED!
!StoreInterface methodsFor: 'private' stamp: 'LH 12/3/2020 10:53:18' prior: 50891585!
do: anOperation onCart: aCartId
	"this method validates that we operate on a valid cart, then it sets the time of operation as the last known use of the cart and executes the operation"
	
	self validateCart: aCartId.
	^anOperation value.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 10:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 10:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 10:53:19'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 10:53:20'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 10:53:20'!
PASSED!
!StoreInterface methodsFor: 'private' stamp: 'LH 12/3/2020 10:54:09' prior: 50890941!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := carts keys last + 1.
	carts at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock).

	clientForCart at: aCartId put: aClientId.
	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 10:54:11'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 10:54:11'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 10:54:11'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 10:54:11'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 10:54:11'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 10:54:11'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 10:54:11'!
ERROR!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 10:54:17'!
ERROR!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 12/3/2020 11:00:24'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts clientForCart smallestAvailableCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'private' stamp: 'LH 12/3/2020 11:00:22' prior: 50891745!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := smallestAvailableCartId.
	smallestAvailableCartId := aCartId + 1.
	carts at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock).

	clientForCart at: aCartId put: aClientId.
	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !
!StoreInterface methodsFor: 'initialization' stamp: 'LH 12/3/2020 11:00:37' prior: 50890818!
initializeWithCatalogue: aCatalgue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalgue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new. "cartId -> Cart"
	salesBook := Dictionary new. "clientId -> Sale[]"
	lastActionForCarts := Dictionary new. "cartId -> DateAndTime"
	clientForCart := Dictionary new. "cartId -> clientId"
	smallestAvailableCartId := 0.


! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 11:00:46'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 11:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 11:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 11:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 11:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 11:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 11:00:47'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 11:00:47'!
PASSED!
!StoreInterface methodsFor: 'initialization' stamp: 'LH 12/3/2020 11:04:11' prior: 50891856!
initializeWithCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalogue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new. "cartId -> CartSession"
	salesBook := Dictionary new. "clientId -> Sale[]"
	clientForCart := Dictionary new. "cartId -> clientId"
	smallestAvailableCartId := 0.


! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 11:04:15'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 11:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 11:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 11:04:16'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 11:04:16'!
PASSED!
!CartSession methodsFor: 'accesing' stamp: 'LH 12/3/2020 11:04:32'!
client

	^client copy.! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/3/2020 11:07:58' prior: 50890862!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total |

	self do: [ |aCartSession clientId|
		aCartSession := carts at: aCartId.
		clientId := aCartSession client.

		total := (Cashier
			toCheckout: aCartSession
			charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
			throught: merchantProccessor
			on: DateAndTime now
			registeringOn: (salesBook at: clientId)) checkOut.
	] onCart: aCartId.

	carts removeKey: aCartId.

	^total
! !
!CartSession class methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:23:25'!
withCart: aCart withClock: aClock andClient: aClientId 
	^self basicNew initializeWithCart: aCart withClock: aClock.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:23:25' prior: 50891841!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := smallestAvailableCartId.
	smallestAvailableCartId := aCartId + 1.
	carts at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).

	clientForCart at: aCartId put: aClientId.
	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !

!methodRemoval: CartSession class #withCart:withClock: stamp: 'LH 12/3/2020 11:23:25'!
withCart: aCart withClock: aClock
	^self basicNew initializeWithCart: aCart withClock: aClock.!
!CartSession methodsFor: 'initialization' stamp: 'LH 12/3/2020 11:24:22'!
initializeWithCart: aCart withClock: aClock andClientId: aClientId 
	cart := aCart.
	clock := aClock.
	lastAction := clock now.! !
!CartSession class methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:24:22' prior: 50892058!
withCart: aCart withClock: aClock andClient: aClientId 
	^self basicNew initializeWithCart: aCart withClock: aClock andClientId: aClientId.! !

!methodRemoval: CartSession #initializeWithCart:withClock: stamp: 'LH 12/3/2020 11:24:22'!
initializeWithCart: aCart withClock: aClock
	cart := aCart.
	clock := aClock.
	lastAction := clock now.!
!CartSession methodsFor: 'initialization' stamp: 'LH 12/3/2020 11:24:41' prior: 50892086!
initializeWithCart: aCart withClock: aClock andClientId: aClientId 
	cart := aCart.
	clock := aClock.
	client := aClientId.
	lastAction := clock now.! !
!StoreInterface methodsFor: 'private' stamp: 'LH 12/3/2020 11:25:02' prior: 50892065!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := smallestAvailableCartId.
	smallestAvailableCartId := aCartId + 1.
	carts at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).

	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !
!StoreInterface methodsFor: 'initialization' stamp: 'LH 12/3/2020 11:25:10' prior: 50891944!
initializeWithCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalogue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	carts := Dictionary new. "cartId -> CartSession"
	salesBook := Dictionary new. "clientId -> Sale[]"
	smallestAvailableCartId := 0.


! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 11:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 11:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 11:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 11:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 11:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 11:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 11:25:15'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 11:25:16'!
PASSED!

Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts smallestAvailableCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 12/3/2020 11:25:22'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue carts salesBook clientDatabase merchantProccessor clock lastActionForCarts smallestAvailableCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'private' stamp: 'LH 12/3/2020 11:27:10' prior: 50892116!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := smallestAvailableCartId.
	carts at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).
	smallestAvailableCartId := aCartId + 1.
	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 12/3/2020 11:28:40'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue cartsSessions salesBook clientDatabase merchantProccessor clock lastActionForCarts smallestAvailableCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:28:40' prior: 50892131!
initializeWithCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalogue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	cartsSessions := Dictionary new. "cartId -> CartSession"
	salesBook := Dictionary new. "clientId -> Sale[]"
	smallestAvailableCartId := 0.


! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:28:40' prior: 50890841!
isActiveCart: aCartID 
	"awnsers if there is a usable cart associated with a cart ID"
	^cartsSessions includesKey: aCartID.
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:28:40' prior: 50891492!
validateCart: aCartId
	"validates if the cart associated with a cart ID is usable at this moment.
	In the case it is not, the cart is deleted from the list if necessary and an error is returned"
	
	(self isActiveCart: aCartId) ifFalse: [^self error: StoreInterface invalidCartId].
	(cartsSessions at: aCartId) isValid ifFalse: [
		cartsSessions removeKey: aCartId.
		^self error: StoreInterface invalidCartOutOfTime.].
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:28:40' prior: 50890847!
numberOfActiveCarts
	"awnsers the number of carts that exist in the store"
	^cartsSessions size.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:28:40' prior: 50892034!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total |

	self do: [ |aCartSession clientId|
		aCartSession := cartsSessions at: aCartId.
		clientId := aCartSession client.

		total := (Cashier
			toCheckout: aCartSession
			charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
			throught: merchantProccessor
			on: DateAndTime now
			registeringOn: (salesBook at: clientId)) checkOut.
	] onCart: aCartId.

	cartsSessions removeKey: aCartId.

	^total
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:28:40' prior: 50890894!
listCart: aCartId
	"lists the contentes of the cart associated to a cart ID"
	^self do: [(cartsSessions at: aCartId) listItems] onCart: aCartId.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:28:40' prior: 50892233!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := smallestAvailableCartId.
	cartsSessions at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).
	smallestAvailableCartId := aCartId + 1.
	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:28:40' prior: 50890853!
addToCart: aCartId book: anItem quantity: aQuantity 
	"adds a quantity of an item to the cart associated with a cart ID"
	self do:[
		(cartsSessions at: aCartId) add: aQuantity of: anItem] onCart: aCartId.! !

!methodRemoval: CartSession #add: stamp: 'LH 12/3/2020 11:34:44'!
add: anItem
	"adds 1 of an item to this session's cart"
	self add: 1 of: anItem.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 11:34:53'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 11:34:54'!
PASSED!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 12/3/2020 11:40:26'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue cartsSessions salesBook clientDatabase merchantProccessor clock lastActionForCarts availableCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:40:26' prior: 50892258!
initializeWithCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalogue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	cartsSessions := Dictionary new. "cartId -> CartSession"
	salesBook := Dictionary new. "clientId -> Sale[]"
	availableCartId := 0.


! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:40:26' prior: 50892339!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := availableCartId.
	cartsSessions at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).
	availableCartId := aCartId + 1.
	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 12/3/2020 11:41:01'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue cartsSessions salesBook clientDatabase merchantProccessor clock lastActionForCarts nextCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:41:01' prior: 50892506!
initializeWithCatalogue: aCatalogue withMerchantProccessor: aMerchantProccessor withClientDatabase: aClientDatabase withClock: aClock 
	
	catalogue := aCatalogue.
	merchantProccessor := aMerchantProccessor.
	clientDatabase := aClientDatabase.
	clock := aClock.
	
	cartsSessions := Dictionary new. "cartId -> CartSession"
	salesBook := Dictionary new. "clientId -> Sale[]"
	nextCartId := 0.


! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:41:01' prior: 50892522!
createCartFor: aClientId
	"creates a new cart in this Store interface"
	|aCartId|

	aCartId := nextCartId.
	cartsSessions at: aCartId put: (CartSession
		withCart: (Cart acceptingItemsOf: catalogue)
		withClock: clock andClient: aClientId).
	nextCartId := aCartId + 1.
	salesBook at: aClientId ifAbsentPut: OrderedCollection new.

	^aCartId.
! !
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/3/2020 11:48:13' prior: 50892354!
addToCart: aCartId book: anItem quantity: aQuantity 
	"adds a quantity of an item to the cart associated with a cart ID"
	
	self validateCart: aCartId.

	(cartsSessions at: aCartId) add: aQuantity of: anItem! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 11:48:16'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 11:48:16'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/3/2020 11:49:53' prior: 50892306!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total aCartSession |
	
	self validateCart: aCartId.
	
	aCartSession := cartsSessions at: aCartId.

	total := (Cashier
		toCheckout: aCartSession
		charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBook at: aCartSession client)) checkOut.

	cartsSessions removeKey: aCartId.

	^total
! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 11:49:55'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 11:49:55'!
PASSED!
!StoreInterface methodsFor: 'interface' stamp: 'LH 12/3/2020 11:50:40' prior: 50892331!
listCart: aCartId
	"lists the contentes of the cart associated to a cart ID"
	
	self validateCart: aCartId.
	^(cartsSessions at: aCartId) listItems.! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 11:50:41'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 11:50:41'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 11:50:41'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 11:50:41'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 11:50:41'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 11:50:42'!
PASSED!

!methodRemoval: StoreInterface #do:onCart: stamp: 'LH 12/3/2020 11:51:40'!
do: anOperation onCart: aCartId
	"this method validates that we operate on a valid cart, then it sets the time of operation as the last known use of the cart and executes the operation"
	
	self validateCart: aCartId.
	^anOperation value.
!

----SNAPSHOT----(3 December 2020 11:53:12) CuisUniversity-4384.image priorSource: 17851282!

Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue cartsSessions salesBook clientDatabase merchantProccessor clock nextCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreInterface category: 'TusLibros' stamp: 'LH 12/3/2020 11:54:07'!
Object subclass: #StoreInterface
	instanceVariableNames: 'catalogue cartsSessions salesBook clientDatabase merchantProccessor clock nextCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartSession category: 'TusLibros' stamp: 'LH 12/3/2020 11:54:45'!
Object subclass: #CartSession
	instanceVariableNames: 'cart lastAction clientID clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:54:45' prior: 50892108!
initializeWithCart: aCart withClock: aClock andClientId: aClientId 
	cart := aCart.
	clock := aClock.
	clientID := aClientId.
	lastAction := clock now.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:54:45' prior: 50892030!
client

	^clientID copy.! !

!classDefinition: #CartSession category: 'TusLibros' stamp: 'LH 12/3/2020 11:54:55'!
Object subclass: #CartSession
	instanceVariableNames: 'cart lastAction clientId clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartSession methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:54:55' prior: 50892863!
initializeWithCart: aCart withClock: aClock andClientId: aClientId 
	cart := aCart.
	clock := aClock.
	clientId := aClientId.
	lastAction := clock now.! !
!CartSession methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:54:55' prior: 50892871!
client

	^clientId copy.! !
!CartSession methodsFor: 'accesing' stamp: 'LH 12/3/2020 11:55:09'!
clientId

	^clientId copy.! !
!StoreInterface methodsFor: 'as yet unclassified' stamp: 'LH 12/3/2020 11:55:09' prior: 50892656!
checkOutCart: aCartId ccn: aCCNumber cced: aCCExpirationDate cco: aCCOwner
	"checksout the cart associated with a cart ID and removes the cart after, debiting the credit card that matches the information.
	The sale is registered on the sales book"
	| total aCartSession |
	
	self validateCart: aCartId.
	
	aCartSession := cartsSessions at: aCartId.

	total := (Cashier
		toCheckout: aCartSession
		charging: (CreditCard withCcn: aCCNumber withCced: aCCExpirationDate withCco: aCCOwner)
		throught: merchantProccessor
		on: DateAndTime now
		registeringOn: (salesBook at: aCartSession clientId)) checkOut.

	cartsSessions removeKey: aCartId.

	^total
! !

!methodRemoval: CartSession #client stamp: 'LH 12/3/2020 11:55:09'!
client

	^clientId copy.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CreditCardTest #test01cannotCreateCreditCardWithInvalidCcn stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CreditCardTest #test02cannotCreateCreditCardWithNotNumericCcn stamp: 'LH 12/3/2020 11:55:14'!
PASSED!

!testRun: #CreditCardTest #test03cannotCreateCreditCardWithoutOwner stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #CreditCardTest #test04storesCcnAndCco stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 11:55:15'!
PASSED!

Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard totals'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'LH 12/3/2020 11:57:41'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard totals'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'LH 12/3/2020 11:57:44'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'LH 12/3/2020 11:57:44'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'LH 12/3/2020 11:57:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'LH 12/3/2020 11:57:44'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'LH 12/3/2020 11:57:44'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'LH 12/3/2020 11:57:44'!
PASSED!

Object subclass: #Sale
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'LH 12/3/2020 12:00:01'!
Object subclass: #Sale
	instanceVariableNames: 'total items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'LH 12/3/2020 12:12:04' prior: 50890013!
test06ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface items aClientId aClientPassword |
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aClientId := testObjectsFactory validClientId.
	aClientPassword := testObjectsFactory validClientPassword.
	aCartID := aStoreInterface createCartFor: aClientId password: aClientPassword.
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	
	aStoreInterface checkOutCart: aCartID
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	
	self  assert: (Sale of: testObjectsFactory itemSellByTheStorePrice *2 withItems: items)
		equals: (aStoreInterface listPurchasesFor: aClientId password: aClientPassword).! !
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'LH 12/3/2020 12:12:38' prior: 50893096!
test06ACartWithItemsCanBeCheckedOut
	| aCartID aStoreInterface items aClientId aClientPassword |
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aClientId := testObjectsFactory validClientId.
	aClientPassword := testObjectsFactory validClientPassword.
	aCartID := aStoreInterface createCartFor: aClientId password: aClientPassword.
	
	aStoreInterface addToCart: aCartID book: testObjectsFactory itemSellByTheStore quantity: 2.
	aStoreInterface checkOutCart: aCartID
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
	
	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	
	self  assert: (Sale of: testObjectsFactory itemSellByTheStorePrice *2 withItems: items)
		equals: (aStoreInterface listPurchasesFor: aClientId password: aClientPassword).! !

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 12:12:39'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 12:12:39'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 12:12:39'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 12:12:39'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 12:12:39'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 12:12:39'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 12:12:39'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 12:12:39'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 12:12:39'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 12:12:39'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 12:12:40'!
PASSED!

!methodRemoval: StoreInterface #hasMadeTheSale:for: stamp: 'LH 12/3/2020 12:13:28'!
hasMadeTheSale: aSale for: aClientId

	^(salesBook at: aClientId) includes: aSale.!
!StoreInterfaceTest methodsFor: 'tests cart usage' stamp: 'LH 12/3/2020 12:14:13'!
test05AStoreCanAddItemsToCarts
	| aCartId1 aCartId2 aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId1 := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aCartId2 := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	aStoreInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aStoreInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((aStoreInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((aStoreInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).! !

!methodRemoval: StoreInterfaceTest #test05AStoreCanAddItemsToMultipleCarts stamp: 'LH 12/3/2020 12:14:13'!
test05AStoreCanAddItemsToMultipleCarts
	| aCartId1 aCartId2 aStoreInterface|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartId1 := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	
	aCartId2 := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	
	aStoreInterface addToCart: aCartId1 book: (testObjectsFactory itemSellByTheStore) quantity: 2.
	aStoreInterface addToCart: aCartId2 book: (testObjectsFactory itemSellByTheStore) quantity: 1.
	
	self assert: 2 equals: ((aStoreInterface listCart: aCartId1) occurrencesOf: (testObjectsFactory itemSellByTheStore)).
	self assert: 1 equals: ((aStoreInterface listCart: aCartId2) occurrencesOf: (testObjectsFactory itemSellByTheStore)).!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/3/2020 12:16:39' prior: 50890042!
test07CannotModifyACartFromOutsideStore
	| aCartID listedCart aStoreInterface anItem|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	aStoreInterface addToCart: aCartID book: anItem quantity: 2.
	
	listedCart := aStoreInterface listCart: aCartID.
	
	listedCart add: anItem withOccurrences: 2.

	self assert: 2 equals: ((aStoreInterface listCart: aCartID) occurrencesOf: anItem).! !
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/3/2020 12:16:43' prior: 50893298!
test07CannotModifyACartFromOutsideStore
	| aCartID listedCart aStoreInterface anItem|
	
	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	aCartID := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	anItem := testObjectsFactory itemSellByTheStore.
	
	aStoreInterface addToCart: aCartID book: anItem quantity: 2.
	
	listedCart := aStoreInterface listCart: aCartID.
	
	listedCart add: anItem withOccurrences: 2.

	self assert: 2 equals: ((aStoreInterface listCart: aCartID) occurrencesOf: anItem).! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 12:16:45'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 12:16:46'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 12:16:46'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 12:16:46'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 12:16:46'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 12:16:46'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/3/2020 12:23:34' prior: 50890149!
test20CannotUseInvalidCreditCard
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.

	self should: [
			aStoreInterface checkOutCart: aCartId
						 ccn: '5041'
						 cced: testObjectsFactory notExpiredCreditCard cced
						 cco: testObjectsFactory notExpiredCreditCard cco.]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: CreditCard invalidCcn.
			self assert: 1 equals: aStoreInterface numberOfActiveCarts.
			self assert: testObjectsFactory emptySale equals: (
				aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword)].

	! !

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 12:23:37'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 12:23:37'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/3/2020 12:25:48' prior: 50893411!
test20CannotUseInvalidCreditCard
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.

	self should: [aStoreInterface 
				checkOutCart: aCartId
				ccn: '5041'
				cced: testObjectsFactory notExpiredCreditCard cced
				cco: testObjectsFactory notExpiredCreditCard cco.]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: CreditCard invalidCcn.
			self assert: 1 equals: aStoreInterface numberOfActiveCarts.
			self 
				assert: testObjectsFactory emptySale 
				equals: (aStoreInterface 
						listPurchasesFor: testObjectsFactory 
						validClientId password: testObjectsFactory validClientPassword)].

	! !
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/3/2020 12:26:07' prior: 50890121!
test16CannotOperateAfterCheckout
	| aStoreInterface aCartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	aCartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: 1.

	aStoreInterface 
		checkOutCart: aCartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.

	self
		should: [aStoreInterface listCart: aCartId]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: StoreInterface invalidCartId.
			self assert: 0 equals: aStoreInterface numberOfActiveCarts].

	! !
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/3/2020 12:29:08'!
assertThatDoing: aClosure onANewStoreInterfaceShouldRasieErrorWithText: errorText
	|aStoreInterface|

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.

	self
		should: [aClosure value: aStoreInterface]
		raise: Error
		withMessageText: errorText.

	! !
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/3/2020 12:30:16' prior: 50890065!
test08CannotCreateCartWithInvalidClientId
	
	self 
		assertThatDoing: [:aStoreInterface | aStoreInterface createCartFor: testObjectsFactory invalidClientId password: testObjectsFactory validClientPassword]
		onANewStoreInterfaceShouldRasieErrorWithText: StoreInterface invalidClientId.
	

	

	! !

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 12:30:18'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/3/2020 12:31:06' prior: 50890097!
test14CannotAddOnNotExistentCart
	
	self
		assertThatDoing: [:aStoreInterface | aStoreInterface addToCart: 1 book: testObjectsFactory itemSellByTheStore quantity: 1]
		onANewStoreInterfaceShouldRasieErrorWithText: StoreInterface invalidCartId

	! !
!StoreInterfaceTest methodsFor: 'tests bad cart usage' stamp: 'LH 12/3/2020 12:31:44' prior: 50890110!
test15CannotListNotExistentCart
	
	self
		assertThatDoing: [:aStoreInterface | aStoreInterface listCart: 1]
		onANewStoreInterfaceShouldRasieErrorWithText: StoreInterface invalidCartId

	! !

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 12:31:45'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 12:31:45'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 12:31:45'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 12:31:45'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 12:31:45'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 12:31:45'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 12:31:45'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'LH 12/3/2020 12:36:58'!
puchaseWithCart: aCartId inTheStore: aStoreInterface forQuantityOfBooks: aQuantity

	
	aStoreInterface addToCart: aCartId book: testObjectsFactory itemSellByTheStore quantity: aQuantity.
	aStoreInterface addToCart: aCartId book: testObjectsFactory anotherItemSellByTheStore quantity: aQuantity.
	aStoreInterface checkOutCart: aCartId
		ccn: testObjectsFactory notExpiredCreditCard ccn
		cced: testObjectsFactory notExpiredCreditCard cced
		cco: testObjectsFactory notExpiredCreditCard cco.
! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'LH 12/3/2020 12:38:12' prior: 50890294!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 2.

	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 4.

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 6.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 6.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 6) + (testObjectsFactory anotherItemSellByTheStorePrice * 6).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 12:38:14'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'LH 12/3/2020 12:39:37' prior: 50890349!
test19manyClientsCanAccessTheirPurchasesList

	| aStoreInterface items itemsTotal cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 2.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 4.
	
	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 2.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 2.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 2) + (testObjectsFactory anotherItemSellByTheStorePrice * 2).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	).

	items := Bag new.
	items add: testObjectsFactory itemSellByTheStore withOccurrences: 4.
	items add: testObjectsFactory anotherItemSellByTheStore withOccurrences: 4.
	itemsTotal := (testObjectsFactory itemSellByTheStorePrice * 4) + (testObjectsFactory anotherItemSellByTheStorePrice * 4).

	self assert: (Sale of: itemsTotal withItems: items) equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 12:39:38'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'sale' stamp: 'LH 12/3/2020 12:41:14'!
aSaleWithDiferentItemsInQuantity: aQuantity

	|items itemsTotal|
	items := Bag new.
	items add: self itemSellByTheStore withOccurrences: aQuantity.
	items add: self anotherItemSellByTheStore withOccurrences: aQuantity.
	itemsTotal := (self itemSellByTheStorePrice * aQuantity) + (self anotherItemSellByTheStorePrice * aQuantity).! !
!StoreTestObjectsFactory methodsFor: 'sale' stamp: 'LH 12/3/2020 12:41:45' prior: 50893760!
aSaleWithDiferentItemsInQuantity: aQuantity

	|items itemsTotal|
	items := Bag new.
	items add: self itemSellByTheStore withOccurrences: aQuantity.
	items add: self anotherItemSellByTheStore withOccurrences: aQuantity.
	itemsTotal := (self itemSellByTheStorePrice * aQuantity) + (self anotherItemSellByTheStorePrice * aQuantity).
	
	^Sale of: itemsTotal withItems: items.! !
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'LH 12/3/2020 12:42:57' prior: 50893665!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface aSale cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 2.

	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 4.

	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 6.

	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 12:43:00'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'LH 12/3/2020 12:44:06' prior: 50893705!
test19manyClientsCanAccessTheirPurchasesList

	| aStoreInterface aSale cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 2.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 4.
	
	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 2.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword
	).

	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 4.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory anotherValidClientId password: testObjectsFactory anotherValidClientPassword
	)
! !

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 12:44:07'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 12:44:08'!
PASSED!

----SNAPSHOT----(3 December 2020 12:45:26) CuisUniversity-4384.image priorSource: 17957904!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'LH 12/3/2020 12:47:21' prior: 50893789!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface aSale cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 2.

	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 2.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword).

	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 4.

	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 6.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword).
! !

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test01ANewStoreHasNoActiveCarts stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test02ACartCanBeCreatedInAStore stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test03AStoreInterfaceCanCreateMultipleCarts stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test04ANewCartInAStoreIsEmpty stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test05AStoreCanAddItemsToCarts stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test06ACartWithItemsCanBeCheckedOut stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test07CannotModifyACartFromOutsideStore stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test08CannotCreateCartWithInvalidClientId stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test09CannotCreateCartWithInvalidClientPassword stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test10CannotAdd30MinutesAfterCreation stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test11CannotCheckout30MinutesAfterAdding stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test12CannotList30MinutesAfterLastOperation stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test13CanListDuring30MinutesAfterLastListing stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test14CannotAddOnNotExistentCart stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test15CannotListNotExistentCart stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test16CannotOperateAfterCheckout stamp: 'LH 12/3/2020 12:47:24'!
PASSED!

!testRun: #StoreInterfaceTest #test17clientHasInitialyNoPurchases stamp: 'LH 12/3/2020 12:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 12:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test19manyClientsCanAccessTheirPurchasesList stamp: 'LH 12/3/2020 12:47:25'!
PASSED!

!testRun: #StoreInterfaceTest #test20CannotUseInvalidCreditCard stamp: 'LH 12/3/2020 12:47:25'!
PASSED!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'LH 12/3/2020 12:47:34' prior: 50893932!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface aSale cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 2.

	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 2.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword).


	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 4.

	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 6.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword).
! !

----SNAPSHOT----(3 December 2020 12:51:21) CuisUniversity-4384.image priorSource: 17992891!
!StoreInterfaceTest methodsFor: 'tests list purchases' stamp: 'LH 12/3/2020 12:59:54'!
test18clientAfterCheckoutHasPurchasedItems

	| aStoreInterface aSale cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 2.

	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 2.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword).


	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 4.

	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 6.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword).
! !

!methodRemoval: StoreInterfaceTest #test18clientAfterCheckoutHasPurchasedBooks stamp: 'LH 12/3/2020 12:59:54'!
test18clientAfterCheckoutHasPurchasedBooks

	| aStoreInterface aSale cartId |

	aStoreInterface := testObjectsFactory aStoreInterfaceWithSimulator: self.
	
	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 2.

	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 2.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword).


	cartId := aStoreInterface createCartFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword.
	self puchaseWithCart: cartId inTheStore: aStoreInterface forQuantityOfBooks: 4.

	aSale := testObjectsFactory aSaleWithDiferentItemsInQuantity: 6.
	self assert: aSale equals: (
		aStoreInterface listPurchasesFor: testObjectsFactory validClientId password: testObjectsFactory validClientPassword).
!

----QUIT----(3 December 2020 13:01:36) CuisUniversity-4384.image priorSource: 17997519!